// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <setjmp.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <limits.h>
#include <float.h>
#include <Windows.h>

//#include <ext\types.h>
#include "Utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "gen.h"
#include "main.h"
#include "C_Yacced.tab.h"

#include "ExprOptimize.h"

static TPExprNode Optimize(TPExprNode pN); // forward decl



static TPExprNode OptimizeUnary(TPExprNode pN) {
    ASSERT(pN->Usage == uUnary);
    pN->Use.Unary.pOperand = Optimize(pN->Use.Unary.pOperand);
    return pN;
}

static TPExprNode OptimizeBinary(TPExprNode pN) {
    ASSERT(pN->Usage == uBinary);
    pN->Use.Binary.pLeft = Optimize(pN->Use.Binary.pLeft);
    pN->Use.Binary.pRight = Optimize(pN->Use.Binary.pRight);
    return pN;
}


static TPExprNode OptimizeTernary(TPExprNode pN) {
    ASSERT(pN->Usage == uTernary);
    pN->Use.Ternary.First = Optimize(pN->Use.Ternary.First);
    pN->Use.Ternary.Second = Optimize(pN->Use.Ternary.Second);
    pN->Use.Ternary.Third = Optimize(pN->Use.Ternary.Third);
    return pN;
}

static TPExprNode OptimizeDotExpr(TPExprNode pN) {
    ASSERT(pN->Usage == uDot);
    pN->Use.Dot.pRecord = Optimize(pN->Use.Dot.pRecord);
    return pN;
}


static TPExprNode OptimizeArrowExpr(TPExprNode pN) {
    ASSERT(pN->Usage == uArrow);
    pN->Use.Arrow.pRecord = Optimize(pN->Use.Arrow.pRecord);
    return pN;
}


static TPExprNode OptimizeArrayExpr(TPExprNode pN) {
    ASSERT(pN->Usage == uArray);
    pN->Use.Array.pVector = Optimize(pN->Use.Array.pVector);
    pN->Use.Array.pIndex = Optimize(pN->Use.Array.pIndex);
    return pN;
}


static TPExprNode OptimizeAssign(TPExprNode pN) {
    ASSERT(pN->Usage == uAssign);
    pN->Use.Assign.pLval = Optimize(pN->Use.Assign.pLval);
    pN->Use.Assign.pRval = Optimize(pN->Use.Assign.pRval);
    return pN;
}


static TPExprNode Optimize(TPExprNode pN) {
    if (pN == NULL) {
        Error(FATAL, "Optimizing a NULL expression");
        return pN;
    }

    switch (pN->Usage) {
    case uConst:    return pN;                          // We can't improve on a single Const value;
    case uVar:      return pN;                          // We can't improve on a single variable value;
    case uUnary:    return OptimizeUnary(pN);           // Do what we can with unary opaeration.
    case uBinary:   return OptimizeBinary(pN);          // Do what we can with binary operations.
    case uTernary:  return OptimizeTernary(pN);         // Do what we can with Ternaryoperations.
    case uDot:      return OptimizeDotExpr(pN);         // Do what we can with structure DOT expression.
    case uArrow:    return OptimizeArrowExpr(pN);       // Do what we can with structure Arrow expression.
    case uArray:    return OptimizeArrayExpr(pN);       // Do what we can with Array expression.
    case uFunc:     return pN;                          // We can't improve on a function call.
    case uCast_c2s:
    case uCast_c2l:                                     // Currently ignoring Casts (is this wize?)
    case uCast_s2l:
    case uCast_b2s:
    case uCast_b2l:
    case uCast_u2l:
    case uCast_l2s:
    case uCast_l2b:
    case uCast_s2b: return pN;
    case uAssign:   return OptimizeAssign(pN);          // Do what we can with assignments.
    default:        Error(FATAL, "ParseExpr: What [%d]\n", pN->Usage);
        return NULL;
    }
}





// ##########################################################################
// #  Function: ExprOptimize
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
TPExprNode  ExprOptimize(TPExprNode pN) {

    ConsolePrintf(CON_WHITE_BRIGHT, "Optimizer  Before\n");
    GenExpressionPrettyPrint(4, pN);
    
    pN = Optimize(pN);
    
    ConsolePrintf(CON_WHITE_BRIGHT, "Optimizer  After\n");    
    GenExpressionPrettyPrint(4, pN);
    
    ConsolePrintf(CON_WHITE_BRIGHT, "Optimizer  End\n");  

    return pN;
}    



/* eof */


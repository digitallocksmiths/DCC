// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <Windows.h>

#include "Utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Gen.h"
#include "Statements.h"
#include "main.h"
#include "ExprOptimize.h"

static void GenStatements(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel); // forward

#ifdef _DEBUG


void    GenStatementPrettyPrint(int iDepth, TPStatement pStat, BOOL fNext) {
    
    if (pStat == NULL) {
        return;
    }
    do {
        ConsoleIndent(iDepth);
        if (pStat->pszLabel) {
            printf("%s: ", pStat->pszLabel);
        }
        switch (pStat->Usage) {
        case    StatementCOMPOUND:
            printf("COMPOUND {\n");
            GenStatementPrettyPrint(iDepth + 1, pStat->Use._compound.pStatement, TRUE);
            ConsoleIndent(iDepth); printf("COMPOUND_END }\n");
            break;

        case    StatementRETURN:
            printf("RETURN %s\n", (pStat->Use._return.pExpr) ? "something" : "void");
            break;

        case    StatementIF:
            printf("IF (%s) THEN\n", (pStat->Use._if.pCond) ? "something" : "void");
            GenStatementPrettyPrint(iDepth + 1, pStat->Use._if.pYes, TRUE);
            if (pStat->Use._if.pNo) {
                ConsoleIndent(iDepth); printf("ELSE\n");
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._if.pNo, TRUE);
            }
            ConsoleIndent(iDepth); printf("IF_END\n");
            break;

        case    StatementWHILE:
            printf("WHILE (%s) DO\n", (pStat->Use._while.pCond) ? "something" : "void");
            if (pStat->Use._while.pAction) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._while.pAction, TRUE);
            }
            ConsoleIndent(iDepth); printf("WHILE_END\n");
            break;

        case    StatementDO:
            printf("DO\n");
            if (pStat->Use._do.pAction) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._do.pAction, TRUE);
            }
            ConsoleIndent(iDepth+1); printf("while condition (%s)\n", (pStat->Use._do.pCond) ? "something" : "void");
            ConsoleIndent(iDepth); printf("DO_END\n");
            break;

        case    StatementFOR:
            printf("FOR\n");
            ConsoleIndent(iDepth + 1); printf("Init      (%s)\n", (pStat->Use._for.pInit)   ? "something" : "void");
            ConsoleIndent(iDepth + 1); printf("Condition (%s)\n", (pStat->Use._for.pCond)   ? "something" : "void");
            if (pStat->Use._for.pAction) {
                GenStatementPrettyPrint(iDepth + 2, pStat->Use._for.pAction, TRUE);
            }
            ConsoleIndent(iDepth + 1); printf("Repeat    (%s)\n", (pStat->Use._for.pRepeat) ? "something" : "void");

            ConsoleIndent(iDepth); printf("FOR_END\n");
            break;

        case    StatementEXPR:
            printf("EXPRESSION (%s)\n", (pStat->Use._expr.pExpr) ? "something" : "void");
            //GenExpressionPrettyPrint(iDepth + 1, pStat->Use._expr.pExpr);
//            pStat->Use._expr.pExpr  = ExprOptimize(pStat->Use._expr.pExpr);
#pragma message("GenStatementPrettyPrint: ExprOptimize commented out")

            break;

        case    StatementBREAK:
            printf("BREAK\n");
            break;

        case    StatementCONTINUE:
            printf("CONTINUE\n");
            break;

        case    StatementGOTO:
            printf("GOTO '%s'\n", pStat->Use._goto.pszLabel);
            break;

        case    StatementSWITCH:
            printf("SWITCH (%s)\n", (pStat->Use._switch.pExpr) ? "something" : "WTF?");
            if (pStat->Use._switch.pBody) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._switch.pBody, TRUE);
            }
            ConsoleIndent(iDepth); printf("SWITCH_END\n");
            break;

        case    StatementCASE:
            printf("CASE '%s'\n", (pStat->Use._case.pExpr) ? "something" : "default");
            if (pStat->Use._case.pBody) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._case.pBody, TRUE);
            }
            break;

        default: Error(FATAL, "StatementPrint(): unknown statement usage");
        }
        pStat = pStat->pNext;
    } while (fNext && pStat);
}
#endif // _DEBUG



// ##########################################################################
// #  Function: GenStatementLabel
// #        Generate an statement lable for the current 'c' statement.. 
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
LPSTR GenStatementLabel(LPSTR pszFn, LPSTR pszLab) {
    static char szLab[256];

    if (pszLab != NULL) {
        sprintf_s(szLab, sizeof(szLab), "Label_%s_%s", pszFn, pszLab);
    }
    else {
        szLab[0] = '\0';
    }
    return szLab;
}

// ##########################################################################
// #  Function: GenStatementLabel
// #        Generate an assembler line for the Statement Start. 
// #        If the statement is labeled the label will be genterated here.
// #
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenStatementIntro(FILE *hOut, TPStatement pStat, LPSTR pszFn, LPSTR pszAction, LPSTR pszExtraComment) {
    static char szComment[100];
    LPSTR pszLab = GenStatementLabel(pszFn, pStat->pszLabel);

    sprintf_s(szComment, sizeof(szComment), "; ==== %s Statement =======================================", pszAction);
    szComment[OPCODE_WIDTH + OPERAND_WIDTH - 2] = ' ';
    szComment[OPCODE_WIDTH + OPERAND_WIDTH - 1] = '\0';
    GenAsmOut(pszLab, szComment, "", pszExtraComment, TRUE, FALSE);
}

// ##########################################################################
// #  Function: GenExpr
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
static void GenExpr(FILE *hOut, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szStatementRef = GenLabel("_Statement_Expression_");
    GenStatementIntro(hOut, pStat, pszFunctionName, "Expr", szStatementRef);
    GenExpression(pStat->Use._expr.pExpr);
    GenAsmOut("", ";      Expr end ------------", "", szStatementRef, TRUE, FALSE);
    Dispose(szStatementRef);
}

// ##########################################################################
// #  Function: GenCompound
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenCompound(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szStatementRef = GenLabel("_Statement_compound_");
    GenStatementIntro(hOut, pStat, pszFunctionName, "Compound", szStatementRef);
    GenStatements(hOut, iDepth+1, pStat->Use._compound.pStatement, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel);
    GenAsmOut("", ";      Compound End --------", "", szStatementRef, TRUE, FALSE);
    Dispose(szStatementRef);
}

// ##########################################################################
// #  Function: GenReturn
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenReturn(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    GenStatementIntro(hOut, pStat, pszFunctionName, "Return", "");

    if (pStat->Use._return.pExpr != NULL) {
        GenExpression(pStat->Use._return.pExpr);
    }
    if ((iDepth > 1) || (pStat->pNext != NULL)) {
        GenAsmOut("", "rjmp", pszExitLabel, "  2: Return", TRUE, FALSE);
    }
    else {
        GenAsmOut("", "", "", "   : Return. (by fall through)", TRUE, FALSE);
    }

}

// ##########################################################################
// #  Function: GenIf
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenIf(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szIfThenLabel = NULL;
    LPSTR       szIfElseLabel = NULL;
    LPSTR       szIfDoneLabel = NULL;

    LPSTR       szStatementRef = GenLabel("_Statement_If_");

    GenStatementIntro(hOut, pStat, pszFunctionName, "If", szStatementRef);

    if (pStat->Use._if.pCond == NULL) {
        Error(WARNINGX, "GenIf(): no condition in If statement");
        GenAsmOut("", "; ***** IF condition was missing ! no code generated", "", "", TRUE, FALSE);
        return;
    }

    ASSERT(IsBoolean(pStat->Use._if.pCond->pType));

    if (pStat->Use._if.pNo == NULL) {
        szIfThenLabel = GenLabel("_IfThen_");
        //szIfElseLabel = GenLabel("_IfElse_");
        szIfDoneLabel = GenLabel("_IfDone_");

        // GenExpressionConditional(hOut, pStat->Use._if.pCond, szIfThenLabel, szIfDoneLabel);                      //
        GenExpressionConditional(pStat->Use._if.pCond, NULL, szIfDoneLabel);                                        //
        GenAsmOut(szIfThenLabel, ";      If Then ------------", "", szStatementRef, TRUE, FALSE);             //  Then
        GenStatements(hOut, iDepth+1, pStat->Use._if.pYes, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel);   //      Body
    }
    else {
        szIfThenLabel = GenLabel("_IfThen_");
        szIfElseLabel = GenLabel("_IfElse_");
        szIfDoneLabel = GenLabel("_IfDone_");

        // GenExpressionConditional(hOut, pStat->Use._if.pCond, szIfThenLabel, szIfElseLabel);                              //
        GenExpressionConditional(pStat->Use._if.pCond, NULL,          szIfElseLabel);                                       //
        GenAsmOut(szIfThenLabel, ";      If Then ------------", "", szStatementRef, TRUE, FALSE);                     //  Then
        GenStatements(hOut, iDepth+1, pStat->Use._if.pYes, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); //      Body
        GenAsmOut("", "rjmp", szIfDoneLabel, "1/2:", TRUE, FALSE);                                                    //      exit
        GenAsmOut(szIfElseLabel, ";      If Else ------------", "", szStatementRef, TRUE, FALSE);                     //  Else
        GenStatements(hOut, iDepth+1, pStat->Use._if.pNo, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel);  //      Body
    }
    GenAsmOut(szIfDoneLabel, ";      If End --------------", "", szStatementRef, TRUE, FALSE);

    if (szIfDoneLabel) Dispose(szIfDoneLabel);
    if (szIfElseLabel) Dispose(szIfElseLabel);
    if (szIfThenLabel) Dispose(szIfThenLabel);
    Dispose(szStatementRef);
}

// ##########################################################################
// #  Function: GenWhile
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenWhile(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szStatementRef = GenLabel("_Statement_While_");

    GenStatementIntro(hOut, pStat, pszFunctionName, "While", szStatementRef);

    if (pStat->Use._while.pCond == NULL) {
        Error(WARNINGX, "GenWhile(): no condition in while statement");
        GenAsmOut("", "; ***** WHILE condition was missing ! no code generated", "", "", TRUE, FALSE);
        return;
    }

    LPSTR       szNewWhileTestLabel = GenLabel("_WhileTest_");
    GenAsmOut(szNewWhileTestLabel, ";      While Condition ----", "", szStatementRef, TRUE, FALSE);
    if (pStat->Use._while.pAction == NULL) {                                                    // ? no body so 
        GenExpressionConditional(pStat->Use._while.pCond, szNewWhileTestLabel, NULL);     //      true->repeat, false->fall out. 
        GenAsmOut("", ";      While end -----------", "", szStatementRef, TRUE, FALSE);   //
    }                                                                                           //
    else {                                                                                      // ? body
        LPSTR       szNewWhileBreakLabel = GenLabel("_WhileBreak_");
        GenExpressionConditional(pStat->Use._while.pCond, NULL, szNewWhileBreakLabel);    //      true->fall into body, false->exit 
        GenStatements(hOut, iDepth+1, pStat->Use._while.pAction, pszFunctionName, pszExitLabel, szNewWhileBreakLabel, szNewWhileTestLabel);
        GenAsmOut("", "rjmp", szNewWhileTestLabel, "1/2:", TRUE, FALSE);                  //
        GenAsmOut(szNewWhileBreakLabel, ";      While end -----------", "", szStatementRef, TRUE, FALSE);
        Dispose(szNewWhileBreakLabel);
    }

    Dispose(szNewWhileTestLabel);
    Dispose(szStatementRef);
}

// ##########################################################################
// #  Function: GenDo
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenDo(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szNewDoAgainLabel = GenLabel("_DoAgain_");
    LPSTR       szNewDoTestLabel  = GenLabel("_DoTest_");
    LPSTR       szNewDoBreakLabel = GenLabel("_DoBreak_");
    LPSTR       szStatementRef    = GenLabel("_Statement_Do_");

    GenStatementIntro(hOut, pStat, pszFunctionName, "Do", szStatementRef);
    GenAsmOut(szNewDoAgainLabel, ";      Do Body ------------", "", szStatementRef, TRUE, FALSE);
    GenStatements(hOut, iDepth+1, pStat->Use._do.pAction, pszFunctionName, pszExitLabel, szNewDoBreakLabel, szNewDoTestLabel);

    if (pStat->Use._do.pCond != NULL) {
        GenAsmOut(szNewDoTestLabel, ";      Do test -------------", "", szStatementRef, TRUE, FALSE);
        GenExpressionConditional(pStat->Use._do.pCond, szNewDoAgainLabel, NULL);
    }
    else {
        Error(WARNINGX, "GenDo(): no condition in do statement");
        GenAsmOut(szNewDoTestLabel, "; ***** DO condition was missing !", "", "", TRUE, FALSE);
    }

    GenAsmOut(szNewDoBreakLabel, ";      Do end --------------", "", szStatementRef, TRUE, FALSE);

    Dispose(szStatementRef);
    Dispose(szNewDoBreakLabel);
    Dispose(szNewDoTestLabel);
    Dispose(szNewDoAgainLabel);
}

// ##########################################################################
// #  Function: GenFor
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenFor(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       szTestLabel        = GenLabel("_ForTest_");
    LPSTR       szForBodyLabel     = GenLabel("_ForBody_");
    LPSTR       szNewContinueLabel = GenLabel("_ForCont_");
    LPSTR       szNewBreakLabel    = GenLabel("_ForBreak_");
    LPSTR       szStatementRef     = GenLabel("_Statement_For_");

    GenStatementIntro(hOut, pStat, pszFunctionName, "For", szStatementRef);
    if (pStat->Use._for.pInit != NULL) {
        GenExpression(pStat->Use._for.pInit);
    }

    GenAsmOut(szTestLabel, ";      For Test ------------", "", szStatementRef, TRUE, FALSE);
    if (pStat->Use._for.pCond != NULL) {
        GenExpressionConditional(pStat->Use._for.pCond, NULL, szNewBreakLabel);
    }

    GenAsmOut(szForBodyLabel, ";      For Body ------------", "", szStatementRef, TRUE, FALSE);
    GenStatements(hOut, iDepth+1, pStat->Use._for.pAction, pszFunctionName, pszExitLabel, szNewBreakLabel, szNewContinueLabel);

    GenAsmOut(szNewContinueLabel,";      For Body end --------", "", szStatementRef, TRUE, FALSE);
    if (pStat->Use._for.pRepeat != NULL) {
        GenExpression(pStat->Use._for.pRepeat);
    }

    GenAsmOut("", "rjmp", szTestLabel, "  2:", TRUE, FALSE);

    GenAsmOut(szNewBreakLabel,   ";      For End -------------", "", szStatementRef, TRUE, FALSE);

    Dispose(szTestLabel);
    Dispose(szForBodyLabel);
    Dispose(szNewContinueLabel);
    Dispose(szNewBreakLabel);
    Dispose(szStatementRef);
}

// ##########################################################################
// #  Function: GenBreak
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenBreak(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    GenStatementIntro(hOut, pStat, pszFunctionName, "Break", "");
    if ((pszBreakLabel == NULL) || (*pszBreakLabel == '\0')) {
        Error(WARNINGX, "GenBreak(): Function '%s' break ignored. It has no enclosing compound statement.", pszFunctionName);
        GenAsmOut("", "; ***** Unexpected break statement found here ***", "", NULL, TRUE, FALSE);
        return;
    }
    GenAsmOut("", "rjmp", pszBreakLabel, "  2: break", TRUE, FALSE);
}

// ##########################################################################
// #  Function: GenContinue
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenContinue(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    GenStatementIntro(hOut, pStat, pszFunctionName, "Continue", "");
    if ((pszContinueLabel == NULL) || (*pszContinueLabel == '\0')) {
        Error(WARNINGX, "GenContinue(): Function '%s' continue ignored. It has no enclosing loop.", pszFunctionName);
        GenAsmOut("", "; ***** Unexpected continue statement found here ***", "", NULL, TRUE, FALSE);
        return;
    }
    GenAsmOut("", "rjmp", pszContinueLabel, "  2: continue", TRUE, FALSE);
}

// ##########################################################################
// #  Function: GenGoto
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenGoto(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    GenStatementIntro(hOut, pStat, pszFunctionName, "Goto", "");
    GenAsmOut("", "rjmp", GenStatementLabel(pszFunctionName, pStat->Use._goto.pszLabel), "  2: goto", TRUE, FALSE);
}

// ##########################################################################
// #  Function: GenSwitch
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenSwitch(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    LPSTR       pszNewBreakLabel = GenLabel("_Break_");
    LPSTR       pszCaseTestLabel = GenLabel("_Case_");
    LPSTR       pszCaseBodyLabel = GenLabel("_Body_");
    LPSTR       szStatementRef = GenLabel("_Statement_Switch_");

    char        szOperand[32];
    char        szComment[32];
    char        szTestLabel[32];
    char        szBodyLabel[32];
    int         iTestCount;
    int         iBodyCount;

    TPStatement pCase;
    GenStatementIntro(hOut, pStat, pszFunctionName, "Switch", szStatementRef);
    GenExpression(pStat->Use._switch.pExpr);

    int nExprTypeSize = CalcSizeOf(pStat->Use._switch.pExpr->pType);

    iTestCount = 1;
    iBodyCount = 1;
    sprintf(szTestLabel, "%s_%d", pszCaseTestLabel, iTestCount++);
    sprintf(szBodyLabel, "%s_%d", pszCaseBodyLabel, iBodyCount++);

    sprintf(szTestLabel, "%s_%d", pszCaseTestLabel, iTestCount++);
    for (pCase = pStat->Use._switch.pBody; pCase != NULL; pCase = pCase->pNext) {
        ASSERT(pCase->Usage == StatementCASE);
        
        if (pCase->Use._case.pExpr != NULL) {                                                   // case
            long lVal;
            ASSERT(pCase->Use._case.pExpr->Usage == uConst);
            switch (nExprTypeSize) {
            case 1: lVal = (pCase->Use._case.pExpr->Use.Const.lInteger & 0xFF);
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC0, lVal);
                    sprintf(szComment, "  1: -> Case %d", lVal);
                    GenAsmOut("", "cpi", szOperand, szComment, TRUE, FALSE);
                    GenAsmOut("", "breq", szBodyLabel, "1/2:", TRUE, FALSE);
                    break;
            case 2: lVal = (pCase->Use._case.pExpr->Use.Const.lInteger & 0xFFFF);
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC0, (lVal&0xFF));
                    sprintf(szComment, "  1: -> Case %d", lVal);
                    GenAsmOut(szTestLabel, "cpi", szOperand, szComment, TRUE, FALSE);
                    sprintf(szTestLabel, "%s_%d", pszCaseTestLabel, iTestCount++);
                    GenAsmOut("", "brne", szTestLabel, "1/2:", TRUE, FALSE);
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC1, ((lVal>>8) & 0xFF));
                    GenAsmOut("", "cpi", szOperand, "  1:", TRUE, FALSE);
                    GenAsmOut("", "breq", szBodyLabel, "1/2:", TRUE, FALSE);
                    break;
            case 4: lVal = pCase->Use._case.pExpr->Use.Const.lInteger;
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC0, (lVal & 0xFF));
                    sprintf(szComment, "  1: -> Case %ld", lVal);
                    GenAsmOut(szTestLabel, "cpi", szOperand, szComment, TRUE, FALSE);
                    sprintf(szTestLabel, "%s_%d", pszCaseTestLabel, iTestCount++);
                    GenAsmOut("", "brne", szTestLabel, "1/2:", TRUE, FALSE);
                    
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC1, ((lVal >> 8) & 0xFF));
                    GenAsmOut("", "cpi", szOperand, "  1:", TRUE, FALSE);
                    GenAsmOut("", "brne", szTestLabel, "1/2:", TRUE, FALSE);
                    
                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC2, ((lVal >> 16) & 0xFF));
                    GenAsmOut("", "cpi", szOperand, "  1:", TRUE, FALSE);
                    GenAsmOut("", "brne", szTestLabel, "1/2:", TRUE, FALSE);

                    sprintf(szOperand, "r%d, 0x%02x", REG_ACC3, ((lVal >> 24) & 0xFF));
                    GenAsmOut("", "cpi", szOperand, "  1:", TRUE, FALSE);
                    GenAsmOut("", "breq", szBodyLabel, "1/2:", TRUE, FALSE);
                    break;
            default: Error(FATAL, "GenSwitch(): wierd size");
            }
            if (pCase->Use._case.pBody != NULL) {
                sprintf(szBodyLabel, "%s_%d", pszCaseBodyLabel, iBodyCount++);
            }
        }
        else {                                                                                  // default
            if (nExprTypeSize == 1) {
                GenAsmOut("", "rjmp", szBodyLabel, "  2: -> Default", TRUE, FALSE);
            }
            else {
                GenAsmOut(szTestLabel, "rjmp", szBodyLabel, "  2: -> Default", TRUE, FALSE);
            }
        }
    }

    iBodyCount = 1;
    sprintf(szBodyLabel, "%s_%d", pszCaseBodyLabel, iBodyCount++);

    for (pCase = pStat->Use._switch.pBody; pCase != NULL; pCase = pCase->pNext) {

        if (pCase->Use._case.pExpr != NULL) {                                                   // case
            if (pCase->Use._case.pBody != NULL) {
                GenAsmOut(szBodyLabel, ";      Case ----------------", "", szStatementRef, TRUE, FALSE);
                GenStatements(hOut, iDepth+1, pCase->Use._case.pBody, pszFunctionName, pszExitLabel, pszNewBreakLabel, pszContinueLabel);
                sprintf(szBodyLabel, "%s_%d", pszCaseBodyLabel, iBodyCount++);
            }
        }
        else {                                                                                  // default
            GenAsmOut(szBodyLabel, ";      Default -------------", "", szStatementRef, TRUE, FALSE);
            GenStatements(hOut, iDepth+1, pCase->Use._case.pBody, pszFunctionName, pszExitLabel, pszNewBreakLabel, pszContinueLabel);
        }
    }
    GenAsmOut(pszNewBreakLabel, ";      Switch end ----------", "", szStatementRef, TRUE, FALSE);

}

// ##########################################################################
// #  Function: GenCase
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenCase(FILE *hOut, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {
    GenStatementIntro(hOut, pStat, pszFunctionName, "Case", "");
    Error(FATAL, "GenCase() Not yet implemented");
}

// ##########################################################################
// #  Function: GenStatements
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
static void GenStatements(FILE *hOut, int iDepth, TPStatement pStat, LPSTR pszFunctionName, LPSTR pszExitLabel, LPSTR pszBreakLabel, LPSTR pszContinueLabel) {

    while (pStat != NULL) {

        switch (pStat->Usage) {
        case    StatementCOMPOUND:  GenCompound(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementRETURN:    GenReturn(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementIF:        GenIf(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementWHILE:     GenWhile(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementDO:        GenDo(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementFOR:       GenFor(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementEXPR:      GenExpr(hOut, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementBREAK:     GenBreak(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementCONTINUE:  GenContinue(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementGOTO:      GenGoto(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        case    StatementSWITCH:    GenSwitch(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
//      case    StatementCASE:      GenCase(hOut, iDepth, pStat, pszFunctionName, pszExitLabel, pszBreakLabel, pszContinueLabel); break;
        default: Error(FATAL, "GenStatements(): unknown statement usage");
        }
        pStat = pStat->pNext;
    }
}


// ##########################################################################
// #  Function: GenCalcParamSize
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
int GenParamVars(FILE *hOut, TPDeclSpec  pParams, int  iLocalsSize) {
    char        caString[256];

    ASSERT(pParams->Usage == DecId);
    ASSERT((pParams->Use.DecId.pTarget == NULL) || (pParams->Use.DecId.pTarget->Usage == DecSpec) || (pParams->Use.DecId.pTarget->Usage == DecPtr) || (pParams->Use.DecId.pTarget->Usage == DecArray));
    
    if (pParams->Use.DecId.pTarget && (pParams->Use.DecId.pTarget->Usage == DecSpec) &&  ((pParams->Use.DecId.pTarget->Use.DecSpec.Type & TypeVOID) == TypeVOID)) {
        GenAsmOut("", "; #   Params: <none>", "", NULL, TRUE, FALSE);
        return 0;
    }

    LPSTR       pszIntro = "  Params: ";
    TPDeclSpec  pP;                                                                             // pointer to the current parameter
    int         iOffset = FRAME_OVERHEAD+ iLocalsSize;                                          // offset of first parameter
    int         iParamCounts = 0;                                                               // count of parameters
    int         iTotalParamSize = 0;

    for (pP = pParams, iParamCounts = 0; pP != NULL; pP = pP->Use.DecId.pBrother, iParamCounts++) {
        pP->Use.DecId.iOffset = CalcSizeOf(pP->Use.DecId.pTarget);
        iTotalParamSize += pP->Use.DecId.iOffset;
    }

    int iDisplacement = iTotalParamSize;
    for (pP = pParams; pP != NULL; pP = pP->Use.DecId.pBrother) {
        int iThisParamsSize = pP->Use.DecId.iOffset;

        iDisplacement -= pP->Use.DecId.iOffset;
        pP->Use.DecId.iOffset = FRAME_OVERHEAD + iLocalsSize + iDisplacement;

        if (iThisParamsSize == 0) {                               // size of this == 0
            sprintf_s(caString, sizeof(caString), "; # %s%-16s @Y+%-3d",
                        pszIntro, 
                        pP->Use.DecId.pszName,
                        pP->Use.DecId.iOffset);
        }
        else {
            sprintf_s(caString, sizeof(caString), "; # %s%-16s @Y+%-3d size=%d %s",
                        pszIntro,
                        pP->Use.DecId.pszName,
                        pP->Use.DecId.iOffset,
                        iThisParamsSize,
                        DescFullTypeString(0, pP->Use.DecId.pTarget));
        }
        GenAsmOut("", caString, "", NULL, TRUE, FALSE);
        pszIntro = "        : ";

    }
    return iTotalParamSize;
}


// ##########################################################################
// #  Function: CalcLocalSize
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
int GenCalcLocalSize(TPStatement pStatment) {
    int         iReturnValue = 0;
    int         iMax1 = 0;
    int         iMax2 = 0;
    TPStatement pS;
    TPDeclSpec  pParams;


    if (pStatment == NULL) {            // statement was empty (eg "while(x--) ;")
        return 0;
    }

    switch (pStatment->Usage) {
    case    StatementCOMPOUND:
        iReturnValue = 0;           // size of locals here

        pParams = pStatment->Use._compound.pDeclList;
        if (pParams == NULL) {
            ;
        }
        else {
            while (pParams) {
                int iVarSize = CalcSizeOf(pParams->Use.DecId.pTarget);
                iReturnValue += iVarSize;
                pParams = pParams->Use.DecId.pBrother;
            }
        }

        for (pS = pStatment->Use._compound.pStatement; pS != NULL; pS = pS->pNext) {
            iMax1 = GenCalcLocalSize(pS);
            iMax2 = max(iMax1, iMax2);
        }
        return iReturnValue + iMax2;

    case    StatementIF:
        iMax1 = GenCalcLocalSize(pStatment->Use._if.pYes);
        iMax2 = GenCalcLocalSize(pStatment->Use._if.pNo);
        return max(iMax1, iMax2);

    case    StatementWHILE:
        return GenCalcLocalSize(pStatment->Use._while.pAction);

    case    StatementDO:
        return GenCalcLocalSize(pStatment->Use._do.pAction);

    case    StatementFOR:
        return GenCalcLocalSize(pStatment->Use._for.pAction);

    case    StatementRETURN:
    case    StatementEXPR:
    case    StatementBREAK:
    case    StatementCONTINUE:
    case    StatementGOTO:
    case    StatementSWITCH:
    case    StatementCASE:
        return 0;

    default: Error(FATAL, "CalcLocalSize(): unknown statement usage");
    }

    return 0;
}

// ##########################################################################
// #  Function: GenCalcLocalSize
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
int GenLocalVars(FILE *hOut, int iDepth, TPStatement pStatment, int  iLocalsSize) {
    char        caString[256];

    int         iReturnValue = 0;
    int         iMax1 = 0;
    int         iMax2 = 0;
    TPStatement pS;
    TPDeclSpec  pParams;

    if (pStatment == NULL) {            // statement was empty (eg "while(x--) ;")
        return 0;
    }

    switch (pStatment->Usage) {
    case    StatementCOMPOUND:
        iReturnValue = 0;           // size of locals here

        if (iDepth == 0) {
            LPSTR pszIntro = "  Locals: ";
        }
        pParams = pStatment->Use._compound.pDeclList;
        if (pParams == NULL) {
            if (iDepth == 0) {
                LPSTR pszIntro = "  Locals: ";
                sprintf_s(caString, sizeof(caString), "; # %s<none>", pszIntro);
                GenAsmOut("", caString, "", NULL, TRUE, FALSE);
            }
        }
        else {
            LPSTR pszIntro = "  Locals: ";
            while (pParams) {
                int iVarSize = CalcSizeOf(pParams->Use.DecId.pTarget);
                iReturnValue += iVarSize;
                iLocalsSize  -= iVarSize;
                pParams->Use.DecId.iOffset = iLocalsSize+1;

                LPSTR pszT = DescFullTypeString(0, pParams->Use.DecId.pTarget);
                sprintf_s(caString, sizeof(caString), "; # %s%-16s @Y+%-3d size=%d %s",
                        pszIntro,
                        pParams->Use.DecId.pszName,
                        pParams->Use.DecId.iOffset,
                        iVarSize,
                        pszT);
                
                GenAsmOut("", caString, "", NULL, TRUE, FALSE);
                pszIntro = "        : ";
                pParams = pParams->Use.DecId.pBrother;
            }
        }

        for (pS = pStatment->Use._compound.pStatement; pS != NULL; pS = pS->pNext) {
            iMax1 = GenLocalVars(hOut, iDepth++, pS, iLocalsSize);
            iMax2 = max(iMax1, iMax2);
        }
        return iReturnValue + iMax2;

    case    StatementIF:
        iMax1 = GenLocalVars(hOut, iDepth++, pStatment->Use._if.pYes, iLocalsSize);
        iMax2 = GenLocalVars(hOut, iDepth++, pStatment->Use._if.pNo, iLocalsSize);
        return max(iMax1, iMax2);

    case    StatementWHILE:
        return GenLocalVars(hOut, iDepth++, pStatment->Use._while.pAction, iLocalsSize);

    case    StatementDO:
        return GenLocalVars(hOut, iDepth++, pStatment->Use._do.pAction, iLocalsSize);

    case    StatementFOR:
        return GenLocalVars(hOut, iDepth++, pStatment->Use._for.pAction, iLocalsSize);

    case    StatementRETURN:
    case    StatementEXPR:
    case    StatementBREAK:
    case    StatementCONTINUE:
    case    StatementGOTO:
    case    StatementSWITCH:
    case    StatementCASE:
        return 0;

    default: Error(FATAL, "GenCalcLocalSize(): unknown statement usage");
    }

    return 0;
}




// ##########################################################################
// #  Function: GenFunction
// #        *public* <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################

LPSTR DescReturnTypeString(TPDeclSpec pType) {
    static char szReturnTypedescriptor[256];                      // gets rewrirtten each call! Beware
    int n = 0;
    while (pType->Usage == DecPtr) {
        n += sprintf_s(&szReturnTypedescriptor[n], sizeof(szReturnTypedescriptor)-n, "ptr to ");
        pType = pType->Use.DecPtr.pTarget;
    }
    n += sprintf_s(&szReturnTypedescriptor[n], sizeof(szReturnTypedescriptor)-n, DescTypeString(pType->Use.DecSpec.Type));
    return szReturnTypedescriptor;
}

void GenFunction(FILE *hOut, LPSTR pszName, TPDeclSpec pFunc) {
    char        caString[256];
    int         iParamsSize;
    int         iLocalsSize;
    int         iReturnSize;
    LPSTR       szExitLabel = GenLabel("_Exit_");

    ASSERT(pFunc->Usage == DecFunc);



    sprintf_s(caString, sizeof(caString), "; # Function: %s", pszName);
    GenAsmOut("", "; ###########################################", "", NULL, TRUE, FALSE);
    GenAsmOut("", caString,                                        "", NULL, TRUE, FALSE);

    ASSERT((pFunc->Use.DecFunc.pReturnType->Usage == DecSpec) || (pFunc->Use.DecFunc.pReturnType->Usage == DecPtr));
    iReturnSize = CalcSizeOf(pFunc->Use.DecFunc.pReturnType);
    switch (iReturnSize) {
    case 0: sprintf_s(caString, sizeof(caString), "; #   Return: %s", DescReturnTypeString(pFunc->Use.DecFunc.pReturnType)); break;
    case 1: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d)", DescReturnTypeString(pFunc->Use.DecFunc.pReturnType), REG_ACC0); break;
    case 2: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d,r%d)", DescReturnTypeString(pFunc->Use.DecFunc.pReturnType), REG_ACC0, REG_ACC1); break;
    case 4: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d,r%d,r%d,r%d)", DescReturnTypeString(pFunc->Use.DecFunc.pReturnType), REG_ACC0, REG_ACC1, REG_ACC2, REG_ACC3); break;
    default:
        Error(ERRORX, "Function %s. returning more than 4 bytes is not supported", pszName);
        sprintf_s(caString, sizeof(caString), "; # Return: %s - size=%d NOT SUPPORTED", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type), iReturnSize);
    }
    GenAsmOut("", caString, "", NULL, TRUE, FALSE);

    iLocalsSize = GenCalcLocalSize(pFunc->Use.DecFunc.pBody);
    iParamsSize = GenParamVars(hOut, pFunc->Use.DecFunc.pPList, iLocalsSize);
    sprintf_s(caString, sizeof(caString), "; #   CPU   : <return addr>    @Y+%-3d size=2", iLocalsSize+3); GenAsmOut("", caString, "", NULL, TRUE, FALSE);
    sprintf_s(caString, sizeof(caString), "; #         : <saved fptr>     @Y+%-3d size=2", iLocalsSize+1); GenAsmOut("", caString, "", NULL, TRUE, FALSE);
    iLocalsSize = GenLocalVars(hOut, 0, pFunc->Use.DecFunc.pBody, iLocalsSize);
    sprintf_s(caString, sizeof(caString), "; #         : sizeof(locals) = %d", iLocalsSize);
    GenAsmOut("", caString, "", NULL, TRUE, FALSE);
    GenAsmOut("", "; ###########################################", "", NULL, TRUE, FALSE);

    ASSERT(pFunc->Use.DecFunc.pReturnType->Usage == DecSpec);
    WORD bClass = pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Class;
    BOOL fGlobal = ((bClass & ClassSTATIC) != ClassSTATIC);

    if (((bClass & ClassEXTERN) == ClassEXTERN) ||                                  // declared extern or
        (pFunc->Use.DecFunc.pBody == NULL)) {                                       // declared without a body.
        GenAsmOut("", ".extern", pszName, NULL, TRUE, FALSE);                 //
        fprintf(hOut, "\n\n");                                                      //
        return;                                                                     //
    }                                                                               //

   
    if (iParamsSize + iLocalsSize == 0) {
        GenAsmOut(pszName, "; #### no frame needed #####", "", "no parameters or locals", TRUE, fGlobal);
    }
    else {
        GenAsmOut(pszName, "; #### frame setup #########", "", "", TRUE, fGlobal);                // @SP = [<ret addr>]
        GenAsmOut("", "push", "r29", "  2: (YH) preserve Frame", TRUE, FALSE);                    // 
        GenAsmOut("", "push", "r28", "  2: (YL)", TRUE, FALSE);                                   // @SP = [<old FP> <ret addr>]
        GenAsmOut("", "in", "r29, _IO_SPH", "  1: FP <- SP", TRUE, FALSE);                        // Fp+SP. 
        GenAsmOut("", "in", "r28, _IO_SPL", "  1:", TRUE, FALSE);
        if (iLocalsSize != 0) {                                                                         // @SP = [<locals> <old FP> <ret addr>]
             sprintf_s(caString, sizeof(caString), "r28, %d", iLocalsSize);
             GenAsmOut("", "sbiw", caString,       "  2: FP -= sizeof(locals))", TRUE, FALSE);
             GenAsmOut("", "out", "_IO_SPH, r29",  "  1: SP <- FP", TRUE, FALSE);
             GenAsmOut("", "out", "_IO_SPL, r28",  "  1:", TRUE, FALSE);
        }
    }
    GenAsmOut("", "; #### body text ###########", "", "", TRUE, FALSE);

    GenStatements(hOut, 0, pFunc->Use.DecFunc.pBody, pszName, szExitLabel, NULL, NULL);

    GenAsmOut("", "; #### exit ################", "", "", TRUE, FALSE);
    if (iParamsSize + iLocalsSize == 0) {
        GenAsmOut(szExitLabel, "ret", "", " 4: ", TRUE, FALSE);
    }
    else {
        if (iLocalsSize != 0) {                                                                                 // Strip local storage
            sprintf_s(caString, sizeof(caString), "r28, %d", iLocalsSize);                                      // only if we have locals!
            GenAsmOut(szExitLabel, "adiw", caString, "  2: Y += sizeof(locals)", TRUE, FALSE);            //
            szExitLabel[0] = 0;                                                                                 //
        }                                                                                                       //
        GenAsmOut(szExitLabel, "out",  "_IO_SPH, r29", "  1: SP <- Y", TRUE, FALSE);                      // reset SP to end of frame
        GenAsmOut("",          "out",  "_IO_SPL, r28", "  1:",         TRUE, FALSE);                      //
        GenAsmOut("",          "pop",  "r28",          "  2: FP <- preserved Frame", TRUE, FALSE);        // recover the preserved frame
        GenAsmOut("",          "pop",  "r29",          "  2: ",        TRUE, FALSE);                      //
        GenAsmOut("",          "ret",  "",             "  4: ",        TRUE, FALSE);                      // bact to caller.
    }
    GenAsmOut("", "\n", "\n", NULL, TRUE, FALSE);
}


// ##########################################################################
// #  Function: GenText
// #        *public* <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenText(TPDeclSpec pDeclList) {
    //char szOperand[32];
    TPDeclSpec pDecl;

    GenAsmOut(NULL, NULL, NULL, "#########################", TRUE, FALSE);
    //GenAsmOut(NULL, NULL, NULL, "# Start of BSS segment #", TRUE, FALSE);
    GenAsmOut(NULL, ASM_DIRECTIVE_SEGMENT_BEGIN_TEXT, "", "# Start of TEXT segment #", TRUE, FALSE);
    GenAsmOut(NULL, "", "", "#########################", TRUE, FALSE);

    GenAsmOut("", "", "", "Here starts the executable code", TRUE, FALSE);
    fprintf(hGlbOut, "\n\n");
    for (pDecl = pDeclList; pDecl; pDecl = pDecl->pChain) {
        if ((pDecl->Usage == DecId) &&
            GenIsFunction(pDecl->Use.DecId.pTarget->Usage)) {

            TPDeclSpec pF = pDecl->Use.DecId.pTarget;
            ASSERT(pF->Usage == DecFunc);
            GenFunction(hGlbOut, pDecl->Use.DecId.pszName, pDecl->Use.DecId.pTarget);

        }
    }
    GenAsmOut(NULL, ASM_DIRECTIVE_SEGMENT_END, NULL, "=== End of TEXT segment ===\n\n", TRUE, FALSE);

}


/* eof */

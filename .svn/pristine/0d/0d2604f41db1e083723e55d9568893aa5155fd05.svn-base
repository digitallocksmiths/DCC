/* *************** */
/* Type structures */
/* *************** */

typedef enum {      uConst,  uVar,    uUnary,  uBinary,uTernary,
                    uCast,   uAssign, uInit,   uArrow, uDot,
                    uArray,  uFunc
             } ExprUsage;

typedef enum {      Minus,  Plus,   Neg,    PostInc,PreInc,
                    PostDec,PreDec, SizeOf, Addr,   Ptr,
                    Not
             } ExprUnOp;

typedef enum {      Add,    Sub,    Mul,    Div,    Mod,
                    BAnd,   BOr,    BXor,   CEQ,    CNE,
                    CLT,    CLE,    CGT,    CGE,    LAnd,
                    LOr,    BSR,    BSL
             } ExprBiOp;

typedef enum {      CondExp
             } ExprTriOp;

typedef enum {      AsNop,  AsAdd,  AsSub,  AsMul,  AsDiv,
                    AsMod,  AsBAnd, AsBOr,  AsBXor, AsSR,
                    AsSL
             } ExprAssign;

typedef struct TagExprNode ExprNode;
typedef ExprNode FAR *LpExprNode;
struct TagExprNode {
    ExprUsage       Usage;
    LpDeclSpec      Type;
    union {
        struct {
            LONG        Integer;
        } Const;
        struct {
            LPSTR       Identifier;
        } Var;
        struct {
            WORD        Op;
            LpExprNode  Operand;
        } Unary;
        struct {
            WORD        Op;
            LpExprNode  Left;
            LpExprNode  Right;
        } Binary;
        struct {
            WORD        Op;
            LpExprNode  First;
            LpExprNode  Second;
            LpExprNode  Third;
        } Ternary;
        struct {
            WORD        Op;
            LpExprNode  Lval;
            LpExprNode  Rval;
        } Assign;
        struct {
            LpExprNode  pTarget;
        } Cast;
        struct {
            LpExprNode  Assignment;
            LpExprNode  Sibling;
            LpExprNode  Children;
        } Init;
        struct {
            LpExprNode  Record;
            LPSTR       Field;
        } Arrow;
        struct {
            LpExprNode  Record;
            LPSTR       Field;
        } Dot;
        struct {
            LpExprNode  Vector;
            LpExprNode  Index;
        } Array;
        struct {
            LpExprNode  Func;
            LpExprNode  Params;
        } Func;
    } Use;
 };

LpExprNode  MakeExprConstC( LONG   Value);
LpExprNode  MakeExprConstI( LONG   Value);
LpExprNode  MakeExprConstF( DOUBLE Value);
LpExprNode  MakeExprConstS( LPSTR  Value);
LpExprNode  MakeExprVar(    LPSTR  Var);
LpExprNode  MakeUnaryNode(  WORD   Op, LpExprNode Node);
LpExprNode  MakeBinaryNode( WORD   Op, LpExprNode Left,  LpExprNode Right);
LpExprNode  MakeTernaryNode(WORD   Op, LpExprNode First, LpExprNode Second, LpExprNode Third);
LpExprNode  MakeArrowNode(  LpExprNode Left,  LPSTR Field);
LpExprNode  MakeDotNode(    LpExprNode Left,  LPSTR Field);
LpExprNode  MakeArrayNode(  LpExprNode Vec,   LpExprNode Ind);
LpExprNode  MakeFuncNode(   LpExprNode Fn,    LpExprNode Params);
LpExprNode  MakeAssignNode( WORD   Op, LpExprNode Lval,  LpExprNode Rval);
LpExprNode  MakeCastNode(   LpDeclSpec Type,  LpExprNode Node);

LpExprNode  MakeInitNode(LpExprNode Node);
LpExprNode  MakeInitList(LpExprNode Node);
LpExprNode  MakeInitConcat(LpExprNode Node,  LpExprNode Brother);
void        PrintInit(LpExprNode n);

DWORD       ConstInt(LpExprNode E);
//DOUBLE      ConstFloat(LpExprNode E);
LPSTR       ConstString(LpExprNode E);

void        CleanUp(LpExprNode n);
#ifdef _DEBUG
void        ParseExpr(LpExprNode n,int depth);
#endif // _DEBUG

/* eof */


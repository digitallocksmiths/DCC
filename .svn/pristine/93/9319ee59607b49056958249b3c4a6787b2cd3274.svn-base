; SKC AVR Output - V1(Jan  2 2020)

#define		_IO_SPL	0x3D
#define		_IO_SPH	0x3E

                                                            ; ##########################
                                                            ; # Start of CONST segment #
                     .section    CONST, "a"                 ; ##########################
                     ;.endseg                               ; === End of CONST segment ===


                                                            ; #########################
                                                            ; # Start of INIT segment #
                     .section    INIT,  "a"                 ; #########################
                                                            ; This is the source of the initialization data
                                                            ; #########################
                     .section    .data                      ; # Start of DATA segment #
                                                            ; #########################
                                                            ; This is where the initialization data will be copied to
                     ;.endseg                               ; === End of DATA segment ===


                                                            ; ########################
                     .section    .bss                       ; # Start of BSS segment #
                                                            ; ########################
                                                            ; Here starts the uninitialized data
                     ;.endseg                               ; === End of BSS segment ===


                                                            ; #########################
                     .section    .text                      ; # Start of TEXT segment #
                                                            ; #########################
                                                            ; Here starts the executable code

                     .global   Unary
Unary:               ; ###########################################
                     ; # Function: Unary                    
                     ; #   Return: void                     
                     ; #   Params: <none>                   
                     ; #   CPU   : @Y+12, Return Address    
                     ; #         : @Y+10, Preserved Frame Pointer
                     ; #   Locals: @Y+9  , c  size=1 char   
                     ; #         : @Y+5  , l  size=4 long   
                     ; #         : @Y+3  , x  size=2 pointer to 
                     ; #         : @Y+1  , y  size=2 pointer to 
                     ; #         : sizeof(locals) = 9       
                     ; ###########################################
                     ; #### frame setup #########           ; 
                     push      r29                          ;   2: (YH) preserve Frame
                     push      r28                          ;   2: (YL)
                     in        r29, _IO_SPH                 ;   1: FP <- SP
                     in        r28, _IO_SPL                 ;   1:
                     ; #### alloc locals ########           ; 
                     sbiw      r28, 9                       ;   2: FP -= sizeof(locals))
                     out       _IO_SPH, r29                 ;   1: SP <- FP
                     out       _IO_SPL, r28                 ;   1:
                     ; #### body text ###########           ; 
                     ; ==== Compound Statement ============ ; L_compound_Id_000001
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0x00                    ;   1: const 0
                     mov       r4, r26                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+9                      ;   2: c
                     ldi       r26, 0xff                    ;   1: const 255
                     mov       r5, r26                      ;   1:
                     Or        r4, r5                       ;   1: Or8
                     tst       r4                           ;   1: Invert Flag   r = !r
                     breq      L_NotOut_000002              ;   1: 
                     ser       r4                           ;   1: 
L_NotOut_000002:     inc       r4                           ;   1: 
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+9                      ;   2: c
                     ldi       r26, 0x00                    ;   1: const 0
                     mov       r5, r26                      ;   1:
                     clr       r0                           ;   1: Mul 8
L_MulMult_000004:    sbrc      r4, 0x00                     ; 1/3:
                     add       r0, r5                       ;   1:
                     lsl       r5                           ;   1:
                     breq      L_MulDone_000005             ; 1/2:
                     lsr       r4                           ;   1:
                     brne      L_MulMult_000004             ; 1/2:
L_MulDone_000005:    mov       r4, r0                       ;   1:
                     tst       r4                           ;   1: Invert Flag   r = !r
                     breq      L_NotOut_000003              ;   1: 
                     ser       r4                           ;   1: 
L_NotOut_000003:     inc       r4                           ;   1: 
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0xff                    ;   1: const 255
                     mov       r4, r26                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+9                      ;   2: c
                     ldi       r26, 0xff                    ;   1: const 255
                     mov       r5, r26                      ;   1:
                     Or        r4, r5                       ;   1: Or8
                     neg       r4                           ;   1: Negate8    r = -r
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0x01                    ;   1: const 1
                     mov       r4, r26                      ;   1:
                     ldd       r5, Y+9                      ;   2: c
                     ldi       r26, 0x00                    ;   1: const 0
                     mov       r6, r26                      ;   1:
                     clr       r0                           ;   1: Mul 8
L_MulMult_000006:    sbrc      r5, 0x00                     ; 1/3:
                     add       r0, r6                       ;   1:
                     lsl       r6                           ;   1:
                     breq      L_MulDone_000007             ; 1/2:
                     lsr       r5                           ;   1:
                     brne      L_MulMult_000006             ; 1/2:
L_MulDone_000007:    mov       r5, r0                       ;   1:
                     add       r4, r5                       ;   1: Add8
                     neg       r4                           ;   1: Negate8    r = -r
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0x01                    ;   1: const 1
                     mov       r4, r26                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+9                      ;   2: c
                     ldi       r26, 0xff                    ;   1: const 255
                     mov       r5, r26                      ;   1:
                     Or        r4, r5                       ;   1: Or8
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0x01                    ;   1: const 1
                     mov       r4, r26                      ;   1:
                     ldd       r5, Y+9                      ;   2: c
                     ldi       r26, 0x00                    ;   1: const 0
                     mov       r6, r26                      ;   1:
                     clr       r0                           ;   1: Mul 8
L_MulMult_000008:    sbrc      r5, 0x00                     ; 1/3:
                     add       r0, r6                       ;   1:
                     lsl       r6                           ;   1:
                     breq      L_MulDone_000009             ; 1/2:
                     lsr       r5                           ;   1:
                     brne      L_MulMult_000008             ; 1/2:
L_MulDone_000009:    mov       r5, r0                       ;   1:
                     add       r4, r5                       ;   1: Add8
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0xaa                    ;   1: const 170
                     mov       r4, r26                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+9                      ;   2: c
                     ldi       r26, 0xff                    ;   1: const 255
                     mov       r5, r26                      ;   1:
                     Or        r4, r5                       ;   1: Or8
                     com       r4                           ;   1: Compliment8    r = ~r
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0xaa                    ;   1: const 170
                     mov       r4, r26                      ;   1:
                     ldd       r5, Y+9                      ;   2: c
                     ldi       r26, 0x00                    ;   1: const 0
                     mov       r6, r26                      ;   1:
                     clr       r0                           ;   1: Mul 8
L_MulMult_000010:    sbrc      r5, 0x00                     ; 1/3:
                     add       r0, r6                       ;   1:
                     lsl       r6                           ;   1:
                     breq      L_MulDone_000011             ; 1/2:
                     lsr       r5                           ;   1:
                     brne      L_MulMult_000010             ; 1/2:
L_MulDone_000011:    mov       r5, r0                       ;   1:
                     add       r4, r5                       ;   1: Add8
                     com       r4                           ;   1: Compliment8    r = ~r
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0xaa                    ;   1: const 170
                     ldi       r27, 0x00                    ;   1:
                     movw      r4, r26                      ;   1:
                     ldi       r26, 0x00                    ;   1:
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     ldd       r8, Y+5                      ;   2: l
                     ldd       r9, Y+6                      ;   2:
                     ldd       r10, Y+7                     ;   2:
                     ldd       r11, Y+8                     ;   2:
                     ldi       r26, 0x00                    ;   1: const 0
                     ldi       r27, 0x00                    ;   1:
                     movw      r12, r26                     ;   1:
                     ldi       r26, 0x00                    ;   1:
                     ldi       r27, 0x00                    ;   1:
                     movw      r14, r26                     ;   1:
                     mov       r20, r8                      ;   1: Mul 32
                     mov       r21, r9                      ;   1:
                     mov       r22, r10                     ;   1:
                     mov       r23, r11                     ;   1:
                     mov       r24, r12                     ;   1:
                     mov       r25, r13                     ;   1:
                     mov       r26, r14                     ;   1:
                     mov       r27, r15                     ;   1:
                     rcall     SysMul32                     ;  +3:
                     mov       r8, r0                       ;   1:
                     mov       r9, r1                       ;   1:
                     mov       r10, r2                      ;   1:
                     mov       r11, r3                      ;   1:
                     add       r4, r8                       ;   1: Add32
                     adc       r5, r9                       ;   1:
                     adc       r6, r10                      ;   1:
                     adc       r7, r11                      ;   1:
                     com       r4                           ;   1: Compliment32   r = ~r
                     com       r5                           ;   1:
                     com       r6                           ;   1:
                     com       r7                           ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r26, 0xfe                    ;   1: const -2
                     ldi       r27, 0xff                    ;   1:
                     movw      r4, r26                      ;   1:
                     ldi       r26, 0xff                    ;   1:
                     ldi       r27, 0xff                    ;   1:
                     movw      r6, r26                      ;   1:
                     ldd       r8, Y+5                      ;   2: l
                     ldd       r9, Y+6                      ;   2:
                     ldd       r10, Y+7                     ;   2:
                     ldd       r11, Y+8                     ;   2:
                     ldi       r26, 0x00                    ;   1: const 0
                     ldi       r27, 0x00                    ;   1:
                     movw      r12, r26                     ;   1:
                     ldi       r26, 0x00                    ;   1:
                     ldi       r27, 0x00                    ;   1:
                     movw      r14, r26                     ;   1:
                     mov       r20, r8                      ;   1: Mul 32
                     mov       r21, r9                      ;   1:
                     mov       r22, r10                     ;   1:
                     mov       r23, r11                     ;   1:
                     mov       r24, r12                     ;   1:
                     mov       r25, r13                     ;   1:
                     mov       r26, r14                     ;   1:
                     mov       r27, r15                     ;   1:
                     rcall     SysMul32                     ;  +3:
                     mov       r8, r0                       ;   1:
                     mov       r9, r1                       ;   1:
                     mov       r10, r2                      ;   1:
                     mov       r11, r3                      ;   1:
                     add       r4, r8                       ;   1: Add32
                     adc       r5, r9                       ;   1:
                     adc       r6, r10                      ;   1:
                     adc       r7, r11                      ;   1:
                     com       r4                           ;   1: Compliment32   r = ~r
                     com       r5                           ;   1:
                     com       r6                           ;   1:
                     com       r7                           ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = c
                     adiw      r30, 0x00                    ; 
                     movw      r4, r30                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = l
                     adiw      r30, 0xfc                    ; 
                     movw      r4, r30                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = c
                     adiw      r30, 0x00                    ; 
                     movw      r4, r30                      ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: source is in RAM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = l
                     adiw      r30, 0xfc                    ; 
                     movw      r4, r30                      ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: source is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+3                      ;   2: x
                     ldd       r5, Y+4                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+1                      ;   2: y
                     ldd       r5, Y+2                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+3                      ;   2: x
                     ldd       r5, Y+4                      ;   2:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: source is in RAM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+1                      ;   2: y
                     ldd       r5, Y+2                      ;   2:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: source is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ;      Expr end ------------           
                     ;      Compound End --------           ; L_compound_Id_000001
                     ; #### exit ################           ; 
L_Exit_000000:       adiw      r28, 9                       ;   2: Y += sizeof(locals)
                     out       _IO_SPH, r29                 ;   1: SP <- Y
                     out       _IO_SPL, r28                 ;   1:
                     pop       r28                          ;   2: FP <- preserved Frame
                     pop       r29                          ;   2: 
                     ret                                    ;   4: 
                     
         
                            
                     ;.endseg                               ; === End of TEXT segment ===



                     .end                                   ; End of generated code.

; eof

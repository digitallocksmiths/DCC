// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <Windows.h>

#include "Utilities\Console.h"

//#include "lex.h"
#include "typectrl.h"
//#include "expr.h"
#include "Gen.h"
#include "Statements.h"
#include "main.h"
#include "ExprOptimize.h"


#ifdef _DEBUG


void    GenStatementPrettyPrint(int iDepth, TPStatement pStat, BOOL fNext) {
    
    if (pStat == NULL) {
        return;
    }
    do {
        ConsoleIndent(iDepth);
        if (pStat->pszLabel) {
            printf("%s: ", pStat->pszLabel);
        }
        switch (pStat->Usage) {
        case    StatementCOMPOUND:
            printf("COMPOUND {\n");
            GenStatementPrettyPrint(iDepth + 1, pStat->Use._compound.pStatement, TRUE);
            ConsoleIndent(iDepth); printf("COMPOUND_END }\n");
            break;

        case    StatementRETURN:
            printf("RETURN %s\n", (pStat->Use._return.pExpr) ? "something" : "void");
            break;

        case    StatementIF:
            printf("IF (%s) THEN\n", (pStat->Use._if.pCond) ? "something" : "void");
            GenStatementPrettyPrint(iDepth + 1, pStat->Use._if.pYes, TRUE);
            if (pStat->Use._if.pNo) {
                ConsoleIndent(iDepth); printf("ELSE\n");
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._if.pNo, TRUE);
            }
            ConsoleIndent(iDepth); printf("IF_END\n");
            break;

        case    StatementWHILE:
            printf("WHILE (%s) DO\n", (pStat->Use._while.pCond) ? "something" : "void");
            if (pStat->Use._while.pAction) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._while.pAction, TRUE);
            }
            ConsoleIndent(iDepth); printf("WHILE_END\n");
            break;

        case    StatementDO:
            printf("DO\n");
            if (pStat->Use._do.pAction) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._do.pAction, TRUE);
            }
            ConsoleIndent(iDepth+1); printf("while condition (%s)\n", (pStat->Use._do.pCond) ? "something" : "void");
            ConsoleIndent(iDepth); printf("DO_END\n");
            break;

        case    StatementFOR:
            printf("FOR\n");
            ConsoleIndent(iDepth + 1); printf("Init      (%s)\n", (pStat->Use._for.pInit)   ? "something" : "void");
            ConsoleIndent(iDepth + 1); printf("Condition (%s)\n", (pStat->Use._for.pCond)   ? "something" : "void");
            if (pStat->Use._for.pAction) {
                GenStatementPrettyPrint(iDepth + 2, pStat->Use._for.pAction, TRUE);
            }
            ConsoleIndent(iDepth + 1); printf("Repeat    (%s)\n", (pStat->Use._for.pRepeat) ? "something" : "void");

            ConsoleIndent(iDepth); printf("FOR_END\n");
            break;

        case    StatementEXPR:
            printf("EXPRESSION (%s)\n", (pStat->Use._expr.pExpr) ? "something" : "void");
            //GenExpressionPrettyPrint(iDepth + 1, pStat->Use._expr.pExpr);
            pStat->Use._expr.pExpr  = ExprOptimize(pStat->Use._expr.pExpr);

            break;

        case    StatementBREAK:
            printf("BREAK\n");
            break;

        case    StatementCONTINUE:
            printf("CONTINUE\n");
            break;

        case    StatementGOTO:
            printf("GOTO '%s'\n", pStat->Use._goto.pszLabel);
            break;

        case    StatementSWITCH:
            printf("SWITCH (%s)\n", (pStat->Use._switch.pExpr) ? "something" : "void");
            if (pStat->Use._switch.pBody) {
                GenStatementPrettyPrint(iDepth + 1, pStat->Use._switch.pBody, TRUE);
            }
            ConsoleIndent(iDepth); printf("SWITCH_END\n");
            break;

        case    StatementCASE:
            printf("CASE '%s'\n", (pStat->Use._case.pExpr) ? "something" : "void");
            break;

        default: Error(FATAL, "StatementPrint(): unknown statement usage");
        }
        pStat = pStat->pNext;
    } while (fNext && pStat);
}
#endif // _DEBUG




int GenCalcParamSize(FILE *hOut, TPDeclSpec  pParams) {
    char        caString[256];
    int         iParamsSize;

    iParamsSize = 0;

    ASSERT(pParams->Use.DecId.pTarget->Usage == DecSpec);
    if ((pParams->Use.DecId.pTarget->Use.DecSpec.Type & TypeVOID) == TypeVOID) {
        GenAsmOut(hOut, "", "; #   Params: <none>", "", NULL, TRUE, FALSE);
        return iParamsSize;
    }

    LPSTR       pszIntro = "  Params: ";
    TPDeclSpec  pP;
    int         iParamCounts;
    for (pP = pParams, iParamCounts = 0; pP != NULL; pP = pP->Use.DecId.pBrother, iParamCounts++);
    while (iParamCounts--) {
        int i;
        for (pP = pParams, i = 0; i < iParamCounts; pP = pP->Use.DecId.pBrother, i++); 

        ASSERT(pP->Use.DecId.pTarget->Usage == DecSpec);
        int iThisParamsSize = CalcSizeOf(pP->Use.DecId.pTarget);
        iParamsSize += iThisParamsSize;
        sprintf_s(caString, sizeof(caString), "; # %s@Y%c%-3d, %s  size=%d %s",
            pszIntro,
            (pP->Use.DecId.iOffset >= 0) ? '+' : '-',
            abs(pP->Use.DecId.iOffset),
            pP->Use.DecId.pszName,
            iThisParamsSize,
            DescTypeString(pP->Use.DecId.pTarget->Use.DecSpec.Type));
        GenAsmOut(hOut, "", caString, "", NULL, TRUE, FALSE);
        pszIntro = "        : ";
    }

    return iParamsSize;
}


int GenCalcLocalSize(FILE *hOut, TPStatement pStatment) {
    char        caString[256];

    int         iReturnValue = 0;
    int         iMax1 = 0;
    int         iMax2 = 0;
    TPStatement pS;
    TPDeclSpec  pParams;


    if (pStatment == NULL) {
        Error(FATAL, "WTF");
        return 0;
    }

    switch (pStatment->Usage) {
    case    StatementCOMPOUND:
        iReturnValue = 0;           // size of locals here

        LPSTR pszIntro = "  Locals: ";
        pParams = pStatment->Use._compound.pDeclList;
        if (pParams == NULL) {
            sprintf_s(caString, sizeof(caString), "; # %s<none>", pszIntro);
            GenAsmOut(hOut, "", caString, "", NULL, TRUE, FALSE);
        }
        else {
            while (pParams) {
                int iVarSize = CalcSizeOf(pParams->Use.DecId.pTarget);
                iReturnValue += iVarSize;
                ASSERT(pParams->Use.DecId.pTarget->Usage == DecSpec);
                sprintf_s(caString, sizeof(caString), "; # %s@Y%c%-3d, %s  size=%d %s",
                    pszIntro,
                    (pParams->Use.DecId.iOffset >= 0) ? '+' : '-',
                    abs(pParams->Use.DecId.iOffset),
                    pParams->Use.DecId.pszName,
                    iVarSize,
                    DescTypeString(pParams->Use.DecId.pTarget->Use.DecSpec.Type));
                GenAsmOut(hOut, "", caString, "", NULL, TRUE, FALSE);

                pszIntro = "        : ";
                pParams = pParams->Use.DecId.pBrother;
            }
        }

        for (pS = pStatment->Use._compound.pStatement; pS != NULL; pS = pS->pNext) {
            iMax1 = GenCalcLocalSize(hOut, pS);
            iMax2 = max(iMax1, iMax2);
        }
        return iReturnValue + iMax2;

    case    StatementIF:
        iMax1 = GenCalcLocalSize(hOut, pStatment->Use._if.pYes);
        iMax2 = GenCalcLocalSize(hOut, pStatment->Use._if.pNo);
        return max(iMax1, iMax2);

    case    StatementWHILE:
        return GenCalcLocalSize(hOut, pStatment->Use._while.pAction);

    case    StatementDO:
        return GenCalcLocalSize(hOut, pStatment->Use._do.pAction);

    case    StatementFOR:
        return GenCalcLocalSize(hOut, pStatment->Use._for.pAction);

    case    StatementRETURN:
    case    StatementEXPR:
    case    StatementBREAK:
    case    StatementCONTINUE:
    case    StatementGOTO:
    case    StatementSWITCH:
    case    StatementCASE:
        return 0;

    default: Error(FATAL, "GenCalcLocalSize(): unknown statement usage");
    }

    return 0;
}

// ##########################################################################
// #  Function: GenFunction
// #        *public* <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenFunction(FILE *hOut, LPSTR pszName, TPDeclSpec pFunc) {
    char        caString[256];
    int         iParamsSize;
    int         iLocalsSize;
    int         iReturnSize;
    LPSTR       szExitLabel = GenLabel("_Exit_");

    ASSERT(pFunc->Usage == DecFunc);
    sprintf_s(caString, sizeof(caString), "; # Function: %s", pszName);
    GenAsmOut(hOut, pszName, "; ###########################################", "", NULL, TRUE, TRUE);
    GenAsmOut(hOut, "",      caString,                                        "", NULL, TRUE, FALSE);

    ASSERT(pFunc->Use.DecFunc.pReturnType->Usage == DecSpec);
    iReturnSize = CalcSizeOf(pFunc->Use.DecFunc.pReturnType);
    switch (iReturnSize) {
    case 0: sprintf_s(caString, sizeof(caString), "; #   Return: %s", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type)); break;
    case 1: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d)", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type), EXP_REG_BASE); break;
    case 2: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d,r%d)", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type), EXP_REG_BASE, EXP_REG_BASE + 1); break;
    case 4: sprintf_s(caString, sizeof(caString), "; #   Return: %s (r%d,r%d,r%d,r%d)", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type), EXP_REG_BASE, EXP_REG_BASE + 1, EXP_REG_BASE + 2, EXP_REG_BASE + 3); break;
    default:
        Error(ERRORX, "Function %s. returning more than 4 bytes is not supported", pszName);
        sprintf_s(caString, sizeof(caString), "; # Return: %s - size=%d NOT SUPPORTED", DescTypeString(pFunc->Use.DecFunc.pReturnType->Use.DecSpec.Type), iReturnSize);
    }
    GenAsmOut(hOut, "", caString, "", NULL, TRUE, FALSE);

    iParamsSize = GenCalcParamSize(hOut, pFunc->Use.DecFunc.pPList);
    iLocalsSize = GenCalcLocalSize(hOut, pFunc->Use.DecFunc.pBody);

    sprintf_s(caString, sizeof(caString), "; #         : sizeof(locals) = %d", iLocalsSize);
    GenAsmOut(hOut, "", caString, "", NULL, TRUE, FALSE);
    GenAsmOut(hOut, "", "; ###########################################", "", NULL, TRUE, FALSE);

    
    if (iParamsSize + iLocalsSize == 0) {
        GenAsmOut(hOut, "", "; ---- no frame needed -----", "", "no parameters or locals", TRUE, FALSE);
    }
    else {
        GenAsmOut(hOut, "", "; ---- frame setup ---------", "", "", TRUE, FALSE);
        GenAsmOut(hOut, "", "push", "r29", " 2: (YH) preserve Frame", TRUE, FALSE);
        GenAsmOut(hOut, "", "push", "r28", " 2: (YL)", TRUE, FALSE);
        GenAsmOut(hOut, "", "in", "r29, _IO_SPH", " 1: FP <- SP", TRUE, FALSE);
        GenAsmOut(hOut, "", "in", "r28, _IO_SPL", " 1:", TRUE, FALSE);
#pragma message("    GenFunction: iLocalsSize<? use dummy pushes to make local's space")

        if (iLocalsSize != 0) {
            GenAsmOut(hOut, "", "; ---- alloc locals --------", "", "", TRUE, FALSE);
            GenAsmOut(hOut, "", "movw", "r26, r28", " 1: X <- FP (equ SP)", TRUE, FALSE);
            sprintf_s(caString, sizeof(caString), "r26, %d", iLocalsSize);
            GenAsmOut(hOut, "", "sbiw", caString, " 2: X -= sizeof(locals)", TRUE, FALSE);
            GenAsmOut(hOut, "", "out", "_IO_SPH, r27", " 1: SP <- X", TRUE, FALSE);
            GenAsmOut(hOut, "", "out", "_IO_SPL, r26", " 1:", TRUE, FALSE);
        }
    }
    GenAsmOut(hOut, "", "; ---- body text -----------", "", "", TRUE, FALSE);


    GenAsmOut(hOut, "", "; ---- exit ----------------", "", "", TRUE, FALSE);
    if (iParamsSize + iLocalsSize == 0) {
        GenAsmOut(hOut, szExitLabel, "ret", "", " 4: ", TRUE, FALSE);
    }
    else {
        GenAsmOut(hOut, szExitLabel, "out", "_IO_SPH, r29", " 1: SP <- FP", TRUE, FALSE);
        GenAsmOut(hOut, "", "out", "_IO_SPL, r28", " 1:", TRUE, FALSE);
        GenAsmOut(hOut, "", "pop", "r28", " 2: FP <- preserved Frame", TRUE, FALSE);
        GenAsmOut(hOut, "", "pop", "r29", " 2: ", TRUE, FALSE);
        GenAsmOut(hOut, "", "ret", "", " 4: ", TRUE, FALSE);
    }
    GenAsmOut(hOut, "", "\n", "\n", NULL, TRUE, FALSE);
}


// ##########################################################################
// #  Function: GenText
// #        *public* <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void GenText(FILE *hOut, TPDeclSpec pDeclList) {
    //char szOperand[32];
    TPDeclSpec pDecl;

    GenAsmOut(hOut, NULL, NULL, NULL, "#########################", TRUE, FALSE);
    //GenAsmOut(hOut, NULL, NULL, NULL, "# Start of BSS segment #", TRUE, FALSE);
    GenAsmOut(hOut, NULL, ASM_DIRECTIVE_SEGMENT_BEGIN_TEXT, "", "# Start of TEXT segment #", TRUE, FALSE);
    GenAsmOut(hOut, NULL, "", "", "#########################", TRUE, FALSE);

    GenAsmOut(hOut, "", "", "", "Here starts the executable code", TRUE, FALSE);
    for (pDecl = pDeclList; pDecl; pDecl = pDecl->pChain) {
        if ((pDecl->Usage == DecId) &&
            GenIsFunction(pDecl->Use.DecId.pTarget->Usage)) {

            TPDeclSpec pF = pDecl->Use.DecId.pTarget;
            ASSERT(pF->Usage == DecFunc);
            GenFunction(hOut, pDecl->Use.DecId.pszName, pDecl->Use.DecId.pTarget);

        }
    }
    GenAsmOut(hOut, NULL, ASM_DIRECTIVE_SEGMENT_END, NULL, "=== End of BSS segment ===\n\n", TRUE, FALSE);

}


/* eof */

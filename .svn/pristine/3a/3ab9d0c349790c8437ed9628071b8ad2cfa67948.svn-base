// # $URL$
// # $Revision$


#ifndef __SKC_EXPRESSIONS_H__
#define __SKC_EXPRESSIONS_H__

#ifdef DEBUG_INCLUDE_FILES 
#pragma message("     including " __FILE__)
#endif // DEBUG_INCLUDE_FILES


/* *************** */
/* Type structures */
/* *************** */

typedef enum {      uConst,  uVar,    uUnary,  uBinary,uTernary,
                    uCast,
                    uAssign, uInit,   uArrow, uDot,
                    uArray,  uFunc
             } ExprUsage;

typedef enum {      unMinus,  unPlus,   unNeg,    unPostInc,unPreInc,
                    unPostDec,unPreDec, unSizeOf, unAddr,   unPtr,
                    unNot
             } TIdExprUnOp;

typedef enum {      binAdd,    binSub,    binMul,    binDiv,    binMod,
                    binAnd,    binOr,     binXor,    binCEQ,    binCNE,
                    binCLT,    binCLE,    binCGT,    binCGE,    binLAnd,
                    binLOr,    binShr,    binShl
             } TIdExprBiOp;

typedef enum {
    Cast_c2s, Cast_c2l, Cast_s2l, Cast_b2s, Cast_b2l, Cast_u2l, Cast_l2s, Cast_l2b, Cast_l2f, Cast_s2b, Cast_s2f
} TCast;

typedef enum {      CondExp
             } TIdExprTriOp;

//typedef enum {      AsNop,  AsAdd,  AsSub,  AsMul,  AsDiv,
//                    AsMod,  AsBAnd, AsBOr,  AsBXor, AsSR,
//                    AsSL
//             } TIdExprAssign;

typedef struct TagExprNode TExprNode;
typedef TExprNode  * TPExprNode;
struct TagExprNode {
    ExprUsage       Usage;
    TPDeclSpec      pType;
    TPExprNode      pSibling;
    union {
        struct {
            LONG        lInteger;
        } Const;
        struct {
            LPSTR       pszIdentifier;
            int        iFrameOffset;
        } Var;
        struct {
            TIdExprUnOp Op;
            TPExprNode  pOperand;
        } Unary;
        struct {
            TIdExprBiOp Op;
            TPExprNode  pLeft;
            TPExprNode  pRight;
        } Binary;
        struct {
            WORD        Op;
            TPExprNode  First;
            TPExprNode  Second;
            TPExprNode  Third;
        } Ternary;
        struct {
            //WORD        Op;
            TPExprNode  pLval;
            TPExprNode  pRval;
        } Assign;
        struct {
            TCast       Op;
            TPExprNode  pTarget;
        } Cast;
        struct {
            TPExprNode  pAssignment;
            TPExprNode  pChildren;
        } Init;
        struct {
            TPExprNode  pRecord;
            LPSTR       pszField;       // field name
            int         iOffset;        // field offset
        } Arrow;
        struct {
            TPExprNode  pRecord;
            LPSTR       pszField;       // field name
            int         iOffset;        // field offset
        } Dot;
        struct {
            TPExprNode  pVector;
            TPExprNode  pIndex;
        } Array;
        struct {
            TPExprNode  pFunc;
            TPExprNode  pParams;
        } pFunc;
    } Use;
 };


#define IsStruct(n)    (((n)->Usage == DecSpec) &&  ((n)->Use.DecSpec.Type & TypeSTRUCT))
#define IsSimple(n)    (((n)->Usage == DecSpec) && !((n)->Use.DecSpec.Type & TypeSTRUCT))
#define IsUnsigned(n)  (((n)->Usage == DecSpec) &&  ((n)->Use.DecSpec.Type & TypeUNSIGNED))
#define IsSigned(n)    (((n)->Usage == DecSpec) && !((n)->Use.DecSpec.Type & TypeUNSIGNED))
#define IsPointer(n)    ((n)->Usage == DecPtr)
#define IsArray(n)      ((n)->Usage == DecArray)
#define IsFunc(n)       ((n)->Usage == DecFunc)
#define IsReference(n)  (IsPointer(n) || IsArray(n))
#define IsPtrStruct(n)  (IsPointer(n) && IsStruct((n)->Use.DecPtr.pTarget))


LONG        ExprTypeConvert(TPDeclSpec NewType, TPDeclSpec OldType, LONG Const);

TPExprNode  ExprMakeConstC( LONG   Value);
TPExprNode  ExprMakeConstI(LONG   Value);
TPExprNode  ExprMakeConstF( DOUBLE Value);
TPExprNode  ExprMakeConstS( LPSTR  Value);
TPExprNode  ExprMakeVar(    LPSTR  Var);
TPExprNode  ExprMakeUnaryNode(  TIdExprUnOp  Op, TPExprNode Node);
TPExprNode  ExprMakeBinaryNode( TIdExprBiOp  Op, TPExprNode Left,  TPExprNode Right);
TPExprNode  ExprMakeTernaryNode(TIdExprTriOp Op, TPExprNode First, TPExprNode Second, TPExprNode Third);
TPExprNode  ExprMakeArrowNode(  TPExprNode   Left,  LPSTR Field);
TPExprNode  ExprMakeDotNode(    TPExprNode   Left,  LPSTR Field);
TPExprNode  ExprMakeArrayNode(  TPExprNode   Vec,   TPExprNode Ind);
TPExprNode  ExprMakeFuncNode(   TPExprNode   Fn,    TPExprNode Params);
TPExprNode  ExprMakeAssignNode( TPExprNode Lval,  TPExprNode Rval);
TPExprNode  ExprMakeCastNode(   TPDeclSpec Type,  TPExprNode Node);

TPExprNode  ExprMakeInitNode(TPExprNode Node);
TPExprNode  ExprMakeInitList(TPExprNode Node);
void        ExprPrintInit(TPExprNode n);

TPExprNode  ExprConcat(TPExprNode pNode, TPExprNode pSibling);


DWORD       ExprConstInt(TPExprNode E);
DOUBLE      ExprConstFloat(TPExprNode E);
LPSTR       ExprConstString(TPExprNode E);

void        ExprCleanUp(TPExprNode n);



#endif // __SKC_EXPRESSIONS_H__

/* eof */


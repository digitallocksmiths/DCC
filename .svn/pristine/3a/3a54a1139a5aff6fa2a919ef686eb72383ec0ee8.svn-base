typedef enum TagSbool {SECURE_ILLEGAL=0x0000, SECURE_FALSE=0x5aF0, SECURE_TRUE=0xa05F} sbool;
typedef void  *  pgvoid;
typedef pgvoid  *  pgpgvoid;
typedef pgvoid  *  pvpgvoid;
typedef pgvoid  const *  prpgvoid;
typedef pgvoid  *  pnpgvoid;
typedef void  *  pvvoid;
typedef pvvoid  *  pgpvvoid;
typedef pvvoid  *  pvpvvoid;
typedef pvvoid  const *  prpvvoid;
typedef pvvoid  *  pnpvvoid;
typedef void  const *  prvoid;
typedef prvoid  *  pgprvoid;
typedef prvoid  *  pvprvoid;
typedef prvoid  const *  prprvoid;
typedef prvoid  *  pnprvoid;
typedef void  *  pnvoid;
typedef pnvoid  *  pgpnvoid;
typedef pnvoid  *  pvpnvoid;
typedef pnvoid  const *  prpnvoid;
typedef pnvoid  *  pnpnvoid;

typedef unsigned char flag;
typedef flag  *  pgflag;
typedef pgflag  *  pgpgflag;
typedef pgflag  *  pvpgflag;
typedef pgflag  const *  prpgflag;
typedef pgflag  *  pnpgflag;
typedef flag  *  pvflag;
typedef pvflag  *  pgpvflag;
typedef pvflag  *  pvpvflag;
typedef pvflag  const *  prpvflag;
typedef pvflag  *  pnpvflag;
typedef flag  const *  prflag;
typedef prflag  *  pgprflag;
typedef prflag  *  pvprflag;
typedef prflag  const *  prprflag;
typedef prflag  *  pnprflag;
typedef flag  *  pnflag;
typedef pnflag  *  pgpnflag;
typedef pnflag  *  pvpnflag;
typedef pnflag  const *  prpnflag;
typedef pnflag  *  pnpnflag;

typedef signed char s8;
typedef s8  *  pgs8;
typedef pgs8  *  pgpgs8;
typedef pgs8  *  pvpgs8;
typedef pgs8  const *  prpgs8;
typedef pgs8  *  pnpgs8;
typedef s8  *  pvs8;
typedef pvs8  *  pgpvs8;
typedef pvs8  *  pvpvs8;
typedef pvs8  const *  prpvs8;
typedef pvs8  *  pnpvs8;
typedef s8  const *  prs8;
typedef prs8  *  pgprs8;
typedef prs8  *  pvprs8;
typedef prs8  const *  prprs8;
typedef prs8  *  pnprs8;
typedef s8  *  pns8;
typedef pns8  *  pgpns8;
typedef pns8  *  pvpns8;
typedef pns8  const *  prpns8;
typedef pns8  *  pnpns8;

typedef unsigned char u8;
typedef u8  *  pgu8;
typedef pgu8  *  pgpgu8;
typedef pgu8  *  pvpgu8;
typedef pgu8  const *  prpgu8;
typedef pgu8  *  pnpgu8;
typedef u8  *  pvu8;
typedef pvu8  *  pgpvu8;
typedef pvu8  *  pvpvu8;
typedef pvu8  const *  prpvu8;
typedef pvu8  *  pnpvu8;
typedef u8  const *  pru8;
typedef pru8  *  pgpru8;
typedef pru8  *  pvpru8;
typedef pru8  const *  prpru8;
typedef pru8  *  pnpru8;
typedef u8  *  pnu8;
typedef pnu8  *  pgpnu8;
typedef pnu8  *  pvpnu8;
typedef pnu8  const *  prpnu8;
typedef pnu8  *  pnpnu8;

typedef signed short s16;
typedef s16  *  pgs16;
typedef pgs16  *  pgpgs16;
typedef pgs16  *  pvpgs16;
typedef pgs16  const *  prpgs16;
typedef pgs16  *  pnpgs16;
typedef s16  *  pvs16;
typedef pvs16  *  pgpvs16;
typedef pvs16  *  pvpvs16;
typedef pvs16  const *  prpvs16;
typedef pvs16  *  pnpvs16;
typedef s16  const *  prs16;
typedef prs16  *  pgprs16;
typedef prs16  *  pvprs16;
typedef prs16  const *  prprs16;
typedef prs16  *  pnprs16;
typedef s16  *  pns16;
typedef pns16  *  pgpns16;
typedef pns16  *  pvpns16;
typedef pns16  const *  prpns16;
typedef pns16  *  pnpns16;

typedef unsigned short u16;
typedef u16  *  pgu16;
typedef pgu16  *  pgpgu16;
typedef pgu16  *  pvpgu16;
typedef pgu16  const *  prpgu16;
typedef pgu16  *  pnpgu16;
typedef u16  *  pvu16;
typedef pvu16  *  pgpvu16;
typedef pvu16  *  pvpvu16;
typedef pvu16  const *  prpvu16;
typedef pvu16  *  pnpvu16;
typedef u16  const *  pru16;
typedef pru16  *  pgpru16;
typedef pru16  *  pvpru16;
typedef pru16  const *  prpru16;
typedef pru16  *  pnpru16;
typedef u16  *  pnu16;
typedef pnu16  *  pgpnu16;
typedef pnu16  *  pvpnu16;
typedef pnu16  const *  prpnu16;
typedef pnu16  *  pnpnu16;

typedef signed long s32;
typedef s32  *  pgs32;
typedef pgs32  *  pgpgs32;
typedef pgs32  *  pvpgs32;
typedef pgs32  const *  prpgs32;
typedef pgs32  *  pnpgs32;
typedef s32  *  pvs32;
typedef pvs32  *  pgpvs32;
typedef pvs32  *  pvpvs32;
typedef pvs32  const *  prpvs32;
typedef pvs32  *  pnpvs32;
typedef s32  const *  prs32;
typedef prs32  *  pgprs32;
typedef prs32  *  pvprs32;
typedef prs32  const *  prprs32;
typedef prs32  *  pnprs32;
typedef s32  *  pns32;
typedef pns32  *  pgpns32;
typedef pns32  *  pvpns32;
typedef pns32  const *  prpns32;
typedef pns32  *  pnpns32;

typedef unsigned long u32;
typedef u32  *  pgu32;
typedef pgu32  *  pgpgu32;
typedef pgu32  *  pvpgu32;
typedef pgu32  const *  prpgu32;
typedef pgu32  *  pnpgu32;
typedef u32  *  pvu32;
typedef pvu32  *  pgpvu32;
typedef pvu32  *  pvpvu32;
typedef pvu32  const *  prpvu32;
typedef pvu32  *  pnpvu32;
typedef u32  const *  pru32;
typedef pru32  *  pgpru32;
typedef pru32  *  pvpru32;
typedef pru32  const *  prpru32;
typedef pru32  *  pnpru32;
typedef u32  *  pnu32;
typedef pnu32  *  pgpnu32;
typedef pnu32  *  pvpnu32;
typedef pnu32  const *  prpnu32;
typedef pnu32  *  pnpnu32;






typedef flag ( *  pxflag_u16u16u16pgu8)(u16, u16, u16, pgu8);
typedef u16 ( *  pxu16_u16u16u16pgu8) (u16, u16, u16, pgu8);

typedef pgu8 ( *  pxpgu8_pgu8u16)(pgu8, u16);
typedef u16 ( *  pxu16_pgu8u16)(pgu8, u16);
typedef u16 ( *  pxu16_pgu8u16u8)(pgu8, u16, u8);
typedef u16 ( *  pxu16_pgu8pgu16)(pgu8, pgu16);
typedef void ( *  pxvoid_pvu8pvu8)(pvu8, pvu8);
typedef void ( *  pxvoid_pnu8pvu8)(pnu8, pvu8);
typedef void ( *  pxvoid_pgu8pvu8)(pgu8, pvu8);

typedef void ( *  pxvoid_void)(void);
typedef void ( *  pxvoid_pgvoid)(pgvoid);
typedef void ( *  pxvoid_pvvoid)(pvvoid);
typedef void ( *  pxvoid_prvoid)(prvoid);
typedef void ( *  pxvoid_pnvoid)(pnvoid);
typedef void ( *  pxvoid_flag)(flag);
typedef void ( *  pxvoid_pgflag)(pgflag);
typedef void ( *  pxvoid_pvflag)(pvflag);
typedef void ( *  pxvoid_prflag)(prflag);
typedef void ( *  pxvoid_pnflag)(pnflag);
typedef void ( *  pxvoid_s8)(s8);
typedef void ( *  pxvoid_pgs8)(pgs8);
typedef void ( *  pxvoid_pvs8)(pvs8);
typedef void ( *  pxvoid_prs8)(prs8);
typedef void ( *  pxvoid_pns8)(pns8);
typedef void ( *  pxvoid_u8)(u8);
typedef void ( *  pxvoid_pgu8)(pgu8);
typedef void ( *  pxvoid_pvu8)(pvu8);
typedef void ( *  pxvoid_pru8)(pru8);
typedef void ( *  pxvoid_pnu8)(pnu8);
typedef void ( *  pxvoid_s16)(s16);
typedef void ( *  pxvoid_pgs16)(pgs16);
typedef void ( *  pxvoid_pvs16)(pvs16);
typedef void ( *  pxvoid_prs16)(prs16);
typedef void ( *  pxvoid_pns16)(pns16);
typedef void ( *  pxvoid_u16)(u16);
typedef void ( *  pxvoid_pgu16)(pgu16);
typedef void ( *  pxvoid_pvu16)(pvu16);
typedef void ( *  pxvoid_pru16)(pru16);
typedef void ( *  pxvoid_pnu16)(pnu16);
typedef void ( *  pxvoid_s32)(s32);
typedef void ( *  pxvoid_pgs32)(pgs32);
typedef void ( *  pxvoid_pvs32)(pvs32);
typedef void ( *  pxvoid_prs32)(prs32);
typedef void ( *  pxvoid_pns32)(pns32);
typedef void ( *  pxvoid_u32)(u32);
typedef void ( *  pxvoid_pgu32)(pgu32);
typedef void ( *  pxvoid_pvu32)(pvu32);
typedef void ( *  pxvoid_pru32)(pru32);
typedef void ( *  pxvoid_pnu32)(pnu32);

typedef flag ( *  pxflag_void)(void);
typedef flag ( *  pxflag_pgvoid)(pgvoid);
typedef flag ( *  pxflag_pvvoid)(pvvoid);
typedef flag ( *  pxflag_prvoid)(prvoid);
typedef flag ( *  pxflag_pnvoid)(pnvoid);
typedef flag ( *  pxflag_flag)(flag);
typedef flag ( *  pxflag_pgflag)(pgflag);
typedef flag ( *  pxflag_pvflag)(pvflag);
typedef flag ( *  pxflag_prflag)(prflag);
typedef flag ( *  pxflag_pnflag)(pnflag);
typedef flag ( *  pxflag_s8)(s8);
typedef flag ( *  pxflag_pgs8)(pgs8);
typedef flag ( *  pxflag_pvs8)(pvs8);
typedef flag ( *  pxflag_prs8)(prs8);
typedef flag ( *  pxflag_pns8)(pns8);
typedef flag ( *  pxflag_u8)(u8);
typedef flag ( *  pxflag_pgu8)(pgu8);
typedef flag ( *  pxflag_pvu8)(pvu8);
typedef flag ( *  pxflag_pru8)(pru8);
typedef flag ( *  pxflag_pnu8)(pnu8);
typedef flag ( *  pxflag_s16)(s16);
typedef flag ( *  pxflag_pgs16)(pgs16);
typedef flag ( *  pxflag_pvs16)(pvs16);
typedef flag ( *  pxflag_prs16)(prs16);
typedef flag ( *  pxflag_pns16)(pns16);
typedef flag ( *  pxflag_u16)(u16);
typedef flag ( *  pxflag_pgu16)(pgu16);
typedef flag ( *  pxflag_pvu16)(pvu16);
typedef flag ( *  pxflag_pru16)(pru16);
typedef flag ( *  pxflag_pnu16)(pnu16);
typedef flag ( *  pxflag_s32)(s32);
typedef flag ( *  pxflag_pgs32)(pgs32);
typedef flag ( *  pxflag_pvs32)(pvs32);
typedef flag ( *  pxflag_prs32)(prs32);
typedef flag ( *  pxflag_pns32)(pns32);
typedef flag ( *  pxflag_u32)(u32);
typedef flag ( *  pxflag_pgu32)(pgu32);
typedef flag ( *  pxflag_pvu32)(pvu32);
typedef flag ( *  pxflag_pru32)(pru32);
typedef flag ( *  pxflag_pnu32)(pnu32);

typedef u8 ( *  pxu8_void)(void);
typedef u8 ( *  pxu8_pgvoid)(pgvoid);
typedef u8 ( *  pxu8_pvvoid)(pvvoid);
typedef u8 ( *  pxu8_prvoid)(prvoid);
typedef u8 ( *  pxu8_pnvoid)(pnvoid);
typedef u8 ( *  pxu8_flag)(flag);
typedef u8 ( *  pxu8_pgflag)(pgflag);
typedef u8 ( *  pxu8_pvflag)(pvflag);
typedef u8 ( *  pxu8_prflag)(prflag);
typedef u8 ( *  pxu8_pnflag)(pnflag);
typedef u8 ( *  pxu8_s8)(s8);
typedef u8 ( *  pxu8_pgs8)(pgs8);
typedef u8 ( *  pxu8_pvs8)(pvs8);
typedef u8 ( *  pxu8_prs8)(prs8);
typedef u8 ( *  pxu8_pns8)(pns8);
typedef u8 ( *  pxu8_u8)(u8);
typedef u8 ( *  pxu8_pgu8)(pgu8);
typedef u8 ( *  pxu8_pvu8)(pvu8);
typedef u8 ( *  pxu8_pru8)(pru8);
typedef u8 ( *  pxu8_pnu8)(pnu8);
typedef u8 ( *  pxu8_s16)(s16);
typedef u8 ( *  pxu8_pgs16)(pgs16);
typedef u8 ( *  pxu8_pvs16)(pvs16);
typedef u8 ( *  pxu8_prs16)(prs16);
typedef u8 ( *  pxu8_pns16)(pns16);
typedef u8 ( *  pxu8_u16)(u16);
typedef u8 ( *  pxu8_pgu16)(pgu16);
typedef u8 ( *  pxu8_pvu16)(pvu16);
typedef u8 ( *  pxu8_pru16)(pru16);
typedef u8 ( *  pxu8_pnu16)(pnu16);
typedef u8 ( *  pxu8_s32)(s32);
typedef u8 ( *  pxu8_pgs32)(pgs32);
typedef u8 ( *  pxu8_pvs32)(pvs32);
typedef u8 ( *  pxu8_prs32)(prs32);
typedef u8 ( *  pxu8_pns32)(pns32);
typedef u8 ( *  pxu8_u32)(u32);
typedef u8 ( *  pxu8_pgu32)(pgu32);
typedef u8 ( *  pxu8_pvu32)(pvu32);
typedef u8 ( *  pxu8_pru32)(pru32);
typedef u8 ( *  pxu8_pnu32)(pnu32);



typedef pgu8 ( *  pxpgu8_void)(void);
typedef pgu8 ( *  pxpgu8_pgvoid)(pgvoid);
typedef pgu8 ( *  pxpgu8_pvvoid)(pvvoid);
typedef pgu8 ( *  pxpgu8_prvoid)(prvoid);
typedef pgu8 ( *  pxpgu8_pnvoid)(pnvoid);
typedef pgu8 ( *  pxpgu8_flag)(flag);
typedef pgu8 ( *  pxpgu8_pgflag)(pgflag);
typedef pgu8 ( *  pxpgu8_pvflag)(pvflag);
typedef pgu8 ( *  pxpgu8_prflag)(prflag);
typedef pgu8 ( *  pxpgu8_pnflag)(pnflag);
typedef pgu8 ( *  pxpgu8_s8)(s8);
typedef pgu8 ( *  pxpgu8_pgs8)(pgs8);
typedef pgu8 ( *  pxpgu8_pvs8)(pvs8);
typedef pgu8 ( *  pxpgu8_prs8)(prs8);
typedef pgu8 ( *  pxpgu8_pns8)(pns8);
typedef pgu8 ( *  pxpgu8_u8)(u8);
typedef pgu8 ( *  pxpgu8_pgu8)(pgu8);
typedef pgu8 ( *  pxpgu8_pvu8)(pvu8);
typedef pgu8 ( *  pxpgu8_pru8)(pru8);
typedef pgu8 ( *  pxpgu8_pnu8)(pnu8);
typedef pgu8 ( *  pxpgu8_s16)(s16);
typedef pgu8 ( *  pxpgu8_pgs16)(pgs16);
typedef pgu8 ( *  pxpgu8_pvs16)(pvs16);
typedef pgu8 ( *  pxpgu8_prs16)(prs16);
typedef pgu8 ( *  pxpgu8_pns16)(pns16);
typedef pgu8 ( *  pxpgu8_u16)(u16);
typedef pgu8 ( *  pxpgu8_pgu16)(pgu16);
typedef pgu8 ( *  pxpgu8_pvu16)(pvu16);
typedef pgu8 ( *  pxpgu8_pru16)(pru16);
typedef pgu8 ( *  pxpgu8_pnu16)(pnu16);
typedef pgu8 ( *  pxpgu8_s32)(s32);
typedef pgu8 ( *  pxpgu8_pgs32)(pgs32);
typedef pgu8 ( *  pxpgu8_pvs32)(pvs32);
typedef pgu8 ( *  pxpgu8_prs32)(prs32);
typedef pgu8 ( *  pxpgu8_pns32)(pns32);
typedef pgu8 ( *  pxpgu8_u32)(u32);
typedef pgu8 ( *  pxpgu8_pgu32)(pgu32);
typedef pgu8 ( *  pxpgu8_pvu32)(pvu32);
typedef pgu8 ( *  pxpgu8_pru32)(pru32);
typedef pgu8 ( *  pxpgu8_pnu32)(pnu32);

typedef s16 ( *  pxs16_void)(void);
typedef s16 ( *  pxs16_pgvoid)(pgvoid);
typedef s16 ( *  pxs16_pvvoid)(pvvoid);
typedef s16 ( *  pxs16_prvoid)(prvoid);
typedef s16 ( *  pxs16_pnvoid)(pnvoid);
typedef s16 ( *  pxs16_flag)(flag);
typedef s16 ( *  pxs16_pgflag)(pgflag);
typedef s16 ( *  pxs16_pvflag)(pvflag);
typedef s16 ( *  pxs16_prflag)(prflag);
typedef s16 ( *  pxs16_pnflag)(pnflag);
typedef s16 ( *  pxs16_s8)(s8);
typedef s16 ( *  pxs16_pgs8)(pgs8);
typedef s16 ( *  pxs16_pvs8)(pvs8);
typedef s16 ( *  pxs16_prs8)(prs8);
typedef s16 ( *  pxs16_pns8)(pns8);
typedef s16 ( *  pxs16_u8)(u8);
typedef s16 ( *  pxs16_pgu8)(pgu8);
typedef s16 ( *  pxs16_pvu8)(pvu8);
typedef s16 ( *  pxs16_pru8)(pru8);
typedef s16 ( *  pxs16_pnu8)(pnu8);
typedef s16 ( *  pxs16_s16)(s16);
typedef s16 ( *  pxs16_pgs16)(pgs16);
typedef s16 ( *  pxs16_pvs16)(pvs16);
typedef s16 ( *  pxs16_prs16)(prs16);
typedef s16 ( *  pxs16_pns16)(pns16);
typedef s16 ( *  pxs16_u16)(u16);
typedef s16 ( *  pxs16_pgu16)(pgu16);
typedef s16 ( *  pxs16_pvu16)(pvu16);
typedef s16 ( *  pxs16_pru16)(pru16);
typedef s16 ( *  pxs16_pnu16)(pnu16);
typedef s16 ( *  pxs16_s32)(s32);
typedef s16 ( *  pxs16_pgs32)(pgs32);
typedef s16 ( *  pxs16_pvs32)(pvs32);
typedef s16 ( *  pxs16_prs32)(prs32);
typedef s16 ( *  pxs16_pns32)(pns32);
typedef s16 ( *  pxs16_u32)(u32);
typedef s16 ( *  pxs16_pgu32)(pgu32);
typedef s16 ( *  pxs16_pvu32)(pvu32);
typedef s16 ( *  pxs16_pru32)(pru32);
typedef s16 ( *  pxs16_pnu32)(pnu32);

typedef u16 ( *  pxu16_void)(void);
typedef u16 ( *  pxu16_pgvoid)(pgvoid);
typedef u16 ( *  pxu16_pvvoid)(pvvoid);
typedef u16 ( *  pxu16_prvoid)(prvoid);
typedef u16 ( *  pxu16_pnvoid)(pnvoid);
typedef u16 ( *  pxu16_flag)(flag);
typedef u16 ( *  pxu16_pgflag)(pgflag);
typedef u16 ( *  pxu16_pvflag)(pvflag);
typedef u16 ( *  pxu16_prflag)(prflag);
typedef u16 ( *  pxu16_pnflag)(pnflag);
typedef u16 ( *  pxu16_s8)(s8);
typedef u16 ( *  pxu16_pgs8)(pgs8);
typedef u16 ( *  pxu16_pvs8)(pvs8);
typedef u16 ( *  pxu16_prs8)(prs8);
typedef u16 ( *  pxu16_pns8)(pns8);
typedef u16 ( *  pxu16_u8)(u8);
typedef u16 ( *  pxu16_pgu8)(pgu8);
typedef u16 ( *  pxu16_pvu8)(pvu8);
typedef u16 ( *  pxu16_pru8)(pru8);
typedef u16 ( *  pxu16_pnu8)(pnu8);
typedef u16 ( *  pxu16_s16)(s16);
typedef u16 ( *  pxu16_pgs16)(pgs16);
typedef u16 ( *  pxu16_pvs16)(pvs16);
typedef u16 ( *  pxu16_prs16)(prs16);
typedef u16 ( *  pxu16_pns16)(pns16);
typedef u16 ( *  pxu16_u16)(u16);
typedef u16 ( *  pxu16_pgu16)(pgu16);
typedef u16 ( *  pxu16_pvu16)(pvu16);
typedef u16 ( *  pxu16_pru16)(pru16);
typedef u16 ( *  pxu16_pnu16)(pnu16);
typedef u16 ( *  pxu16_s32)(s32);
typedef u16 ( *  pxu16_pgs32)(pgs32);
typedef u16 ( *  pxu16_pvs32)(pvs32);
typedef u16 ( *  pxu16_prs32)(prs32);
typedef u16 ( *  pxu16_pns32)(pns32);
typedef u16 ( *  pxu16_u32)(u32);
typedef u16 ( *  pxu16_pgu32)(pgu32);
typedef u16 ( *  pxu16_pvu32)(pvu32);
typedef u16 ( *  pxu16_pru32)(pru32);
typedef u16 ( *  pxu16_pnu32)(pnu32);

typedef pnu16 ( *  pxpnu16_void)(void);
typedef pnu16 ( *  pxpnu16_pgvoid)(pgvoid);
typedef pnu16 ( *  pxpnu16_pvvoid)(pvvoid);
typedef pnu16 ( *  pxpnu16_prvoid)(prvoid);
typedef pnu16 ( *  pxpnu16_pnvoid)(pnvoid);
typedef pnu16 ( *  pxpnu16_flag)(flag);
typedef pnu16 ( *  pxpnu16_pgflag)(pgflag);
typedef pnu16 ( *  pxpnu16_pvflag)(pvflag);
typedef pnu16 ( *  pxpnu16_prflag)(prflag);
typedef pnu16 ( *  pxpnu16_pnflag)(pnflag);
typedef pnu16 ( *  pxpnu16_s8)(s8);
typedef pnu16 ( *  pxpnu16_pgs8)(pgs8);
typedef pnu16 ( *  pxpnu16_pvs8)(pvs8);
typedef pnu16 ( *  pxpnu16_prs8)(prs8);
typedef pnu16 ( *  pxpnu16_pns8)(pns8);
typedef pnu16 ( *  pxpnu16_u8)(u8);
typedef pnu16 ( *  pxpnu16_pgu8)(pgu8);
typedef pnu16 ( *  pxpnu16_pvu8)(pvu8);
typedef pnu16 ( *  pxpnu16_pru8)(pru8);
typedef pnu16 ( *  pxpnu16_pnu8)(pnu8);
typedef pnu16 ( *  pxpnu16_s16)(s16);
typedef pnu16 ( *  pxpnu16_pgs16)(pgs16);
typedef pnu16 ( *  pxpnu16_pvs16)(pvs16);
typedef pnu16 ( *  pxpnu16_prs16)(prs16);
typedef pnu16 ( *  pxpnu16_pns16)(pns16);
typedef pnu16 ( *  pxpnu16_u16)(u16);
typedef pnu16 ( *  pxpnu16_pgu16)(pgu16);
typedef pnu16 ( *  pxpnu16_pvu16)(pvu16);
typedef pnu16 ( *  pxpnu16_pru16)(pru16);
typedef pnu16 ( *  pxpnu16_pnu16)(pnu16);
typedef pnu16 ( *  pxpnu16_s32)(s32);
typedef pnu16 ( *  pxpnu16_pgs32)(pgs32);
typedef pnu16 ( *  pxpnu16_pvs32)(pvs32);
typedef pnu16 ( *  pxpnu16_prs32)(prs32);
typedef pnu16 ( *  pxpnu16_pns32)(pns32);
typedef pnu16 ( *  pxpnu16_u32)(u32);
typedef pnu16 ( *  pxpnu16_pgu32)(pgu32);
typedef pnu16 ( *  pxpnu16_pvu32)(pvu32);
typedef pnu16 ( *  pxpnu16_pru32)(pru32);
typedef pnu16 ( *  pxpnu16_pnu32)(pnu32);

extern u8 baInvokeCounts[ 28 ];

typedef struct TagConfigStatic {
    u8 bDummy;
} TConfigStatic;

typedef struct TagConfigDynamic {
    u8 bDummy;
} TConfigDynamic;

typedef struct TagConfig {
    TConfigStatic StaticFallback;
    TConfigStatic StaticNormal;
    TConfigDynamic DynamicFallback;
    TConfigDynamic DynamicNormalCold;
    TConfigDynamic DynamicNormalWarm;
} TConfig;
extern TConfig Config;

typedef struct TagCrypto {
    struct {
        u8 baGlobalKeyBlindingSeed[8];
    } Key;
} TCrypto, * TPCrypto;
extern TCrypto Crypto;


void SysSecurityInit(void);



void SysSecuritySetOperatingMode(u8 bMode);
void SysSecurityWatchDogStart(u8 bWaymark);
void SysSecurityWatchDogNext(u8 bWaymark);
void SysSecurityWatchDogStop(u8 bWaymark);

sbool SysUtilVirgoIntacta(void);
void SysUtilPrimaNocta(void);

void SysCryptoRandomSetup(void);
void SysCryptoRandomInit(void);








void SysUtilTrap(u16 nReason);


void SysUtilConfigInit(void);
void SysUtilConfigDefault(void);
void SysUtilConfigSelect(u8 bConfig);

void SetOperatingParameters(void);






void IFX_SetCurrentLimitation(u8 bClass);


void SysMemsetV(pvu8 pDest, u8 bVal, u16 nLen);
void SysMemsetE(pnu8 pDest, u8 bVal, u16 nLen);
void SysMemcpyEV(pnu8 pDest, pnu8 pSrce, u16 nLen);


void SysMbmRamInit(pvu8 pbHeapStart, pvu8 pbHeapEnd);
void SysMbmInit(void);
void SysMbmFormatEEPROM(pnu8 pbStart, pnu8 pbEnd);

void SysMemTransactionInitPhase1(void);
void SysMemTransactionInitPhase2(void);
void SysMemTransactionSetup(void);

extern u16 ANA_STAT;
extern u16 CLKU_OPM;

extern u8 baRollbackBufferSpace[16];
extern u8 RamHeap[16];





extern u8 NvmHeap[16];





void SysCryptoRandomGenerateSecure(pvu8 pbDest, u16 nLen);


extern u8 HalRam[16];
extern u8 ElmRam[16];
extern u8 CmRam[16];


void SysIoApduInit(void);
void SysIoApduTransmitATR(void);

void HalOneTimeInitialise(void);

extern void ElmMain(flag fCold);
extern void ElmOneTimeSetup(void);


void HalInit(void) {
    SysSecurityInit();



}


void HalHostLibrarySetup(void) {
      SysCryptoRandomSetup();
}

void HalHostLibraryInit(void) {

        SysCryptoRandomInit();

}

void SetOperatingParameters(void) {

    switch (ANA_STAT & 0xE000) {
    case 0x4000:
        IFX_SetCurrentLimitation( 1 );
        break;
    case 0x8000:
        IFX_SetCurrentLimitation( 2 );
        break;
    case 0xC000:
        IFX_SetCurrentLimitation( 3 );
        break;
    case 0x2000:
    case 0x6000:
    case 0xA000:
    case 0xE000:

        break;
    default:
        SysUtilTrap( 2 );
    }

    CLKU_OPM =  0x1F70 ;
    if (CLKU_OPM !=  0x1F70 ) {
        SysUtilTrap( 3 );
    }

    SysSecuritySetOperatingMode( 2 );
    return;
}

void HalProcess(void);


void HalProcess(void) {
    flag fCold;

    fCold =  1 ;

    SysUtilConfigDefault();
    SetOperatingParameters();
    SysSecuritySetOperatingMode( 1 );
    SysMemsetV((pvu8)0x020, 0x00, (pvu8)(&(&HalRam)[1])-(pvu8)0x20);


    SysSecuritySetOperatingMode( 2 );
    SysUtilConfigSelect(fCold);
    SysSecuritySetOperatingMode( 1 );
    SysSecuritySetOperatingMode( 2 );

    SysSecuritySetOperatingMode( 1 );
    SysMemsetV((pvu8)&ElmRam, 0, sizeof(ElmRam));
    SysSecuritySetOperatingMode( 2 );
    SysMbmRamInit((pvu8) (&(RamHeap[0])) , (pvu8) (&(RamHeap[16])) );

    SysMemTransactionInitPhase1();

    SysIoApduInit();
    SysIoApduTransmitATR();

    SysSecurityWatchDogStart(0x07);

    SysMemsetV((pvu8)&CmRam, 0, sizeof(CmRam));

    SysSecurityWatchDogNext(0x08);
    switch (SysUtilVirgoIntacta()) {
    case SECURE_TRUE:
            HalOneTimeInitialise();
            break;
    case SECURE_FALSE:
            break;
    default:
            SysUtilTrap( 4 );
    }


    SysSecurityWatchDogStop(0x9);
    SysMemTransactionInitPhase2();
    SysSecurityWatchDogStart(0xa);
    SysMbmInit();
    HalHostLibraryInit();






    SysSecurityWatchDogNext(0x0b);
    ElmMain(fCold);
}


void HalOneTimeInitialise(void) {
    sbool fVirgin;

    SysSecurityWatchDogNext(0x09);

    fVirgin = SysUtilVirgoIntacta();
    if (fVirgin == SECURE_FALSE) {
        SysUtilTrap( 5 );
    } else if (fVirgin == SECURE_TRUE) {
        fVirgin = SECURE_ILLEGAL;
        fVirgin = SysUtilVirgoIntacta();
        if (fVirgin == SECURE_TRUE) {

            u8 baTmp[8];

            SysSecurityWatchDogNext(0x0a);



            SysUtilConfigDefault();
            SysMemsetE( baRollbackBufferSpace ,  0xFF , sizeof( baRollbackBufferSpace ));

            SysSecurityWatchDogStop(0x0b);
            SysMemsetE((pnu8) (&(NvmHeap[0])) ,  0xFF  , (u16)((pnu8) (&(NvmHeap[16])) -(pnu8) (&(NvmHeap[0])) ));
            SysSecurityWatchDogStart(0x0a);

            SysMemsetE((pnu8)& Config.StaticFallback ,  0xFF , sizeof(TConfigStatic));
//          SysMemsetE((pnu8)& Config.StaticNormal ,  0xFF , sizeof(TConfigStatic));
//          SysMemsetE((pnu8)& Config.DynamicFallback ,  0xFF , sizeof(TConfigDynamic));
//          SysMemsetE((pnu8)& Config.DynamicNormalCold ,  0xFF , sizeof(TConfigDynamic));
//          SysMemsetE((pnu8)& Config.DynamicNormalWarm ,  0xFF , sizeof(TConfigDynamic));

            SysSecurityWatchDogNext(0x0b);
            SysMemTransactionSetup();
            SysMemTransactionInitPhase1();
            SysMemTransactionInitPhase2();
            SysUtilConfigInit();
            SysUtilConfigSelect( 1 );

            SysSecurityWatchDogNext(0x0c);
            SysMbmFormatEEPROM((pnu8) (&(NvmHeap[0])) , (pnu8) (&(NvmHeap[16])) );


            SysCryptoRandomGenerateSecure(baTmp, 8);
//            SysMemcpyEV( Crypto.Key.baGlobalKeyBlindingSeed , baTmp, 8);

            SysSecurityWatchDogNext(0x0d);
            HalHostLibrarySetup();
            ElmOneTimeSetup();

            SysSecurityWatchDogNext(0x0e);

            SysUtilPrimaNocta();
        } else {
            SysUtilTrap( 7 );
        }
    }

    SysSecurityWatchDogStop(0x0f);
    SysSecurityWatchDogStart(0x08);
}


// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <setjmp.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <limits.h>
#include <float.h>
#include <Windows.h>

//#include <ext\types.h>
#include "Utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "gen.h"
#include "main.h"
#include "C_Yacced.tab.h"


#ifdef _DEBUG

char *Uops[] = { "-u",  "+u",  "~u",    "u++",  "++u", "u--", "--u", "sizeof","addr", "ptr", "!u" };

char *Bops[] = { "+b",  "-b",  "*b",    "/b",   "%b", "&b",  "|b",  "^b",    "==b",  "!=b", "<b",  "<=b", ">b",    ">=b",  "&&b", "||b", ">>b", "<<b" };


void PrintNode(TPExprNode pN) {
    switch (pN->Usage) {
        case uConst:    printf("%lx ",  pN->Use.Const.lInteger);
                        break;
        case uVar:      printf("<%s> ",  pN->Use.Var.pszIdentifier);
                        break;
        case uUnary:    printf("(op ");
                        PrintNode(pN->Use.Unary.pOperand);
                        printf(")");
                        break;
        default:    Error(WARNING0, "Other ");
                    break;
    }
}

void ExprPrintInit(TPExprNode n) {
    while (n) {
        if (n->Usage != uInit) {
            Error(FATAL, "PrintInit: What !\n");
        }
        if (n->Use.Init.pAssignment) {
            PrintNode(n->Use.Init.pAssignment);
        }
        if (n->Use.Init.pChildren) {
            printf("{ ");
            ExprPrintInit(n->Use.Init.pChildren);
            printf("} ");
        }
        n=n->pSibling;
    }
}


void PrintType(int iDepth, TPExprNode n) {
    ASSERT(n->pType && ((n->pType->Usage == DecSpec) || (n->pType->Usage == DecPtr) || (n->pType->Usage == DecArray)));
    ParseDeclSpec(0, n->pType, FALSE);
 }

char *pszCasts[] = {
    "s8 to s16",
    "s8 to s32",
    "s16 to s32",
    "u8 to u16",
    "u8 to u32",
    "u16 to u32",
    "32 to 16",
    "32 to 8",
    "32 to BOOL",
    "16 to 8",
    "16 to BOOL"
};



void GenExpressionPrettyPrint(int iDepth, TPExprNode n) {
    if (!n) {
        printf("..Null\n");
        return;
    }
    
    switch (n->Usage) {
        case    uConst:     ConsoleIndent(iDepth);
                            ConsolePrintf(CON_MAGENTA_BRIGHT, "0x%x ",    n->Use.Const.lInteger);
                            PrintType(iDepth, n);
                            break;
        case    uVar:       ConsoleIndent(iDepth);
                            ConsolePrintf(CON_YELLOW_BRIGHT, "[%s",  n->Use.Var.pszIdentifier);
                            if (n->Use.Var.iOffset != GLOBAL_VAR) ConsolePrintf(CON_YELLOW_BRIGHT, ":%d] ", n->Use.Var.iOffset);       // variable offset
                            else                                  ConsolePrintf(CON_YELLOW_BRIGHT, "] ");                               // variable is global
                            PrintType(iDepth, n);
                            break;
        case    uUnary:     ConsoleIndent(iDepth);
                            printf("%s ", Uops[n->Use.Unary.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Unary.pOperand);
                            break;
        case    uBinary:    GenExpressionPrettyPrint(iDepth + 1, n->Use.Binary.pLeft);
                            ConsoleIndent(iDepth);
                            printf("%s ", Bops[n->Use.Unary.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Binary.pRight);
                            break;
        case    uTernary:   ConsoleIndent(iDepth);
                            printf("Tern ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.First);
                            ConsoleIndent(iDepth);
                            printf("Then\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.Second);
                            ConsoleIndent(iDepth);
                            printf("Else\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.Third);
                            break;
        case    uDot:       GenExpressionPrettyPrint(iDepth + 1, n->Use.Dot.pRecord);
                            ConsoleIndent(iDepth);
                            printf("Dot ");
                            PrintType(iDepth, n);
                            ConsoleIndent(iDepth);
                            printf("[%s:%d]\n", n->Use.Dot.pszField, n->Use.Dot.iOffset);
                            break;
        case    uArrow:     GenExpressionPrettyPrint(iDepth + 1, n->Use.Arrow.pRecord);
                            ConsoleIndent(iDepth);
                            printf("Arrow ");
                            PrintType(iDepth, n);
                            ConsoleIndent(iDepth);
                            printf("[%s:%d]\n",n->Use.Arrow.pszField, n->Use.Arrow.iOffset);
                            break;
        case    uArray:     GenExpressionPrettyPrint(iDepth + 1, n->Use.Array.pVector);
                            ConsoleIndent(iDepth);
                            printf("Array ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Array.pIndex);
                            break;
        case    uFunc:      GenExpressionPrettyPrint(iDepth + 1, n->Use.pFunc.pFunc);
                            ConsoleIndent(iDepth);
                            printf("Function ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.pFunc.pParams);
                            break;
        case    uCast:      ConsoleIndent(iDepth);
                            printf("Cast %s", pszCasts[n->Use.Cast.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Cast.pTarget);
                            break;
        case    uAssign:    ConsoleIndent(iDepth);
                            printf("Assign ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Assign.pLval);
                            ConsoleIndent(iDepth);
                            printf("<==\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Assign.pRval);
                            break;
        default:            Error(FATAL, "ParseExpr: What [%d]\n", n->Usage);
                            break;
    }
}
#endif // _DEBUG



// ##########################################################################
// #  Function: GenExpression
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void    GenExpression(FILE *hOut, TPExprNode pExpr) {
    for (; pExpr != NULL; pExpr = pExpr->pSibling) {
        GenAsmOut(hOut, "", "clr", "r4",    "  1: Dummy code to set long zero", TRUE, FALSE);
        GenAsmOut(hOut, "", "mov", "r5,r4", "  1: ", TRUE, FALSE);
        GenAsmOut(hOut, "", "mov", "r6,r4", "  1: ", TRUE, FALSE);
        GenAsmOut(hOut, "", "mov", "r7,r4", "  1: ", TRUE, FALSE);
    }
}

/* eof */


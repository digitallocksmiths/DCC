



//int a1[sizeof(a *)];
//int b1[sizeof(b *)];

// a       a2;
// a _near a3;                     // bug ?? setting far/near 
// a _far  a4;

//char a[0xff];                               //    255
//char b[(char)0xff];                         //     -1
//char c[(int)(char)0xff];                    //     -1
//char d[(unsigned int)(char)0xff];           //  65535
//char e[(int)(unsigned char)0xff];             //    255

//char h[(int _far  *)(char _far  *)-1];
//char i[(int _far  *)(char _near *)-1];
//char j[(int _near *)(char _far  *)-1];
//char k[(int _near *)(char _near *)-1];

//char m[(int *)0 + 10];
          
//int v[a-1.0];
//int w[1-a];
//int x[a-c];
//int y[a-b];

//int a[(int*)10  +1];
//int b[(int *)10 +2];
//int c[(int *)10 +3.0];
//int d[(long*)10  -(long*)6];
//int e[(int *)10 -(int*)6];
//int f[(int *)10 -(int*)6.0];


//int a[sizeof(*1)];
//int b[sizeof(*(void *)1)];
//int c[sizeof(*(char *)1)];
//int d[sizeof(*(int *)1)];
//int e[sizeof(*(long *)1)];
//int f[sizeof(*(void*)1)];


//char _near * _far x;
//char _far  * _near y;
//int a[sizeof(*x)];
//int b[sizeof(x)];
//int c[sizeof(&x)];
//int d[sizeof(*y)];
//int e[sizeof(y)];
//int f[sizeof(&y)];
//int g[sizeof(&1)];


//int     f1();
//int     f1(int *,...);
//int     f1(int *x,int y);
//int     f1(int [],int);
//int     f1();
//int     f1(int*,...);
//int     f1(int *x,int y,int z);
//int     f1(int *x,char);


//int *fred(void);
//int *fred(int);
//char *fred(void);
//typedef struct str {int x;} STR;
//typedef STR *LPSTR;
//extern LPSTR *z;
//LPSTR *z;
//extern struct str **z;
//struct str **z;

//typedef int x;
//x a;
//extern x b;
//static x c;


//long double a;
//long float  a;

// int x[] = { 1,2,3 };

//typedef unsigned int WORD;
//extern int fred;
//
//typedef union x {
//    WORD Int;
//    WORD Real;
//    WORD Ident;
//} YYSTYPE;

//extern YYSTYPE yylval;
//int r;
//extern YYSTYPE yylval;


//

int i1,i2,i3;

int a0[sizeof(int)];
//int a3[4] = { 30,31,32 };             // underflow OK
//int a4[4] = { 40,41,42,43 };          // spot on OK
//int a5[4] = { 50,51,52,53,54 };       // overflow
int a6[4] = "hello";                    // size should overflow
int a7[] = "hello";                     // size should not be zero!

int b0[sizeof(a0)];
int b6[sizeof(a6)];
int b7[sizeof(a7)];

//char * pX = "this is px";

//int a44[4][4] = { { 40,41,42,43 }, { 50,51,52,53 }, { 60,61,62,63 }, { 70,71,72,73 } };


//int a[4] = {0.5 < 0.4 , 2, 0.3+2, "hello"};
//
// enum {a=-1, b, c, d='@'};




//int a[1+2];
//int b[1+n];
//int c[n+2];
//int d[n+n];


//int s;

//fred x;

//int z;

//enum {one,two, three};
//enum {a=-1, b, c='@'};
//enum {x, y=2+3*4, z};

// register int *a(void);
// int (*b)(void);
// int *(c(void));

// typedef int *z,*y;

//union fred {
//        unsigned char a;
//        unsigned      b;
//        long          c;
//        float         d;
//        double        e;
//} ;


//struct fred {
//        unsigned char a;
//        unsigned      b;
//        long          c;
//        float         d;
//        double        e;
//} ;

// struct fred z;  

//typedef int fred(void)[];
//typedef int fred[](void);
//extern  register int fred;
//static  int fred;

//typedef struct fred bert;
//extern  fart bert;

//int *foo(void);


//enum fred { one, two, three, four };
//enum jim {a,b=9,c,d };
//enum {v,w,x,y,z};

//int static typedef jim;
//char int typedef extern const volatile crap;
//char     typedef        const          crap;
//     int         extern       volatile crap;

//enum {A,B,C};

//enum fred  var1;
//enum fred  var1;


//enum fred { a,b,c=42,d };
//enum fred1  * const          var1;
//enum fred2  *       volatile var1;
//enum fred3  * const volatile var1;

// int a,*b=0,**c[][4];

//int *fred1a(),fred1b();
//int (*fred2)();
//int *(fred3());

//int *fred4[2];
//int *(*fred5)[2];
//int *(fred6[2]);

//enum e1 { a,b,c,d } full;
//typedef enum e1             back;
//enum e2             fore;
//enum e2 { e,f,g,d };
//int ;
//int fred8;

// int  * const * * volatile * var1[];

//fred(int *x,...) {
//    int j,i;
//    for(;;j++) ;
//    a = 1+2+(char *)4;
// }



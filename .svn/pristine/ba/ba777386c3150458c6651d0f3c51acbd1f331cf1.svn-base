#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 6 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:                          */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 68 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
/*  TIdExprAssign       nAssign;            // ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define _NORETURN 291
#define _IOREG 292
#define IDENTIFIER 293
#define STRINGliteral 294
#define INTEGERconstant 295
#define CHARACTERconstant 296
#define FLOATINGconstant 297
#define ENUMERATIONconstant 298
#define TYPEDEFname 299
#define ARROW 300
#define INC 301
#define DEC 302
#define LS 303
#define RS 304
#define LE 305
#define GE 306
#define EQ 307
#define NE 308
#define ANDAND 309
#define OROR 310
#define ELLIPSIS 311
#define MULTassign 312
#define DIVassign 313
#define MODassign 314
#define PLUSassign 315
#define MINUSassign 316
#define LSassign 317
#define RSassign 318
#define ANDassign 319
#define XORassign 320
#define ORassign 321
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   64,   64,   65,   65,   66,   16,   67,   16,   17,
   17,   23,   23,    6,    6,    6,    6,    6,    6,    7,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
    9,    4,    4,    4,    5,    5,   18,   18,   15,   15,
   14,   14,   19,   20,   20,   20,   20,   21,   21,   22,
   22,   22,    3,    3,    3,    1,    1,    2,    2,   12,
   12,   13,   13,   13,   13,   13,   13,   10,   10,   10,
   10,   11,   11,   24,   24,   25,   25,   26,   26,   26,
   42,   42,   42,   43,   43,   27,   27,   28,   28,   28,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   31,
   31,   31,   31,   31,   31,   32,   33,   33,   34,   34,
   68,   34,   69,   34,   30,   30,   38,   38,   39,   39,
   40,   40,   35,   35,   35,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   37,   37,   37,   37,   37,
   44,   44,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   46,   46,   47,   48,   48,   49,
   49,   50,   50,   51,   51,   52,   52,   53,   53,   53,
   54,   54,   54,   54,   54,   55,   55,   55,   56,   56,
   56,   57,   57,   57,   57,   58,   58,   59,   59,   59,
   59,   59,   59,   41,   41,   41,   41,   41,   41,   60,
   60,   60,   60,   60,   60,   60,   60,   61,   61,   61,
   61,   61,   62,   62,   63,   63,   63,   63,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    0,    3,    0,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    4,    5,    2,    1,    1,    1,    2,    1,    3,
    1,    3,    3,    1,    2,    1,    2,    1,    3,    1,
    2,    3,    4,    5,    2,    1,    3,    1,    3,    1,
    2,    1,    3,    3,    4,    4,    3,    1,    2,    2,
    3,    1,    2,    1,    3,    1,    3,    2,    1,    2,
    1,    3,    4,    1,    3,    1,    2,    1,    2,    1,
    3,    2,    3,    3,    4,    2,    3,    3,    4,    1,
    1,    1,    1,    1,    1,    3,    1,    2,    2,    3,
    0,    4,    0,    5,    1,    2,    3,    4,    1,    2,
    1,    4,    5,    7,    7,    5,    6,    6,    7,    7,
    8,    7,    8,    8,    9,    3,    2,    2,    2,    3,
    1,    3,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    5,    1,    1,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    3,
    1,    3,    3,    3,    3,    1,    3,    3,    1,    3,
    3,    1,    3,    3,    3,    1,    4,    1,    2,    2,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    4,    3,    4,    3,    3,    2,    2,    1,    1,    1,
    3,    6,    1,    3,    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   45,   29,    0,   21,   24,   26,   23,
   46,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   41,   72,   36,    0,    0,    0,   35,   34,    0,
    0,    0,    0,    0,    0,    6,    0,    4,    5,    0,
    2,    0,    0,    0,   82,   80,    0,    0,    0,   10,
    0,   49,    0,   15,   17,   19,    0,    0,    0,    0,
    3,    0,    0,    0,   66,   73,   83,   81,    0,    0,
    0,    0,   47,    0,    0,    0,   11,    0,    0,    7,
   77,    0,    0,    0,   86,    0,    0,  218,  220,  225,
  226,  227,  228,    0,    0,    0,   74,  205,  204,  206,
  207,  208,  209,    0,  167,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  192,  196,    0,  210,
  219,    0,    0,   63,    0,    0,   55,   57,   42,   48,
    0,    0,    0,   58,    0,   52,   91,  153,    0,    9,
    0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  117,  119,    0,   12,    0,    0,  125,  110,
  111,  112,  113,  114,  115,    0,  151,    0,    0,    0,
   88,   90,    0,   76,    0,    0,  202,    0,    0,  199,
  200,    0,    0,    0,  201,   75,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  216,  217,    0,    0,
    0,   64,   69,   67,   43,   61,    0,   53,    0,   94,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  148,    0,  149,    0,  147,    0,    0,    0,
    0,    0,    0,   13,    0,    0,  120,  126,  118,    0,
  106,    0,    0,  102,    0,    0,    0,    0,   85,   87,
    0,    0,    0,    0,   97,    0,  221,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  193,  194,  195,  215,  212,  223,    0,
    0,  214,   62,   59,   92,    0,  155,  156,  157,  158,
  159,  160,  161,  162,  163,  164,  154,    0,  150,    0,
    0,  146,    0,    0,    0,  116,  122,    0,  152,  108,
  101,  104,  107,    0,  103,    0,  203,    0,  197,    0,
    0,  213,  211,   93,   95,    0,    0,    0,    0,    0,
    0,    0,  124,  109,  105,    0,  166,  224,    0,    0,
    0,    0,    0,    0,    0,    0,  136,  222,    0,  129,
    0,    0,  138,    0,    0,    0,    0,    0,    0,  137,
    0,    0,    0,  130,  135,  142,  140,    0,  139,    0,
    0,    0,  134,    0,    0,  144,  143,  141,    0,    0,
    0,  145,
};
short yydgoto[] = {                                      27,
   64,   65,   28,   29,   30,   82,   32,   33,   34,   35,
   47,   36,   37,   52,   53,   38,   39,   72,   73,   74,
  133,  134,  157,  252,   84,   85,  183,  253,  173,  158,
  159,  160,  161,  162,  163,  164,  165,  360,  361,  362,
  104,  136,  221,  166,  167,  138,  106,  107,  108,  109,
  110,  111,  112,  113,  114,  115,  116,  117,  139,  119,
  120,  290,  121,   40,   41,   58,   76,  245,  246,
};
short yysindex[] = {                                   2028,
    0,    0,    0,    0,    0, -107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -27,   49,    0,    0,    0, -104,
  -28, 2341, 2341, 2341,  -34,    0,    5,    0,    0, 2028,
    0,  -77, -244,   47,    0,    0,   49,  -10, 2375,    0,
   60,    0,   64,    0,    0,    0,    5,   68, 2065, 1316,
    0, -244,   91,   -3,    0,    0,    0,    0, 2375, 2375,
 2375, 2222,    0,   10,  979,   68,    0,  -27,  855,    0,
    0,   86,  137,  169,    0, 1677,  161,    0,    0,    0,
    0,    0,    0, 1721, 1721,  900,    0,    0,    0,    0,
    0,    0,    0, 1762,    0,  138,  -53,  -68,  145,  210,
  279, -225,  -51, -130,  157,  345,    0,    0,  -38,    0,
    0,   22, 1762,    0, -244, 2260,    0,    0,    0,    0,
 1762,  267,  151,    0,  979,    0,    0,    0,   87,    0,
   60,    0,  268,  297, 1332,  284,  311,   96, 1270,  340,
  351,  413,    0,    0,  -28,    0, 2341, 1045,    0,    0,
    0,    0,    0,    0,    0,  248,    0, 1940, 1361,   15,
    0,    0,   29,    0, 2295,  900,    0,  182, 1762,    0,
    0,  370,  444,    7,    0,    0, 1762, 1762, 1762, 1762,
 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
 1762, 1762, 1762, 1762, 1762,  197,    0,    0, 1378, 1762,
  221,    0,    0,    0,    0,    0, 1762,    0,   10,    0,
   36, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
 1762, 1762,    0, 1762,    0,  262,    0, 1433,  447,  234,
 1762, 1762, 1270,    0,  406, 1270,    0,    0,    0, 1762,
    0,  493,  498,    0,  443,   29, 2103, 1495,    0,    0,
  504,  506, 1984,   63,    0, 1762,    0,  -68,  180,  145,
  210,  279, -225,  -51,  -51, -130, -130, -130, -130,  157,
  157,  345,  345,    0,    0,    0,    0,    0,    0,  204,
   -7,    0,    0,    0,    0,  495,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  285,    0, 1455,
  286,    0,  511,  344,  372,    0,    0, 1167,    0,    0,
    0,    0,    0,  512,    0,  471,    0,  258,    0, 1762,
 1762,    0,    0,    0,    0,  442, 1542,  352, 1607, 1762,
 1270, 1270,    0,    0,    0,  525,    0,    0,  303, 1270,
  379, 1562, 1644,  389,  403,  310,    0,    0, 1762,    0,
  -61,  449,    0, 1270, 1270,  431, 1270,  437, 1660,    0,
 1270,  517,  518,    0,    0,    0,    0, 1270,    0, 1270,
 1270,  448,    0, 1270, 1270,    0,    0,    0, 1270, 1270,
 1270,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -37,    0,    0,    0,    0,
    0,  -12,   16,  181,    0,    0,  586,    0,    0,  579,
    0, 1825,    0,    0,    0,    0,   21, 1873,    0,    0,
  170,    0,    0,    0,    0,    0,  679,    0,    0,    0,
    0,    0,   37,    0,    0,    0,    0,    0,    0,  177,
  186,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  459,    0,  539,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  405,   26,  799,  112,
  969,  760,  648,  529,  290,  149,    0,    0,  122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  401,    0,    0,    0,    0,    0,    0,  -20,    0,
  429,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   55,    0,    0,    0,    0, 1225,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  460,
    0,    0,  466,    0,    0,    0,    0,    0,    0,    0,
    0,  540,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  488,    0,    0,    0,    0,
    0,    0,    0,  541,    0,    0,    0,  261,    0, 1196,
  217, 1757,  762,  658,  736,  566,  573,  611,  620,  453,
  461,  253,  424,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  950,    0,    0,    0,    0,
  458,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -14,    0,    0,    0,    0,    0,  128,
  465,    0,
};
short yygindex[] = {                                      0,
  522,  480,    0,    0,    0,  569,    0,  890,  905,  213,
    0, 1693,  -15,  528,    0,    0,   11,  543,  -39,   54,
    0,  394,    0,  -54,    0,  433,  439,   -6,  -92, -152,
 2087,    0,    0,    1,    0,    0,    0,  255,    0,    0,
    0,  -99,    0,  156, 2191,  -59,   65,    0,  432,  445,
  450,  446,  451,   56,  346,   79,  249,  214,  -60,    0,
    0,    0,    0,    0,  598,    0,    0,    0,    0,
};
#define YYTABLESIZE 2674
short yytable[] = {                                     118,
  105,  209,   78,   78,   83,   25,   78,  211,  197,  188,
  198,   25,   25,   26,   26,   43,  196,  196,   49,   57,
  196,  196,  196,  196,  196,  177,  196,   14,   14,   14,
   50,   14,  130,  180,  181,  220,  250,  196,  196,  196,
  125,  196,  196,  118,   59,   62,   14,  267,   63,   25,
  250,   26,  210,   78,  168,   16,   16,   16,   80,   16,
   79,   79,  118,  105,   79,  125,  168,  131,  257,  168,
  118,  105,  196,  196,   16,  172,  140,  256,   14,  296,
   68,  193,  194,  168,  168,  333,  130,   66,  168,  156,
   26,  218,  218,  318,  218,   60,  218,  218,  218,  218,
  218,  218,  263,  196,  196,  169,   16,   78,  118,  105,
  127,   79,   69,  218,  218,  218,  218,  218,  168,  258,
   75,  124,   77,  127,  128,  168,  118,   26,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  218,  212,  232,  218,  182,
  168,  123,  172,  169,   57,  172,  118,  105,  198,  198,
  295,   68,  198,  198,  198,  198,  198,  244,  198,  172,
  172,  256,  199,  200,  172,  265,  169,  174,  218,  198,
  198,  198,  198,  198,  198,   42,  189,  213,   48,  189,
   79,  189,  189,  189,  219,  216,  335,  118,  105,  201,
  178,  202,  324,  359,  172,  118,  189,  189,  189,  218,
  189,  189,  175,   51,  198,  198,   54,   54,   54,  373,
   18,   18,   18,  250,   18,   56,   56,   56,   51,  182,
  186,  390,  391,  255,   54,  172,  172,  330,   46,   18,
  189,  189,  189,   56,  332,  198,  198,  331,  274,  275,
  127,  184,  128,  195,  196,   78,  187,  173,   23,   68,
  173,  206,  207,  208,   23,   23,  127,   54,  190,  118,
  347,   18,  189,  189,  173,  173,   56,  280,  281,  173,
   14,  293,  196,  196,  196,  196,  196,  196,  196,  196,
  190,  250,    8,  190,  170,  190,  190,  190,  118,  105,
  236,  169,   23,  191,  169,  250,  249,   23,   16,  173,
  190,  190,  190,   79,  190,  190,  192,  185,  169,  169,
  309,   12,  326,  169,  217,  336,  233,  186,  250,  250,
  186,  184,   18,  186,  184,  168,  234,   20,   21,   22,
  173,  173,  237,  269,  339,  190,  190,  186,  186,  186,
  238,  186,  186,  169,  218,  218,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  291,  218,  218,  218,  218,
  218,  218,  218,  218,  218,  218,  190,  190,   23,  241,
  170,  205,  186,  186,  341,  169,  203,  250,  239,  308,
  242,  204,  128,  311,  264,  250,  314,  315,  222,  223,
  224,  225,  226,  227,  228,  229,  230,  231,  128,  263,
  352,   26,  342,  186,  186,  250,  284,  285,  286,  364,
  172,  172,  250,  372,  198,  198,  198,  198,  198,  198,
  198,  198,  250,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  370,   60,  165,  250,  369,  165,  282,
  283,  189,  189,  189,  189,  189,  189,  189,  189,   60,
  169,  191,  165,  165,  191,  338,  191,  191,  191,   54,
  243,  378,   51,   18,  250,  264,  262,  380,   56,  329,
  250,  191,  191,  191,  266,  191,  191,   51,  389,  287,
  187,  250,  351,  187,  354,  355,  187,  165,  188,   89,
   98,  188,   89,   98,  188,  312,  100,  366,  368,  100,
  187,  187,  187,  292,  187,  187,  191,  191,  188,  188,
  188,  313,  188,  188,  382,  173,  173,  103,   99,  165,
  317,   99,   99,  320,   96,  322,   98,  100,  321,  101,
  276,  277,  278,  279,  327,  187,  187,  191,  191,  328,
  340,  346,  344,  188,  188,  190,  190,  190,  190,  190,
  190,  190,  190,  345,  349,  358,  181,  359,   31,  181,
  169,  371,  181,  375,  384,  385,  187,  187,    1,   84,
   96,   98,  131,  122,  188,  188,  181,  181,  181,  132,
  181,  181,  186,  186,  186,  186,  186,  186,  186,  186,
   54,   55,   56,  184,  214,  142,  184,  260,   31,  184,
  185,  126,  294,  185,  261,  374,  185,  135,  268,  334,
  102,  181,  181,  184,  184,  184,   70,  184,  184,   70,
  185,  185,  185,  270,  185,  185,  272,   61,    0,  271,
    0,    0,  273,   70,   70,    0,   70,  155,  182,    0,
    0,  182,  181,  181,  182,    0,    0,  183,  184,  184,
  183,    0,    0,  183,    0,  185,  185,    0,  182,  182,
  182,    0,  182,  182,    0,    0,    0,  183,  183,  183,
    0,  183,  183,    0,    0,  178,    0,    0,  178,  184,
  184,  178,    0,    0,    0,  179,  185,  185,  179,    0,
    0,  179,    0,  182,  182,  178,  178,    0,   70,    0,
  178,    0,  183,  183,    0,  179,  179,    0,    0,   71,
  179,    0,   71,    0,    0,  155,  191,  191,  191,  191,
  191,  191,  191,  191,  182,  182,   71,   71,    0,   71,
  178,  178,    0,  183,  183,    0,    0,    0,    0,    0,
  179,  179,    0,    0,    0,  187,  187,  187,  187,  187,
  187,  187,  187,  188,  188,  188,  188,  188,  188,  188,
  188,  178,  178,  180,    0,    0,  180,   86,    0,  180,
    0,  179,  179,    0,    0,    0,   87,   88,   89,   90,
   91,   92,   93,  180,  180,   94,   95,  176,  180,  177,
  176,   71,  177,  176,    0,  177,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  176,  176,  177,
  177,    0,  176,    0,  177,    0,    0,    0,  180,  180,
    0,    0,    0,  181,  181,  181,  181,  181,  181,  170,
    0,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  176,  176,  177,  177,  170,  170,    0,  180,
  180,  170,    0,    0,    0,    0,    0,    0,    0,    0,
  184,  184,  184,  184,  184,  184,    0,  185,  185,  185,
  185,  185,  185,  176,  176,  177,  177,  103,    0,    0,
    0,  170,   99,    0,   96,    0,   98,  100,    0,  101,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  153,    0,  182,  182,  182,  182,  182,
  182,    0,    0,  170,  183,  183,  183,  183,  183,  183,
   45,    0,  103,    0,    0,    0,    0,   99,   70,   96,
    0,   98,  100,    0,  101,    0,    0,    0,    0,    0,
    0,   67,    0,   71,  178,  178,  178,  178,   70,   70,
   70,   70,    0,    0,  179,  179,  179,  179,    0,    0,
    0,    0,    0,   71,   71,   71,   71,   79,    0,  154,
  102,    0,  133,    0,    0,   70,    0,  133,    0,  133,
    0,  133,  133,    0,  133,    0,    0,    0,    0,    0,
   71,    0,    0,    0,    0,    0,    0,    0,  133,  174,
    0,  103,  174,    0,    0,   70,   99,    0,   96,    0,
   98,  100,    0,  101,    0,  102,  174,  174,    0,    0,
   71,  174,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  180,  180,  180,  180,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  174,  174,    0,    0,   70,    0,    0,  176,  176,
  177,  177,  133,    0,  133,  133,    0,  103,    0,    0,
   71,    0,   99,    0,   96,    0,   98,  100,    0,  101,
    0,    0,  174,  174,    0,    0,    0,    0,    0,    0,
    0,  135,    0,  153,  102,    0,    0,  170,  170,    0,
    0,    1,    2,    3,    4,  143,    0,    5,  144,    0,
    6,    7,    8,    9,   10,  145,   11,   12,   13,   14,
   15,  146,  147,   16,   17,    0,  148,   86,   18,  149,
  150,   19,  151,   20,   21,   22,   87,  152,   89,   90,
   91,   92,   93,   24,    0,   94,   95,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    0,   79,    9,  247,
  102,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,   86,   18,    0,    0,    0,    0,   20,   21,
   22,   87,   88,   89,   90,   91,   92,   93,   24,  103,
   94,   95,    0,    0,   99,    0,   96,    0,   98,  100,
  133,  101,    0,  133,  133,    0,    0,    0,    0,    0,
  133,    0,    0,    0,    0,  153,  133,  133,    0,    0,
  133,  133,  133,    0,  133,  133,  171,  133,    0,  171,
    0,  133,  133,  133,  133,  133,  133,  133,    0,    0,
  133,  133,    0,  171,  171,    0,    0,  123,  171,    0,
    0,   86,  123,    0,  123,    0,  123,  123,    0,  123,
   87,   88,   89,   90,   91,   92,   93,  174,  174,   94,
   95,    0,    0,  123,    0,    0,    0,    0,  171,   79,
    0,  343,  102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,    0,    0,  143,    0,   99,  144,   96,
    0,   98,  100,    0,  101,  145,    0,    0,    0,    0,
  171,  146,  147,    0,    0,    0,  148,   86,  153,  149,
  150,    0,  151,    0,    0,    0,   87,  152,   89,   90,
   91,   92,   93,    0,    0,   94,   95,  123,  103,  121,
  123,    0,    0,   99,    0,   96,    0,   98,  100,    0,
  101,    0,    0,    0,  103,    0,    0,    0,    0,   99,
    0,   96,    0,   98,  100,    0,  101,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  235,    0,   79,  103,    0,  102,    0,    0,   99,    0,
   96,    0,   98,  100,    0,  101,    0,    0,   97,    0,
  103,    0,    0,    0,    0,   99,    0,   96,  288,   98,
  100,    0,  101,    0,    0,    0,    0,  143,    0,    0,
  144,    0,    0,    0,    0,    0,    0,  145,    0,    0,
    0,  102,    0,  146,  147,    0,    0,    0,  148,   86,
    0,  149,  150,  254,  151,    0,    0,  102,   87,  152,
   89,   90,   91,   92,   93,  103,    0,   94,   95,    0,
   99,    0,   96,    0,   98,  100,    0,  101,    0,    0,
    0,    0,    0,    0,    0,  123,  102,  103,  123,    0,
    0,  310,   99,    0,   96,  123,   98,  100,    0,  101,
    0,  123,  123,  102,  171,  171,  123,  123,    0,  123,
  123,    0,  123,  337,    0,    0,  123,  123,  123,  123,
  123,  123,  123,    0,    0,  123,  123,  103,    0,    0,
  143,    0,   99,  144,   96,    0,   98,  100,    0,  101,
  145,    0,    0,    0,    0,    0,  146,  147,    0,    0,
    0,  148,   86,    0,  149,  150,    0,  151,  102,    0,
    0,   87,  152,   89,   90,   91,   92,   93,    0,    0,
   94,   95,    0,    0,  103,    0,    0,    0,    0,   99,
  102,   96,  350,   98,  100,    0,  101,  325,    0,    0,
    0,    0,    0,    0,  103,    0,    0,    0,   86,   99,
    0,   96,  365,   98,  100,    0,  101,   87,   88,   89,
   90,   91,   92,   93,   86,    0,   94,   95,    0,    0,
  102,    0,    0,   87,   88,   89,   90,   91,   92,   93,
    0,    0,   94,   95,    0,    0,    0,    0,    0,  103,
    0,    0,    0,   86,   99,    0,   96,    0,   98,  100,
    0,  101,   87,   88,   89,   90,   91,   92,   93,    0,
   86,   94,   95,    0,    0,  353,    0,  102,    0,   87,
   88,   89,   90,   91,   92,   93,  103,    0,   94,   95,
    0,   99,    0,   96,  367,   98,  100,  102,  101,    0,
    0,    0,  103,    0,    0,    0,    0,   99,    0,   96,
  381,   98,  100,    0,  101,    0,    0,    0,    0,  103,
    0,    0,    0,    0,   99,   86,  176,   44,   98,  100,
    0,  101,    0,   51,   87,   88,   89,   90,   91,   92,
   93,    0,  102,   94,   95,    0,    0,   86,    0,    0,
    0,    0,    0,    0,    0,    0,   87,   88,   89,   90,
   91,   92,   93,  103,    0,   94,   95,    0,   99,    0,
  179,    0,   98,  100,    0,  101,  132,    0,    0,  102,
  141,    0,    0,    0,  171,    0,    0,   86,    0,    0,
    0,    0,    0,    0,    0,  102,   87,   88,   89,   90,
   91,   92,   93,    0,  103,   94,   95,  175,    0,   99,
  175,   96,  102,   98,  100,    0,  101,    0,    0,    0,
    0,    0,    0,    0,  175,  175,    0,    0,    0,  175,
    0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
    0,    0,    0,   87,   88,   89,   90,   91,   92,   93,
    0,    0,   94,   95,   86,    0,  102,  141,    0,  175,
  175,    0,    0,   87,   88,   89,   90,   91,   92,   93,
   44,    0,   94,   95,   65,   65,   65,    0,   65,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  175,  175,   65,   65,    0,    0,    0,  102,    0,   86,
    0,    0,    0,    0,    0,    0,    0,    0,   87,   88,
   89,   90,   91,   92,   93,    0,    0,   94,   95,    0,
    0,  132,   44,   44,   44,   65,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   86,    0,    0,    0,
   44,   44,    0,    0,    0,   87,   88,   89,   90,   91,
   92,   93,   86,    0,   94,   95,    0,    0,    0,    0,
    0,   87,   88,   89,   90,   91,   92,   93,    0,   86,
   94,   95,    0,   44,    0,    0,    0,    0,   87,   88,
   89,   90,   91,   92,   93,    0,    0,   94,   95,  168,
  251,   26,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   86,    0,    0,    0,    0,    0,    0,
    0,    0,   87,   88,   89,   90,   91,   92,   93,    0,
    0,   94,   95,  263,  251,   26,    0,    0,    0,    0,
  169,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   86,    0,    0,    0,    0,    0,
    0,    0,    0,   87,   88,   89,   90,   91,   92,   93,
    0,    0,   94,   95,    0,  175,  175,   25,    0,   26,
    0,    0,    0,    0,  169,    0,    0,    0,    0,    0,
    0,   65,   65,   65,   65,    0,    0,   65,    0,    0,
   65,   65,   65,   65,   65,    0,   65,   65,   65,   65,
   65,    0,    0,   65,   65,   81,    0,    0,   65,    0,
    0,   65,    0,   65,   65,   65,    0,   65,    0,    0,
    0,    0,    0,   65,    0,    0,    0,    0,    0,   44,
   44,   44,   44,    0,    0,   44,    0,    0,   44,   44,
   44,   44,   44,  323,   44,   44,   44,   44,   44,    0,
    0,   44,   44,    0,    0,    0,   44,    0,    0,   44,
    0,   44,   44,   44,    0,   44,    0,    0,    0,    0,
    0,   44,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    1,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
   22,    0,   23,    0,    0,  240,    0,    0,   24,    0,
    1,    2,    3,    4,  248,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,  137,    0,   18,    0,    0,
   19,    0,   20,   21,   22,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    1,    2,    3,    4,    0,    0,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,   22,    0,
   23,    1,    2,    3,    4,  137,   24,    5,    0,  316,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,  129,    0,   18,    0,
    0,   19,    0,   20,   21,   22,    0,    0,    0,    1,
    2,    3,    4,   24,    0,    5,    0,    0,    6,    7,
    8,    9,   10,    0,   11,   12,   13,   14,   15,    0,
    0,   16,   17,    0,  215,    0,   18,    0,    0,   19,
    0,   20,   21,   22,    0,    0,    0,    0,    0,  289,
    0,   24,    0,    0,  248,    0,    0,    0,    0,    0,
    0,    0,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,    0,    0,    0,    0,  356,  357,    0,
    0,    0,    0,    0,    0,    0,  363,    0,    0,    0,
  319,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  376,  377,    0,  379,    0,    0,    0,  383,    0,    0,
    0,    0,    0,    0,  386,    0,  387,  388,    0,    0,
    0,    0,    0,    0,    0,  392,  248,  248,    0,    2,
    3,    4,    0,    0,    5,    0,  137,    6,    0,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,    0,    0,
   20,   21,   22,    0,    0,    0,    0,    2,    3,    4,
   24,  348,    5,    0,    0,    6,    0,    0,    9,    0,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,    0,    0,   20,   21,
   22,    1,    2,    3,    4,    0,    0,    5,   24,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,   19,    0,   20,   21,   22,    0,    0,    0,    0,
    0,    0,    0,   24,    0,    0,    0,    1,    2,    3,
    4,    0,    0,    5,    0,  259,    6,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,   20,
   21,   22,    2,    3,    4,    0,    0,    5,    0,   24,
    6,    0,    0,    9,    0,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,    0,    0,   20,   21,   22,    0,    0,    0,    0,
    0,    0,    0,   24,
};
short yycheck[] = {                                      60,
   60,   40,   40,   41,   59,   40,   44,   46,   60,   63,
   62,   40,   40,   42,   42,  123,   37,   38,  123,   35,
   41,   42,   43,   44,   45,   86,   47,   40,   41,   42,
   59,   44,   72,   94,   95,  135,   44,   58,   59,   60,
   44,   62,   63,  104,   40,  123,   59,   41,  293,   40,
   44,   42,   91,   91,   40,   40,   41,   42,   58,   44,
   40,   41,  123,  123,   44,   44,   41,   58,   40,   44,
  131,  131,   93,   94,   59,   82,   76,  170,   91,   44,
   44,  307,  308,   58,   59,   93,  126,   41,   63,   79,
   42,   37,   38,  246,   40,   91,   42,   43,   44,   45,
   46,   47,   40,  124,  125,   91,   91,   44,  169,  169,
  125,   91,  123,   59,   60,   61,   62,   63,   93,   91,
   61,  125,   59,   70,   71,   40,  187,   42,  189,  190,
  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,
  201,  202,  203,  204,  205,   91,  125,   61,   94,   96,
  125,   61,   41,   91,  170,   44,  217,  217,   37,   38,
  125,  125,   41,   42,   43,   44,   45,  157,   47,   58,
   59,  264,  303,  304,   63,  182,   91,   41,  124,   58,
   59,   60,   61,   62,   63,  293,   38,  123,  293,   41,
  123,   43,   44,   45,   44,  131,  296,  258,  258,   43,
   40,   45,  257,  265,   93,  266,   58,   59,   60,   59,
   62,   63,   44,   44,   93,   94,   40,   41,   42,  281,
   40,   41,   42,   44,   44,   40,   41,   42,   59,  176,
   93,  384,  385,  169,   58,  124,  125,   58,   26,   59,
  309,   93,   94,   58,   41,  124,  125,   44,  193,  194,
  265,   96,  125,  305,  306,  293,  310,   41,  293,   47,
   44,  300,  301,  302,  293,  293,  281,   91,  124,  330,
  330,   91,  124,  125,   58,   59,   91,  199,  200,   63,
  293,  217,  303,  304,  305,  306,  307,  308,  309,  310,
   38,   44,  123,   41,   82,   43,   44,   45,  359,  359,
  145,   41,  293,   94,   44,   44,   59,  293,  293,   93,
   58,   59,   60,  293,   62,   63,   38,  104,   58,   59,
   59,  273,  258,   63,   58,   41,   59,   38,   44,   44,
   41,  176,  284,   44,  179,  310,   40,  289,  290,  291,
  124,  125,   59,  188,   59,   93,   94,   58,   59,   60,
   40,   62,   63,   93,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  210,  312,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  124,  125,  293,   40,
  168,   37,   93,   94,   41,  125,   42,   44,  293,  234,
   40,   47,  265,  238,  182,   44,  241,  242,  312,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  281,   40,
   59,   42,   41,  124,  125,   44,  203,  204,  205,   41,
  309,  310,   44,  359,  303,  304,  305,  306,  307,  308,
  309,  310,   44,  312,  313,  314,  315,  316,  317,  318,
  319,  320,  321,   41,   44,   41,   44,   59,   44,  201,
  202,  303,  304,  305,  306,  307,  308,  309,  310,   59,
   91,   38,   58,   59,   41,  310,   43,   44,   45,  293,
   58,   41,   44,  293,   44,  263,  295,   41,  293,  266,
   44,   58,   59,   60,   41,   62,   63,   59,   41,  293,
   38,   44,  337,   41,  339,  340,   44,   93,   38,   41,
   41,   41,   44,   44,   44,   59,   41,  352,  353,   44,
   58,   59,   60,  293,   62,   63,   93,   94,   58,   59,
   60,  288,   62,   63,  369,  309,  310,   33,   41,  125,
  125,   44,   38,   41,   40,   93,   42,   43,   41,   45,
  195,  196,  197,  198,   41,   93,   94,  124,  125,   44,
   40,  294,   41,   93,   94,  303,  304,  305,  306,  307,
  308,  309,  310,   93,  123,   41,   38,  265,    0,   41,
  310,  262,   44,  125,   58,   58,  124,  125,    0,   41,
   41,   41,  125,   62,  124,  125,   58,   59,   60,  125,
   62,   63,  303,  304,  305,  306,  307,  308,  309,  310,
   32,   33,   34,   38,  125,   78,   41,  175,   40,   44,
   38,   69,  219,   41,  176,  361,   44,  123,  187,  125,
  126,   93,   94,   58,   59,   60,   41,   62,   63,   44,
   58,   59,   60,  189,   62,   63,  191,   40,   -1,  190,
   -1,   -1,  192,   58,   59,   -1,   61,   79,   38,   -1,
   -1,   41,  124,  125,   44,   -1,   -1,   38,   93,   94,
   41,   -1,   -1,   44,   -1,   93,   94,   -1,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   38,   -1,   -1,   41,  124,
  125,   44,   -1,   -1,   -1,   38,  124,  125,   41,   -1,
   -1,   44,   -1,   93,   94,   58,   59,   -1,  123,   -1,
   63,   -1,   93,   94,   -1,   58,   59,   -1,   -1,   41,
   63,   -1,   44,   -1,   -1,  157,  303,  304,  305,  306,
  307,  308,  309,  310,  124,  125,   58,   59,   -1,   61,
   93,   94,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,  303,  304,  305,  306,  307,
  308,  309,  310,  303,  304,  305,  306,  307,  308,  309,
  310,  124,  125,   38,   -1,   -1,   41,  283,   -1,   44,
   -1,  124,  125,   -1,   -1,   -1,  292,  293,  294,  295,
  296,  297,  298,   58,   59,  301,  302,   38,   63,   38,
   41,  123,   41,   44,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   58,
   59,   -1,   63,   -1,   63,   -1,   -1,   -1,   93,   94,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   93,   94,   58,   59,   -1,  124,
  125,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  305,  306,  307,  308,  309,  310,   -1,  305,  306,  307,
  308,  309,  310,  124,  125,  124,  125,   33,   -1,   -1,
   -1,   93,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   59,   -1,  305,  306,  307,  308,  309,
  310,   -1,   -1,  125,  305,  306,  307,  308,  309,  310,
   26,   -1,   33,   -1,   -1,   -1,   -1,   38,   49,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   47,   -1,   49,  307,  308,  309,  310,   69,   70,
   71,   72,   -1,   -1,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   69,   70,   71,   72,  123,   -1,  125,
  126,   -1,   33,   -1,   -1,   96,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,   41,
   -1,   33,   44,   -1,   -1,  126,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,  126,   58,   59,   -1,   -1,
  126,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   94,   -1,   -1,  176,   -1,   -1,  309,  310,
  309,  310,  123,   -1,  125,  126,   -1,   33,   -1,   -1,
  176,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   59,  126,   -1,   -1,  309,  310,   -1,
   -1,  257,  258,  259,  260,  261,   -1,  263,  264,   -1,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,   -1,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,   -1,  301,  302,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,   -1,  123,  269,  125,
  126,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,   33,
  301,  302,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
  261,   45,   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   59,  277,  278,   -1,   -1,
  281,  282,  283,   -1,  285,  286,   41,  288,   -1,   44,
   -1,  292,  293,  294,  295,  296,  297,  298,   -1,   -1,
  301,  302,   -1,   58,   59,   -1,   -1,   33,   63,   -1,
   -1,  283,   38,   -1,   40,   -1,   42,   43,   -1,   45,
  292,  293,  294,  295,  296,  297,  298,  309,  310,  301,
  302,   -1,   -1,   59,   -1,   -1,   -1,   -1,   93,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  261,   -1,   38,  264,   40,
   -1,   42,   43,   -1,   45,  271,   -1,   -1,   -1,   -1,
  125,  277,  278,   -1,   -1,   -1,  282,  283,   59,  285,
  286,   -1,  288,   -1,   -1,   -1,  292,  293,  294,  295,
  296,  297,  298,   -1,   -1,  301,  302,  123,   33,  125,
  126,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,  123,   33,   -1,  126,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   93,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,
   -1,  126,   -1,  277,  278,   -1,   -1,   -1,  282,  283,
   -1,  285,  286,   93,  288,   -1,   -1,  126,  292,  293,
  294,  295,  296,  297,  298,   33,   -1,  301,  302,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  261,  126,   33,  264,   -1,
   -1,   59,   38,   -1,   40,  271,   42,   43,   -1,   45,
   -1,  277,  278,  126,  309,  310,  282,  283,   -1,  285,
  286,   -1,  288,   59,   -1,   -1,  292,  293,  294,  295,
  296,  297,  298,   -1,   -1,  301,  302,   33,   -1,   -1,
  261,   -1,   38,  264,   40,   -1,   42,   43,   -1,   45,
  271,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,
   -1,  282,  283,   -1,  285,  286,   -1,  288,  126,   -1,
   -1,  292,  293,  294,  295,  296,  297,  298,   -1,   -1,
  301,  302,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
  126,   40,   41,   42,   43,   -1,   45,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,  283,   38,
   -1,   40,   41,   42,   43,   -1,   45,  292,  293,  294,
  295,  296,  297,  298,  283,   -1,  301,  302,   -1,   -1,
  126,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,  283,   38,   -1,   40,   -1,   42,   43,
   -1,   45,  292,  293,  294,  295,  296,  297,  298,   -1,
  283,  301,  302,   -1,   -1,   59,   -1,  126,   -1,  292,
  293,  294,  295,  296,  297,  298,   33,   -1,  301,  302,
   -1,   38,   -1,   40,   41,   42,   43,  126,   45,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,  283,   40,   25,   42,   43,
   -1,   45,   -1,   31,  292,  293,  294,  295,  296,  297,
  298,   -1,  126,  301,  302,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,  294,  295,
  296,  297,  298,   33,   -1,  301,  302,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   74,   -1,   -1,  126,
   78,   -1,   -1,   -1,   82,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  126,  292,  293,  294,  295,
  296,  297,  298,   -1,   33,  301,  302,   41,   -1,   38,
   44,   40,  126,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
   -1,   -1,  301,  302,  283,   -1,  126,  155,   -1,   93,
   94,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
  168,   -1,  301,  302,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   58,   59,   -1,   -1,   -1,  126,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,   -1,   -1,  301,  302,   -1,
   -1,  219,   40,   41,   42,   91,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,  292,  293,  294,  295,  296,
  297,  298,  283,   -1,  301,  302,   -1,   -1,   -1,   -1,
   -1,  292,  293,  294,  295,  296,  297,  298,   -1,  283,
  301,  302,   -1,   91,   -1,   -1,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,   -1,   -1,  301,  302,   40,
   41,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,   -1,
   -1,  301,  302,   40,   41,   42,   -1,   -1,   -1,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  292,  293,  294,  295,  296,  297,  298,
   -1,   -1,  301,  302,   -1,  309,  310,   40,   -1,   42,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   41,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,  291,   -1,  293,   -1,   -1,
   -1,   -1,   -1,  299,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,  267,
  268,  269,  270,   41,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,
   -1,  289,  290,  291,   -1,  293,   -1,   -1,   -1,   -1,
   -1,  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
  291,   -1,  293,   -1,   -1,  149,   -1,   -1,  299,   -1,
  257,  258,  259,  260,  158,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   75,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  299,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,  291,   -1,
  293,  257,  258,  259,  260,  135,  299,  263,   -1,  243,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,  125,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,  291,   -1,   -1,   -1,  257,
  258,  259,  260,  299,   -1,  263,   -1,   -1,  266,  267,
  268,  269,  270,   -1,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,  125,   -1,  284,   -1,   -1,  287,
   -1,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,  209,
   -1,  299,   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  222,  223,  224,  225,  226,  227,  228,  229,
  230,  231,  232,   -1,   -1,   -1,   -1,  341,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  350,   -1,   -1,   -1,
  250,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  364,  365,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,   -1,  378,   -1,  380,  381,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  389,  390,  391,   -1,  258,
  259,  260,   -1,   -1,  263,   -1,  296,  266,   -1,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
  289,  290,  291,   -1,   -1,   -1,   -1,  258,  259,  260,
  299,  331,  263,   -1,   -1,  266,   -1,   -1,  269,   -1,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,  289,  290,
  291,  257,  258,  259,  260,   -1,   -1,  263,  299,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  299,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,  263,   -1,  311,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,  291,  258,  259,  260,   -1,   -1,  263,   -1,  299,
  266,   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  299,
};
#define YYFINAL 27
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 321
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR","_NORETURN",
"_IOREG","IDENTIFIER","STRINGliteral","INTEGERconstant","CHARACTERconstant",
"FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname","ARROW","INC","DEC","LS",
"RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign",
"MODassign","PLUSassign","MINUSassign","LSassign","RSassign","ANDassign",
"XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"$$1 :",
"function.definition : declarator $$1 compound.statement",
"$$2 :",
"function.definition : declaration.specifiers declarator $$2 compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"type.qualifier : _NORETURN",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"$$3 :",
"compound.statement : '{' declaration.list $$3 '}'",
"$$4 :",
"compound.statement : '{' declaration.list $$4 statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"case : _CASE constant.expression ':'",
"case : _CASE constant.expression ':' statement.list",
"case.list : case",
"case.list : case.list case",
"switch.list : case.list",
"switch.list : case.list _DEFAULT ':' statement.list",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' '{' switch.list '}'",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression '=' assignment.expression",
"assignment.expression : unary.expression MULTassign assignment.expression",
"assignment.expression : unary.expression DIVassign assignment.expression",
"assignment.expression : unary.expression MODassign assignment.expression",
"assignment.expression : unary.expression PLUSassign assignment.expression",
"assignment.expression : unary.expression MINUSassign assignment.expression",
"assignment.expression : unary.expression LSassign assignment.expression",
"assignment.expression : unary.expression RSassign assignment.expression",
"assignment.expression : unary.expression ANDassign assignment.expression",
"assignment.expression : unary.expression XORassign assignment.expression",
"assignment.expression : unary.expression ORassign assignment.expression",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"primary.expression : _IOREG '(' INTEGERconstant ',' STRINGliteral ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 627 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1149 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 182 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 5:
#line 183 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 6:
#line 187 "Source/C.y"
{ FuncParams(NewSpecType(TypeINT, NULL), yyvsp[0].pDecl); }
break;
case 7:
#line 187 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 8:
#line 188 "Source/C.y"
{ FuncParams(yyvsp[-1].pDecl, yyvsp[0].pDecl); }
break;
case 9:
#line 188 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 10:
#line 194 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 11:
#line 195 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);   }
break;
case 12:
#line 199 "Source/C.y"
{  yyval.pDecl = yyvsp[0].pDecl;                 }
break;
case 13:
#line 200 "Source/C.y"
{  yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl); }
break;
case 14:
#line 204 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 15:
#line 205 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 16:
#line 206 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 17:
#line 207 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 18:
#line 208 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 19:
#line 209 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 20:
#line 213 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 214 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 215 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 217 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 221 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 222 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 223 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 224 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 225 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 226 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 227 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 35:
#line 231 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 36:
#line 232 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 37:
#line 236 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 38:
#line 237 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 238 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 239 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 41:
#line 240 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNORETURN);      }
break;
case 42:
#line 245 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 43:
#line 246 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 44:
#line 247 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 45:
#line 251 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 46:
#line 252 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 47:
#line 256 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 48:
#line 257 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 49:
#line 262 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                       }
break;
case 50:
#line 263 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl); }
break;
case 51:
#line 267 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 52:
#line 268 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 53:
#line 272 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 54:
#line 276 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 55:
#line 277 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 56:
#line 278 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 57:
#line 279 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 58:
#line 283 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 59:
#line 284 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 60:
#line 288 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 61:
#line 289 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 62:
#line 290 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 63:
#line 294 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 64:
#line 295 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 65:
#line 296 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 66:
#line 300 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 67:
#line 301 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 68:
#line 305 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 69:
#line 306 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 70:
#line 310 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 71:
#line 311 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 72:
#line 315 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 73:
#line 316 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 74:
#line 317 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 75:
#line 318 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 76:
#line 319 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 77:
#line 320 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 78:
#line 325 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 79:
#line 326 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 80:
#line 327 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 81:
#line 328 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 82:
#line 332 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 83:
#line 333 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 84:
#line 337 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 85:
#line 338 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 86:
#line 342 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 87:
#line 343 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 88:
#line 347 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 89:
#line 348 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 90:
#line 349 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 91:
#line 358 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 92:
#line 359 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 93:
#line 360 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 94:
#line 364 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 95:
#line 365 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 96:
#line 369 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 97:
#line 370 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 98:
#line 374 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 99:
#line 375 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 100:
#line 376 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 101:
#line 380 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 102:
#line 381 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 103:
#line 382 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 104:
#line 383 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 105:
#line 384 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 106:
#line 385 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); }
break;
case 107:
#line 386 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 108:
#line 387 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 109:
#line 388 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 110:
#line 392 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 111:
#line 393 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 112:
#line 394 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 113:
#line 395 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 396 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 397 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 116:
#line 401 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement);   }
break;
case 117:
#line 407 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 118:
#line 408 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 119:
#line 412 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 120:
#line 413 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 121:
#line 414 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 122:
#line 414 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   NULL );   UndeclareLocal(yyvsp[-2].pDecl); }
break;
case 123:
#line 415 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 124:
#line 415 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-3].pDecl,   yyvsp[-1].pStatement   );   UndeclareLocal(yyvsp[-3].pDecl); }
break;
case 125:
#line 419 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 126:
#line 420 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 127:
#line 424 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-1].pExpr, NULL); }
break;
case 128:
#line 425 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 129:
#line 429 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement;                          }
break;
case 130:
#line 430 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement);      }
break;
case 131:
#line 434 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 132:
#line 435 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-3].pStatement,StatementMakeCase(NULL, yyvsp[0].pStatement)); }
break;
case 133:
#line 439 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 134:
#line 440 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 135:
#line 441 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-4].pExpr, yyvsp[-1].pStatement);   }
break;
case 136:
#line 445 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 137:
#line 446 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 138:
#line 447 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 139:
#line 448 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 140:
#line 449 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 141:
#line 450 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 142:
#line 451 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 143:
#line 452 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 144:
#line 453 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 145:
#line 454 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 146:
#line 458 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 147:
#line 459 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 148:
#line 460 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 149:
#line 461 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 150:
#line 462 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 151:
#line 466 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 152:
#line 467 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 153:
#line 490 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                 }
break;
case 154:
#line 491 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 155:
#line 492 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMul, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 156:
#line 493 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binDiv, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 157:
#line 494 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMod, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 158:
#line 495 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAdd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 159:
#line 496 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binSub, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 160:
#line 497 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShl, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 161:
#line 498 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShr, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 162:
#line 499 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAnd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 163:
#line 500 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binXor, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 164:
#line 501 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binOr,  yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 165:
#line 505 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 166:
#line 506 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 167:
#line 510 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 168:
#line 514 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 169:
#line 515 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 170:
#line 519 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 171:
#line 520 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 172:
#line 524 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 173:
#line 525 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 174:
#line 529 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 175:
#line 530 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 176:
#line 534 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 177:
#line 535 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 178:
#line 539 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 179:
#line 540 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 180:
#line 541 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 181:
#line 545 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 182:
#line 546 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 183:
#line 547 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 184:
#line 548 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 185:
#line 549 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 186:
#line 553 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 187:
#line 554 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShl,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 188:
#line 555 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 189:
#line 559 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 190:
#line 560 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAdd,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 191:
#line 561 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binSub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 192:
#line 565 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 193:
#line 566 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 194:
#line 567 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binDiv,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 195:
#line 568 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 196:
#line 572 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 197:
#line 573 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 198:
#line 577 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 199:
#line 578 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreInc,yyvsp[0].pExpr);    }
break;
case 200:
#line 579 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreDec,yyvsp[0].pExpr);    }
break;
case 201:
#line 580 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 202:
#line 581 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unSizeOf,yyvsp[0].pExpr);    }
break;
case 203:
#line 582 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 204:
#line 586 "Source/C.y"
{ yyval.nUnaryOp = unAddr;    }
break;
case 205:
#line 587 "Source/C.y"
{ yyval.nUnaryOp = unPtr;     }
break;
case 206:
#line 588 "Source/C.y"
{ yyval.nUnaryOp = unPlus;    }
break;
case 207:
#line 589 "Source/C.y"
{ yyval.nUnaryOp = unMinus;   }
break;
case 208:
#line 590 "Source/C.y"
{ yyval.nUnaryOp = unNeg;     }
break;
case 209:
#line 591 "Source/C.y"
{ yyval.nUnaryOp = unNot;     }
break;
case 210:
#line 595 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 211:
#line 596 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 212:
#line 597 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 213:
#line 598 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 214:
#line 599 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 215:
#line 600 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 216:
#line 601 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostInc,yyvsp[-1].pExpr); }
break;
case 217:
#line 602 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostDec,yyvsp[-1].pExpr); }
break;
case 218:
#line 606 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 219:
#line 607 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 220:
#line 608 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 221:
#line 609 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 222:
#line 610 "Source/C.y"
{ yyval.pExpr = ExprMakeIoReg(yyvsp[-3].Integer, yyvsp[-1].Ident);           }
break;
case 223:
#line 614 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 224:
#line 615 "Source/C.y"
{ yyval.pExpr = ExprConcatArgs(yyvsp[-2].pExpr, yyvsp[0].pExpr);          }
break;
case 225:
#line 619 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 226:
#line 620 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 227:
#line 621 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 228:
#line 622 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2190 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

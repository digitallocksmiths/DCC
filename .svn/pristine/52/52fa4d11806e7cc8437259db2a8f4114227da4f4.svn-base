#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 6 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:                          */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 71 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
/*  TIdExprAssign       nAssign;            // ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define _IOREG 291
#define _NORETURN 292
#define _UNDEFENDED 293
#define IDENTIFIER 294
#define STRINGliteral 295
#define INTEGERconstant 296
#define CHARACTERconstant 297
#define FLOATINGconstant 298
#define ENUMERATIONconstant 299
#define TYPEDEFname 300
#define ARROW 301
#define INC 302
#define DEC 303
#define LS 304
#define RS 305
#define LE 306
#define GE 307
#define EQ 308
#define NE 309
#define ANDAND 310
#define OROR 311
#define ELLIPSIS 312
#define MULTassign 313
#define DIVassign 314
#define MODassign 315
#define PLUSassign 316
#define MINUSassign 317
#define LSassign 318
#define RSassign 319
#define ANDassign 320
#define XORassign 321
#define ORassign 322
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   64,   64,   65,   65,   66,   16,   67,   16,   17,
   17,   23,   23,    6,    6,    6,    6,    6,    6,    7,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
    9,    9,    4,    4,    4,    5,    5,   18,   18,   15,
   15,   14,   14,   19,   20,   20,   20,   20,   21,   21,
   22,   22,   22,    3,    3,    3,    1,    1,    2,    2,
   12,   12,   13,   13,   13,   13,   13,   13,   10,   10,
   10,   10,   11,   11,   24,   24,   25,   25,   26,   26,
   26,   42,   42,   42,   43,   43,   27,   27,   28,   28,
   28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   31,   31,   31,   31,   31,   31,   32,   33,   33,   34,
   34,   68,   34,   69,   34,   30,   30,   38,   38,   39,
   39,   40,   40,   35,   35,   35,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   37,   37,   37,   37,
   37,   44,   44,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   46,   46,   47,   48,   48,
   49,   49,   50,   50,   51,   51,   52,   52,   53,   53,
   53,   54,   54,   54,   54,   54,   55,   55,   55,   56,
   56,   56,   57,   57,   57,   57,   58,   58,   59,   59,
   59,   59,   59,   59,   41,   41,   41,   41,   41,   41,
   60,   60,   60,   60,   60,   60,   60,   60,   61,   61,
   61,   61,   61,   62,   62,   63,   63,   63,   63,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    0,    3,    0,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    4,    5,    2,    1,    1,    1,    2,    1,
    3,    1,    3,    3,    1,    2,    1,    2,    1,    3,
    1,    2,    3,    4,    5,    2,    1,    3,    1,    3,
    1,    2,    1,    3,    3,    4,    4,    3,    1,    2,
    2,    3,    1,    2,    1,    3,    1,    3,    2,    1,
    2,    1,    3,    4,    1,    3,    1,    2,    1,    2,
    1,    3,    2,    3,    3,    4,    2,    3,    3,    4,
    1,    1,    1,    1,    1,    1,    3,    1,    2,    2,
    3,    0,    4,    0,    5,    1,    2,    3,    4,    1,
    2,    1,    4,    5,    7,    7,    5,    6,    6,    7,
    7,    8,    7,    8,    8,    9,    3,    2,    2,    2,
    3,    1,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    5,    1,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    1,    3,    3,    3,    1,    4,    1,    2,
    2,    2,    2,    4,    1,    1,    1,    1,    1,    1,
    1,    4,    3,    4,    3,    3,    2,    2,    1,    1,
    1,    3,    6,    1,    3,    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   46,   29,    0,   21,   24,   26,   23,
   47,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   41,   42,   73,   36,    0,    0,    0,   35,   34,
    0,    0,    0,    0,    0,    0,    6,    0,    4,    5,
    0,    2,    0,    0,    0,   83,   81,    0,    0,    0,
   10,    0,   50,    0,   15,   17,   19,    0,    0,    0,
    0,    3,    0,    0,    0,   67,   74,   84,   82,    0,
    0,    0,    0,   48,    0,    0,    0,   11,    0,    0,
    7,   78,    0,    0,    0,   87,    0,    0,  219,  221,
  226,  227,  228,  229,    0,    0,    0,   75,  206,  205,
  207,  208,  209,  210,    0,  168,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  193,  197,    0,
  211,  220,    0,    0,   64,    0,    0,   56,   58,   43,
   49,    0,    0,    0,   59,    0,   53,   92,  154,    0,
    9,    0,   51,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  118,  120,    0,   12,    0,    0,  126,
  111,  112,  113,  114,  115,  116,    0,  152,    0,    0,
    0,   89,   91,    0,   77,    0,    0,  203,    0,    0,
  200,  201,    0,    0,    0,  202,   76,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  217,  218,    0,
    0,    0,   65,   70,   68,   44,   62,    0,   54,    0,
   95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,    0,  150,    0,  148,    0,    0,
    0,    0,    0,    0,   13,    0,    0,  121,  127,  119,
    0,  107,    0,    0,  103,    0,    0,    0,    0,   86,
   88,    0,    0,    0,    0,   98,    0,  222,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  194,  195,  196,  216,  213,  224,
    0,    0,  215,   63,   60,   93,    0,  156,  157,  158,
  159,  160,  161,  162,  163,  164,  165,  155,    0,  151,
    0,    0,  147,    0,    0,    0,  117,  123,    0,  153,
  109,  102,  105,  108,    0,  104,    0,  204,    0,  198,
    0,    0,  214,  212,   94,   96,    0,    0,    0,    0,
    0,    0,    0,  125,  110,  106,    0,  167,  225,    0,
    0,    0,    0,    0,    0,    0,    0,  137,  223,    0,
  130,    0,    0,  139,    0,    0,    0,    0,    0,    0,
  138,    0,    0,    0,  131,  136,  143,  141,    0,  140,
    0,    0,    0,  135,    0,    0,  145,  144,  142,    0,
    0,    0,  146,
};
short yydgoto[] = {                                      28,
   65,   66,   29,   30,   31,   83,   33,   34,   35,   36,
   48,   37,   38,   53,   54,   39,   40,   73,   74,   75,
  134,  135,  158,  253,   85,   86,  184,  254,  174,  159,
  160,  161,  162,  163,  164,  165,  166,  361,  362,  363,
  105,  137,  222,  167,  168,  139,  107,  108,  109,  110,
  111,  112,  113,  114,  115,  116,  117,  118,  140,  120,
  121,  291,  122,   41,   42,   59,   77,  246,  247,
};
short yysindex[] = {                                   2086,
    0,    0,    0,    0,    0, -103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   35,   23,    0,    0,    0,
  -90,  -28, 2391, 2391, 2391,    1,    0,   -3,    0,    0,
 2086,    0,  -87, -235,   45,    0,    0,   23,  -29, 2427,
    0,   60,    0,   24,    0,    0,    0,   -3,   90, 2124,
 1318,    0, -235,  156,  -34,    0,    0,    0,    0, 2427,
 2427, 2427, 2270,    0,  181, 1336,   90,    0,   35,  837,
    0,    0,   15,  178,  180,    0, 1800,  186,    0,    0,
    0,    0,    0,    0, 1821, 1821,  887,    0,    0,    0,
    0,    0,    0,    0, 1839,    0,  147,  -18,  -16,  184,
  232,  293, -154,  114, -108,  211,  346,    0,    0,  -38,
    0,    0,   36, 1839,    0, -235, 2306,    0,    0,    0,
    0, 1839,  281,   64,    0, 1336,    0,    0,    0,   86,
    0,   60,    0,  288,  327, 1353,  328,  350,   97, 1244,
  369,  378,  361,    0,    0,  -28,    0, 2391,  967,    0,
    0,    0,    0,    0,    0,    0,  166,    0, 1995, 1423,
  -25,    0,    0,  160,    0, 2344,  887,    0,  129, 1839,
    0,    0,   82,  393,   84,    0,    0, 1839, 1839, 1839,
 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
 1839, 1839, 1839, 1839, 1839, 1839,  151,    0,    0, 1440,
 1839,  171,    0,    0,    0,    0,    0, 1839,    0,  181,
    0,   37, 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839,
 1839, 1839, 1839,    0, 1839,    0,  176,    0, 1458,  392,
  195, 1839, 1839, 1244,    0,  344, 1244,    0,    0,    0,
 1839,    0,  452,  462,    0,  411,  160, 2169, 1515,    0,
    0,  464,  472, 2048,  201,    0, 1839,    0,  -16,   32,
  184,  232,  293, -154,  114,  114, -108, -108, -108, -108,
  211,  211,  346,  346,    0,    0,    0,    0,    0,    0,
  432,   14,    0,    0,    0,    0, 1297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  441,    0,
 1620,  262,    0,  498,  446,  447,    0,    0, 1029,    0,
    0,    0,    0,    0,  517,    0,  466,    0,  244,    0,
 1839, 1839,    0,    0,    0,    0,  439, 1642,  273, 1665,
 1839, 1244, 1244,    0,    0,    0,  522,    0,    0,  309,
 1244,  456, 1729, 1747,  284,  468,  313,    0,    0, 1839,
    0, -169,  451,    0, 1244, 1244,  473, 1244,  474, 1782,
    0, 1244,  519,  520,    0,    0,    0,    0, 1244,    0,
 1244, 1244,  499,    0, 1244, 1244,    0,    0,    0, 1244,
 1244, 1244,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -37,    0,    0,    0,
    0,    0,  -12,  190,  539,    0,    0,  770,    0,    0,
  584,    0, 1911,    0,    0,    0,    0,  -35, 1949,    0,
    0,  174,    0,    0,    0,    0,    0,  900,    0,    0,
    0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
   20,  187,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  503,    0,  548,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  637,  840, 1275,
  112,   26,  747,  608,  436,  286,  149,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  291,    0,    0,    0,    0,    0,    0,  -20,
    0,  296,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   55,    0,    0,    0,    0, 1155,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  504,    0,    0,  505,    0,    0,    0,    0,    0,    0,
    0,    0,  558,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  513,    0,    0,    0,
    0,    0,    0,    0,  559,    0,    0,    0,  928,    0,
 1518,  209,  957,  749,  641,  723,  448,  493,  544,  581,
  354,  408,  217,  260,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  938,    0,    0,    0,
    0,  476,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -79,    0,    0,    0,    0,    0,
  -43,  480,    0,
};
short yygindex[] = {                                      0,
  545,  483,    0,    0,    0,  657,    0,  653, 1337,  367,
    0,  169,  -23,  531,    0,    0,  -32,  541,  -24,  106,
    0,  395,    0,  -44,    0,  437,  435,  -31, -152, -197,
 2133,    0,    0,   -8,    0,    0,    0,  258,    0,    0,
    0, -125,    0,  583,  634,  -60,  254,    0,  428,  431,
  433,  434,  440,  157,  265,  196,  179,  430,  -61,    0,
    0,    0,    0,    0,  582,    0,    0,    0,    0,
};
#define YYTABLESIZE 2727
short yytable[] = {                                     119,
  106,  210,   79,   79,   80,   80,   79,  212,   80,  126,
  221,   26,   58,   27,  169,   84,  197,  197,  257,   44,
  197,  197,  197,  197,  197,  178,  197,   14,   14,   14,
   51,   14,   50,  181,  182,   63,   60,  197,  197,  197,
   26,  197,  197,  119,  189,  128,   14,  157,  131,  319,
   81,  173,  211,   79,  169,   80,   27,  251,   64,   55,
   55,   55,  119,  106,   27,  170,  175,   79,  141,  175,
  119,  106,  197,  197,   26,  251,   27,   55,   14,  126,
  297,  129,   78,  175,  175,   67,   69,   61,  175,  331,
  125,  219,  219,   70,  219,  360,  219,  219,  219,  219,
  219,  219,  131,  197,  197,  170,  334,  220,  119,  106,
   55,  374,  257,  219,  219,  219,  219,  219,  175,  175,
   76,  264,  219,   27,  268,  245,  119,  251,  119,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  219,  233,   58,  219,  175,
  175,  266,  173,  194,  195,  173,  119,  106,  199,  199,
  213,  296,  199,  199,  199,  199,  199,   69,  199,  173,
  173,  336,  170,  198,  173,  199,  128,  129,  219,  199,
  199,  199,  199,  199,  199,  128,  190,  391,  392,  190,
   43,  190,  190,  190,   45,  200,  201,  119,  106,  258,
   52,  128,  183,   49,  173,  119,  190,  190,  190,  251,
  190,  190,   80,  325,  199,  199,  124,   52,  175,  251,
   26,  129,   27,  176,  250,  179,   57,   57,   57,   16,
   16,   16,   52,   16,  310,  173,  173,  129,  132,  187,
  264,  190,  190,  133,   57,  199,  199,  142,   16,  174,
  259,  172,  174,  202,  191,  203,   79,  191,   80,  191,
  191,  191,  207,  208,  209,   24,  174,  174,   24,  119,
  348,  174,  190,  190,  191,  191,  191,   57,  191,  191,
   16,   14,  183,  197,  197,  197,  197,  197,  197,  197,
  197,  170,  188,  190,   24,   12,    8,  192,  119,  106,
  192,  174,  192,  192,  192,  251,   18,  191,   24,  191,
  191,   20,   21,   55,   22,   23,  251,  192,  192,  192,
  340,  192,  192,  187,  142,  192,  187,  251,   24,  187,
  193,  353,  174,  174,   61,  175,  175,   45,  218,   52,
  191,  191,  370,  187,  187,  187,  234,  187,  187,   61,
  275,  276,  192,  192,   52,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  235,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  214,  187,  187,
  283,  284,  206,  192,  192,  217,  238,  204,  133,  239,
  240,  188,  205,   47,  188,  281,  282,  188,  223,  224,
  225,  226,  227,  228,  229,  230,  231,  232,  242,  187,
  187,  188,  188,  188,   69,  188,  188,  243,  244,  196,
  197,  173,  173,  256,  263,  199,  199,  199,  199,  199,
  199,  199,  199,  267,  199,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  288,  189,  188,  188,  189,  171,
  313,  189,  190,  190,  190,  190,  190,  190,  190,  190,
  277,  278,  279,  280,  293,  189,  189,  189,  318,  189,
  189,  294,  333,  182,   24,  332,  182,  188,  188,  182,
   57,  337,  314,   16,  251,  185,  342,  343,  185,  251,
  251,  185,  321,  182,  182,  182,  365,  182,  182,  251,
  189,  189,  322,  323,  328,  185,  185,  185,  371,  185,
  185,  251,  327,  379,  381,  329,  251,  251,  174,  174,
  191,  191,  191,  191,  191,  191,  191,  191,  182,  182,
  186,  189,  189,  186,  186,  171,  186,  341,  347,  390,
  185,  185,  251,   90,   99,  101,   90,   99,  101,  265,
  186,  186,  186,  100,  186,  186,  100,  345,  346,  182,
  182,  350,  359,  192,  192,  192,  192,  192,  192,  192,
  192,  185,  185,  360,  372,  376,  385,  386,   18,   18,
   18,  183,   18,    1,  183,  186,  186,  183,   85,  187,
  187,  187,  187,  187,  187,  187,  187,   18,   97,   99,
  132,  183,  183,  183,  133,  183,  183,  123,  215,  143,
  127,  262,  261,  373,  295,  269,  186,  186,  184,  375,
  271,  184,   62,  272,  184,  273,    0,    0,    0,   18,
  265,    0,  274,  285,  286,  287,  183,  183,  184,  184,
  184,    0,  184,  184,    0,  179,    0,    0,  179,    0,
    0,  179,    0,    0,    0,    0,   32,  188,  188,  188,
  188,  188,  188,  188,  188,  179,  179,  183,  183,    0,
  179,    0,    0,  184,  184,    0,    0,  166,  180,  185,
  166,  180,    0,    0,  180,    0,    0,    0,    0,   55,
   56,   57,    0,    0,  166,  166,  330,   32,  180,  180,
  179,  179,   71,  180,  184,  184,    0,    0,    0,  138,
    0,  189,  189,  189,  189,  189,  189,  189,  189,    0,
    0,    0,   71,   71,   71,   71,    0,    0,  237,  166,
    0,  179,  179,  180,  180,    0,  156,    0,    0,    0,
    0,  182,  182,  182,  182,  182,  182,    0,    0,   71,
    0,    0,    0,  185,  185,  185,  185,  185,  185,  185,
  181,  166,  185,  181,  180,  180,  181,    0,    0,  138,
    0,  270,    0,    0,    0,    0,    0,    0,    0,   71,
  181,  181,    0,    0,  177,  181,  178,  177,    0,  178,
  177,    0,  178,  292,    0,    0,    0,    0,  186,  186,
  186,  186,  186,  186,  177,  177,  178,  178,    0,  177,
   71,  178,    0,   71,  156,  181,  181,  309,    0,    0,
    0,  312,    0,    0,  315,  316,    0,   71,   71,   71,
   71,    0,   18,    0,    0,    0,    0,    0,    0,  177,
  177,  178,  178,  290,    0,    0,  181,  181,    0,  183,
  183,  183,  183,  183,  183,    0,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,    0,    0,  104,
  177,  177,  178,  178,  100,    0,   97,    0,   99,  101,
  169,  102,    0,  169,  320,    0,  184,  184,  184,  184,
  184,  184,   71,  339,    0,  154,    0,  169,  169,    0,
    0,    0,  169,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  179,  179,  179,  179,  104,
  352,    0,  355,  356,  100,    0,   97,    0,   99,  101,
  138,  102,  169,    0,    0,  367,  369,    0,    0,    0,
   72,    0,    0,   72,    0,    0,    0,    0,  180,  180,
  180,  180,  383,    0,    0,    0,    0,   72,   72,   80,
   72,  155,  103,    0,  169,  349,    0,    0,  170,    0,
  134,  170,    0,    0,    0,  134,    0,  134,    0,  134,
  134,    0,  134,    0,    0,  170,  170,    0,    0,    0,
  170,    0,    0,    0,    0,    0,  134,  176,    0,  104,
  176,    0,    0,    0,  100,    0,   97,    0,   99,  101,
    0,  102,  103,    0,  176,  176,    0,    0,    0,  176,
  170,    0,   72,    0,    0,  154,    0,    0,    0,    0,
  181,  181,  181,  181,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  176,
  176,    0,  170,    0,    0,    0,  177,  177,  178,  178,
  134,  104,  134,  134,    0,    0,  100,    0,   97,    0,
   99,  101,    0,  102,    0,    0,    0,    0,    0,    0,
  176,  176,    0,    0,    0,    0,    0,  154,    0,   80,
    0,  248,  103,    1,    2,    3,    4,  144,    0,    5,
  145,    0,    6,    7,    8,    9,   10,  146,   11,   12,
   13,   14,   15,  147,  148,   16,   17,    0,  149,   87,
   18,  150,  151,   19,  152,   20,   21,   88,   22,   23,
  153,   90,   91,   92,   93,   94,   25,    0,   95,   96,
    0,    0,    0,    0,    2,    3,    4,    0,    0,    5,
  169,   80,    6,  344,  103,    9,    0,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,   87,
   18,    0,    0,    0,    0,   20,   21,   88,   22,   23,
   89,   90,   91,   92,   93,   94,   25,  124,   95,   96,
    0,    0,  124,    0,  124,    0,  124,  124,  134,  124,
    0,  134,  134,    0,    0,    0,    0,    0,  134,    0,
    0,    0,    0,  124,  134,  134,    0,    0,  134,  134,
  134,    0,  134,  134,    0,  134,    0,  144,  134,    0,
  145,  134,  134,  134,  134,  134,  134,  146,  170,  134,
  134,    0,    0,  147,  148,    0,    0,    0,  149,   87,
    0,  150,  151,    0,  152,    0,    0,   88,    0,    0,
  153,   90,   91,   92,   93,   94,  176,  176,   95,   96,
    0,    0,    0,    0,    0,    0,  104,  124,    0,  122,
  124,  100,    0,   97,    0,   99,  101,    0,  102,  144,
    0,    0,  145,    0,    0,    0,    0,    0,    0,  146,
    0,    0,  154,    0,    0,  147,  148,    0,    0,    0,
  149,   87,    0,  150,  151,  171,  152,    0,  171,   88,
    0,    0,  153,   90,   91,   92,   93,   94,    0,  104,
   95,   96,  171,  171,  100,    0,   97,  171,   99,  101,
    0,  102,    0,    0,    0,    0,    0,    0,    0,    0,
  104,    0,    0,    0,    0,  100,    0,   97,    0,   99,
  101,    0,  102,   46,    0,    0,   80,  171,  104,  103,
    0,    0,    0,  100,    0,   97,    0,   99,  101,    0,
  102,    0,    0,    0,   68,  104,   72,    0,    0,    0,
  100,    0,   97,    0,   99,  101,    0,  102,    0,  171,
    0,    0,    0,    0,    0,    0,   72,   72,   72,   72,
   98,  236,    0,    0,    0,  124,    0,    0,  124,  136,
    0,  335,  103,    0,    0,  124,    0,    0,    0,    0,
    0,  124,  124,   72,    0,    0,  124,  124,    0,  124,
  124,    0,  124,  103,    0,  124,    0,    0,  124,  124,
  124,  124,  124,  124,    0,  104,  124,  124,  136,    0,
  100,  103,   97,   72,   99,  101,    0,  102,    0,    0,
    0,    0,  104,    0,    0,    0,    0,  100,  103,   97,
  289,   99,  101,    0,  102,    0,    0,    0,    0,    0,
  104,    0,    0,    0,    0,  100,    0,   97,    0,   99,
  101,    0,  102,    0,  144,    0,    0,  145,    0,    0,
    0,    0,    0,   72,  146,  255,  311,    0,    0,    0,
  147,  148,    0,    0,    0,  149,   87,    0,  150,  151,
    0,  152,    0,    0,   88,    0,    0,  153,   90,   91,
   92,   93,   94,    0,    0,   95,   96,  104,  103,    0,
    0,    0,  100,    0,   97,    0,   99,  101,  172,  102,
    0,  172,    0,    0,    0,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  172,  172,    0,    0,   87,
  172,    0,    0,  103,  171,  171,    0,   88,    0,    0,
   89,   90,   91,   92,   93,   94,    0,    0,   95,   96,
   87,    0,    0,    0,    0,    0,    0,  326,   88,    0,
  172,   89,   90,   91,   92,   93,   94,    0,   87,   95,
   96,    0,    0,    0,    0,    0,   88,    0,    0,   89,
   90,   91,   92,   93,   94,   87,    0,   95,   96,    0,
  103,    0,  172,   88,    0,    0,   89,   90,   91,   92,
   93,   94,  104,    0,   95,   96,    0,  100,    0,   97,
    0,   99,  101,    0,  102,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  104,    0,    0,    0,  338,  100,
    0,   97,  351,   99,  101,    0,  102,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  104,    0,    0,
    0,    0,  100,    0,   97,   87,   99,  101,    0,  102,
    0,    0,    0,   88,    0,    0,   89,   90,   91,   92,
   93,   94,   87,  354,   95,   96,    0,    0,    0,    0,
   88,    0,    0,   89,   90,   91,   92,   93,   94,    0,
   87,   95,   96,    0,    0,  103,    0,    0,   88,    0,
    0,   89,   90,   91,   92,   93,   94,    0,    0,   95,
   96,  104,    0,    0,    0,    0,  100,  103,   97,  366,
   99,  101,    0,  102,    0,    0,    0,    0,    0,  104,
    0,    0,    0,    0,  100,    0,   97,  368,   99,  101,
  103,  102,    0,    0,    0,    0,    0,   87,    0,    0,
    0,    0,    0,    0,    0,   88,    0,    0,   89,   90,
   91,   92,   93,   94,  104,    0,   95,   96,    0,  100,
    0,   97,  382,   99,  101,    0,  102,  172,  172,    0,
    0,    0,  104,    0,    0,    0,    0,  100,    0,  177,
    0,   99,  101,    0,  102,    0,    0,    0,    0,    0,
    0,    0,    0,  104,  103,    0,    0,    0,  100,    0,
  180,    0,   99,  101,    0,  102,    0,    0,    0,    0,
    0,  104,  103,    0,    0,    0,  100,    0,   97,    0,
   99,  101,    0,  102,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   87,    0,    0,    0,    0,  103,    0,    0,
   88,    0,    0,   89,   90,   91,   92,   93,   94,    0,
    0,   95,   96,    0,   87,  103,    0,    0,    0,    0,
    0,    0,   88,    0,    0,   89,   90,   91,   92,   93,
   94,    0,    0,   95,   96,    0,  103,   87,    0,    0,
   66,   66,   66,    0,   66,   88,    0,    0,   89,   90,
   91,   92,   93,   94,  103,    0,   95,   96,   66,   66,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   45,   45,
   45,    0,   45,    0,    0,    0,    0,    0,    0,    0,
    0,   66,    0,    0,    0,    0,   45,   45,    0,    0,
    0,   87,    0,    0,    0,    0,    0,    0,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,    0,   87,
   95,   96,    0,    0,  169,  252,   27,   88,    0,   45,
   89,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,   88,    0,    0,   89,   90,   91,   92,   93,
   94,    0,   87,   95,   96,  170,    0,  264,  252,   27,
   88,    0,    0,   89,   90,   91,   92,   93,   94,    0,
    0,   95,   96,   87,    0,    0,    0,    0,    0,    0,
    0,   88,    0,    0,   89,   90,   91,   92,   93,   94,
    0,   87,   95,   96,    0,   26,    0,   27,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,  170,    0,
   95,   96,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   82,    0,    0,   66,   66,   66,
   66,    0,    0,   66,    0,    0,   66,   66,   66,   66,
   66,    0,   66,   66,   66,   66,   66,    0,    0,   66,
   66,    0,    0,    0,   66,    0,    0,   66,    0,   66,
   66,    0,   66,   66,   66,   45,   45,   45,   45,  324,
   66,   45,    0,    0,   45,   45,   45,   45,   45,    0,
   45,   45,   45,   45,   45,    0,    0,   45,   45,    0,
    0,    0,   45,    0,    0,   45,    0,   45,   45,    0,
   45,   45,   45,    0,    0,    0,    0,    0,   45,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,   19,  241,   20,   21,    0,   22,   23,   24,    0,
    0,  249,    0,    0,   25,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,    2,    3,    4,    0,    0,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,    0,   22,
   23,    0,    1,    2,    3,    4,    0,   25,    5,    0,
    0,    6,    7,    8,    9,   10,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,   19,    0,   20,   21,  317,   22,   23,   24,
    1,    2,    3,    4,    0,   25,    5,    0,    0,    6,
    7,    8,    9,   10,  130,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    0,   22,   23,    0,    0,    0,
    0,    0,    0,   25,    0,    1,    2,    3,    4,    0,
  216,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,  249,   18,    0,    0,   19,    0,   20,   21,    0,
   22,   23,    0,    0,    0,    0,    0,    0,   25,    0,
    0,    0,    0,    0,  357,  358,    0,    0,    0,    0,
    0,    0,    0,  364,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  377,  378,    0,
  380,    0,    0,    0,  384,    0,    0,    0,    0,    0,
    0,  387,    0,  388,  389,    0,    0,    0,    0,    0,
    0,    0,  393,  249,  249,    0,    0,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    0,    0,    9,    0,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,    0,    0,   20,   21,
    0,   22,   23,    2,    3,    4,    0,    0,    5,   25,
    0,    6,    0,    0,    9,    0,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,    0,    0,   20,   21,    0,   22,   23,    0,
    1,    2,    3,    4,    0,   25,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    0,   22,   23,    0,    0,    0,
    0,    0,    0,   25,    0,    0,    0,    1,    2,    3,
    4,    0,    0,    5,    0,  260,    6,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,   20,
   21,    0,   22,   23,    2,    3,    4,    0,    0,    5,
   25,    0,    6,    0,    0,    9,    0,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,    0,
   18,    0,    0,    0,    0,   20,   21,    0,   22,   23,
    0,    0,    0,    0,    0,    0,   25,
};
short yycheck[] = {                                      61,
   61,   40,   40,   41,   40,   41,   44,   46,   44,   44,
  136,   40,   36,   42,   40,   60,   37,   38,  171,  123,
   41,   42,   43,   44,   45,   87,   47,   40,   41,   42,
   59,   44,  123,   95,   96,  123,   40,   58,   59,   60,
   40,   62,   63,  105,   63,  125,   59,   80,   73,  247,
   59,   83,   91,   91,   40,   91,   42,   44,  294,   40,
   41,   42,  124,  124,   42,   91,   41,   44,   77,   44,
  132,  132,   93,   94,   40,   44,   42,   58,   91,   44,
   44,  125,   59,   58,   59,   41,   44,   91,   63,   58,
  125,   37,   38,  123,   40,  265,   42,   43,   44,   45,
   46,   47,  127,  124,  125,   91,   93,   44,  170,  170,
   91,  281,  265,   59,   60,   61,   62,   63,   93,   94,
   61,   40,   59,   42,   41,  158,  188,   44,  190,  191,
  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
  202,  203,  204,  205,  206,   91,   61,  171,   94,  124,
  125,  183,   41,  308,  309,   44,  218,  218,   37,   38,
  125,  125,   41,   42,   43,   44,   45,  125,   47,   58,
   59,  297,   91,   60,   63,   62,   71,   72,  124,   58,
   59,   60,   61,   62,   63,  265,   38,  385,  386,   41,
  294,   43,   44,   45,   26,  304,  305,  259,  259,   40,
   32,  281,   97,  294,   93,  267,   58,   59,   60,   44,
   62,   63,  123,  258,   93,   94,   61,   44,   41,   44,
   40,  265,   42,   44,   59,   40,   40,   41,   42,   40,
   41,   42,   59,   44,   59,  124,  125,  281,   58,   93,
   40,   93,   94,   75,   58,  124,  125,   79,   59,   41,
   91,   83,   44,   43,   38,   45,  294,   41,  294,   43,
   44,   45,  301,  302,  303,  294,   58,   59,  294,  331,
  331,   63,  124,  125,   58,   59,   60,   91,   62,   63,
   91,  294,  177,  304,  305,  306,  307,  308,  309,  310,
  311,   91,  311,  310,  294,  273,  123,   38,  360,  360,
   41,   93,   43,   44,   45,   44,  284,  124,  294,   93,
   94,  289,  290,  294,  292,  293,   44,   58,   59,   60,
   59,   62,   63,   38,  156,   94,   41,   44,  294,   44,
   38,   59,  124,  125,   44,  310,  311,  169,   58,   44,
  124,  125,   59,   58,   59,   60,   59,   62,   63,   59,
  194,  195,   93,   94,   59,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,   40,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  124,   93,   94,
  202,  203,   37,  124,  125,  132,   59,   42,  220,   40,
  294,   38,   47,   27,   41,  200,  201,   44,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   40,  124,
  125,   58,   59,   60,   48,   62,   63,   40,   58,  306,
  307,  310,  311,  170,  296,  304,  305,  306,  307,  308,
  309,  310,  311,   41,  313,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  294,   38,   93,   94,   41,   83,
   59,   44,  304,  305,  306,  307,  308,  309,  310,  311,
  196,  197,  198,  199,  294,   58,   59,   60,  125,   62,
   63,  218,   41,   38,  294,   44,   41,  124,  125,   44,
  294,   41,  288,  294,   44,   38,   41,   41,   41,   44,
   44,   44,   41,   58,   59,   60,   41,   62,   63,   44,
   93,   94,   41,   93,   41,   58,   59,   60,   41,   62,
   63,   44,  259,   41,   41,   44,   44,   44,  310,  311,
  304,  305,  306,  307,  308,  309,  310,  311,   93,   94,
   38,  124,  125,   41,  105,  169,   44,   40,  295,   41,
   93,   94,   44,   41,   41,   41,   44,   44,   44,  183,
   58,   59,   60,   41,   62,   63,   44,   41,   93,  124,
  125,  123,   41,  304,  305,  306,  307,  308,  309,  310,
  311,  124,  125,  265,  262,  125,   58,   58,   40,   41,
   42,   38,   44,    0,   41,   93,   94,   44,   41,  304,
  305,  306,  307,  308,  309,  310,  311,   59,   41,   41,
  125,   58,   59,   60,  125,   62,   63,   63,  126,   79,
   70,  177,  176,  360,  220,  188,  124,  125,   38,  362,
  190,   41,   41,  191,   44,  192,   -1,   -1,   -1,   91,
  264,   -1,  193,  204,  205,  206,   93,   94,   58,   59,
   60,   -1,   62,   63,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,    0,  304,  305,  306,
  307,  308,  309,  310,  311,   58,   59,  124,  125,   -1,
   63,   -1,   -1,   93,   94,   -1,   -1,   41,   38,   97,
   44,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   33,
   34,   35,   -1,   -1,   58,   59,  267,   41,   58,   59,
   93,   94,   50,   63,  124,  125,   -1,   -1,   -1,   76,
   -1,  304,  305,  306,  307,  308,  309,  310,  311,   -1,
   -1,   -1,   70,   71,   72,   73,   -1,   -1,  146,   93,
   -1,  124,  125,   93,   94,   -1,   80,   -1,   -1,   -1,
   -1,  306,  307,  308,  309,  310,  311,   -1,   -1,   97,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  177,
   38,  125,  180,   41,  124,  125,   44,   -1,   -1,  136,
   -1,  189,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  127,
   58,   59,   -1,   -1,   38,   63,   38,   41,   -1,   41,
   44,   -1,   44,  211,   -1,   -1,   -1,   -1,  306,  307,
  308,  309,  310,  311,   58,   59,   58,   59,   -1,   63,
   41,   63,   -1,   44,  158,   93,   94,  235,   -1,   -1,
   -1,  239,   -1,   -1,  242,  243,   -1,   58,   59,  177,
   61,   -1,  294,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   93,   94,  210,   -1,   -1,  124,  125,   -1,  306,
  307,  308,  309,  310,  311,   -1,  223,  224,  225,  226,
  227,  228,  229,  230,  231,  232,  233,   -1,   -1,   33,
  124,  125,  124,  125,   38,   -1,   40,   -1,   42,   43,
   41,   45,   -1,   44,  251,   -1,  306,  307,  308,  309,
  310,  311,  123,  311,   -1,   59,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  308,  309,  310,  311,   33,
  338,   -1,  340,  341,   38,   -1,   40,   -1,   42,   43,
  297,   45,   93,   -1,   -1,  353,  354,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,  308,  309,
  310,  311,  370,   -1,   -1,   -1,   -1,   58,   59,  123,
   61,  125,  126,   -1,  125,  332,   -1,   -1,   41,   -1,
   33,   44,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   59,   41,   -1,   33,
   44,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,  126,   -1,   58,   59,   -1,   -1,   -1,   63,
   93,   -1,  123,   -1,   -1,   59,   -1,   -1,   -1,   -1,
  308,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,  125,   -1,   -1,   -1,  310,  311,  310,  311,
  123,   33,  125,  126,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   59,   -1,  123,
   -1,  125,  126,  257,  258,  259,  260,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,   -1,  282,  283,
  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,   -1,  302,  303,
   -1,   -1,   -1,   -1,  258,  259,  260,   -1,   -1,  263,
  311,  123,  266,  125,  126,  269,   -1,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,  283,
  284,   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,   33,  302,  303,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,  261,   45,
   -1,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   -1,   -1,   59,  277,  278,   -1,   -1,  281,  282,
  283,   -1,  285,  286,   -1,  288,   -1,  261,  291,   -1,
  264,  294,  295,  296,  297,  298,  299,  271,  311,  302,
  303,   -1,   -1,  277,  278,   -1,   -1,   -1,  282,  283,
   -1,  285,  286,   -1,  288,   -1,   -1,  291,   -1,   -1,
  294,  295,  296,  297,  298,  299,  310,  311,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   33,  123,   -1,  125,
  126,   38,   -1,   40,   -1,   42,   43,   -1,   45,  261,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   -1,   -1,   59,   -1,   -1,  277,  278,   -1,   -1,   -1,
  282,  283,   -1,  285,  286,   41,  288,   -1,   44,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,   -1,   33,
  302,  303,   58,   59,   38,   -1,   40,   63,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   27,   -1,   -1,  123,   93,   33,  126,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   48,   33,   50,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   70,   71,   72,   73,
   93,   59,   -1,   -1,   -1,  261,   -1,   -1,  264,  123,
   -1,  125,  126,   -1,   -1,  271,   -1,   -1,   -1,   -1,
   -1,  277,  278,   97,   -1,   -1,  282,  283,   -1,  285,
  286,   -1,  288,  126,   -1,  291,   -1,   -1,  294,  295,
  296,  297,  298,  299,   -1,   33,  302,  303,  123,   -1,
   38,  126,   40,  127,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,  126,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,  261,   -1,   -1,  264,   -1,   -1,
   -1,   -1,   -1,  177,  271,   93,   59,   -1,   -1,   -1,
  277,  278,   -1,   -1,   -1,  282,  283,   -1,  285,  286,
   -1,  288,   -1,   -1,  291,   -1,   -1,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,   33,  126,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   41,   45,
   -1,   44,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,  283,
   63,   -1,   -1,  126,  310,  311,   -1,  291,   -1,   -1,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   93,  291,   -1,
   93,  294,  295,  296,  297,  298,  299,   -1,  283,  302,
  303,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,  294,
  295,  296,  297,  298,  299,  283,   -1,  302,  303,   -1,
  126,   -1,  125,  291,   -1,   -1,  294,  295,  296,  297,
  298,  299,   33,   -1,  302,  303,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   59,   38,
   -1,   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,  283,   42,   43,   -1,   45,
   -1,   -1,   -1,  291,   -1,   -1,  294,  295,  296,  297,
  298,  299,  283,   59,  302,  303,   -1,   -1,   -1,   -1,
  291,   -1,   -1,  294,  295,  296,  297,  298,  299,   -1,
  283,  302,  303,   -1,   -1,  126,   -1,   -1,  291,   -1,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,   33,   -1,   -1,   -1,   -1,   38,  126,   40,   41,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   43,
  126,   45,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,  294,  295,
  296,  297,  298,  299,   33,   -1,  302,  303,   -1,   38,
   -1,   40,   41,   42,   43,   -1,   45,  310,  311,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   33,  126,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   33,  126,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  283,   -1,   -1,   -1,   -1,  126,   -1,   -1,
  291,   -1,   -1,  294,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,   -1,  283,  126,   -1,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,  294,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,   -1,  126,  283,   -1,   -1,
   40,   41,   42,   -1,   44,  291,   -1,   -1,  294,  295,
  296,  297,  298,  299,  126,   -1,  302,  303,   58,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,   -1,  283,
  302,  303,   -1,   -1,   40,   41,   42,  291,   -1,   91,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,  294,  295,  296,  297,  298,
  299,   -1,  283,  302,  303,   91,   -1,   40,   41,   42,
  291,   -1,   -1,  294,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,  283,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,   -1,   -1,  294,  295,  296,  297,  298,  299,
   -1,  283,  302,  303,   -1,   40,   -1,   42,   -1,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,   91,   -1,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,   -1,  292,  293,  294,  257,  258,  259,  260,   41,
  300,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,
  292,  293,  294,   -1,   -1,   -1,   -1,   -1,  300,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,  150,  289,  290,   -1,  292,  293,  294,   -1,
   -1,  159,   -1,   -1,  300,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,  292,
  293,   -1,  257,  258,  259,  260,   -1,  300,  263,   -1,
   -1,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,   -1,  289,  290,  244,  292,  293,  294,
  257,  258,  259,  260,   -1,  300,  263,   -1,   -1,  266,
  267,  268,  269,  270,  125,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,   -1,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,  300,   -1,  257,  258,  259,  260,   -1,
  125,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,  319,  284,   -1,   -1,  287,   -1,  289,  290,   -1,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,
   -1,   -1,   -1,   -1,  342,  343,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,  366,   -1,
  368,   -1,   -1,   -1,  372,   -1,   -1,   -1,   -1,   -1,
   -1,  379,   -1,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  390,  391,  392,   -1,   -1,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,  269,   -1,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,  289,  290,
   -1,  292,  293,  258,  259,  260,   -1,   -1,  263,  300,
   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  292,  293,   -1,
  257,  258,  259,  260,   -1,  300,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,   -1,  292,  293,   -1,   -1,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,  263,   -1,  312,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,   -1,  292,  293,  258,  259,  260,   -1,   -1,  263,
  300,   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,  300,
};
#define YYFINAL 28
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 322
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR","_IOREG",
"_NORETURN","_UNDEFENDED","IDENTIFIER","STRINGliteral","INTEGERconstant",
"CHARACTERconstant","FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname",
"ARROW","INC","DEC","LS","RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS",
"MULTassign","DIVassign","MODassign","PLUSassign","MINUSassign","LSassign",
"RSassign","ANDassign","XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"$$1 :",
"function.definition : declarator $$1 compound.statement",
"$$2 :",
"function.definition : declaration.specifiers declarator $$2 compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"type.qualifier : _NORETURN",
"type.qualifier : _UNDEFENDED",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"$$3 :",
"compound.statement : '{' declaration.list $$3 '}'",
"$$4 :",
"compound.statement : '{' declaration.list $$4 statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"case : _CASE constant.expression ':'",
"case : _CASE constant.expression ':' statement.list",
"case.list : case",
"case.list : case.list case",
"switch.list : case.list",
"switch.list : case.list _DEFAULT ':' statement.list",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' '{' switch.list '}'",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression '=' assignment.expression",
"assignment.expression : unary.expression MULTassign assignment.expression",
"assignment.expression : unary.expression DIVassign assignment.expression",
"assignment.expression : unary.expression MODassign assignment.expression",
"assignment.expression : unary.expression PLUSassign assignment.expression",
"assignment.expression : unary.expression MINUSassign assignment.expression",
"assignment.expression : unary.expression LSassign assignment.expression",
"assignment.expression : unary.expression RSassign assignment.expression",
"assignment.expression : unary.expression ANDassign assignment.expression",
"assignment.expression : unary.expression XORassign assignment.expression",
"assignment.expression : unary.expression ORassign assignment.expression",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"primary.expression : _IOREG '(' INTEGERconstant ',' STRINGliteral ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 631 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1161 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 185 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 5:
#line 186 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 6:
#line 190 "Source/C.y"
{ FuncParams(NewSpecType(TypeINT, NULL), yyvsp[0].pDecl); }
break;
case 7:
#line 190 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 8:
#line 191 "Source/C.y"
{ FuncParams(yyvsp[-1].pDecl, yyvsp[0].pDecl); }
break;
case 9:
#line 191 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 10:
#line 197 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 11:
#line 198 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);   }
break;
case 12:
#line 202 "Source/C.y"
{  yyval.pDecl = yyvsp[0].pDecl;                 }
break;
case 13:
#line 203 "Source/C.y"
{  yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl); }
break;
case 14:
#line 207 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 15:
#line 208 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 16:
#line 209 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 17:
#line 210 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 18:
#line 211 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 19:
#line 212 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 20:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 217 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 218 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 219 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 220 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 224 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 225 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 226 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 227 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 231 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 232 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 233 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 35:
#line 234 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 36:
#line 235 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 37:
#line 239 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 38:
#line 240 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 241 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 242 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 41:
#line 243 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNORETURN);      }
break;
case 42:
#line 244 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualUNDEFENDEF);    }
break;
case 43:
#line 249 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 44:
#line 250 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 45:
#line 251 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 46:
#line 255 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 47:
#line 256 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 48:
#line 260 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 49:
#line 261 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 50:
#line 266 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                       }
break;
case 51:
#line 267 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl); }
break;
case 52:
#line 271 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 53:
#line 272 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 54:
#line 276 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 55:
#line 280 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 56:
#line 281 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 57:
#line 282 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 58:
#line 283 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 59:
#line 287 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 60:
#line 288 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 61:
#line 292 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 62:
#line 293 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 63:
#line 294 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 64:
#line 298 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 65:
#line 299 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 66:
#line 300 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 67:
#line 304 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 68:
#line 305 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 69:
#line 309 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 70:
#line 310 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 71:
#line 314 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 72:
#line 315 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 73:
#line 319 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 74:
#line 320 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 75:
#line 321 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 76:
#line 322 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 77:
#line 323 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 78:
#line 324 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 79:
#line 329 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 80:
#line 330 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 81:
#line 331 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 82:
#line 332 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 83:
#line 336 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 84:
#line 337 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 85:
#line 341 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 86:
#line 342 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 87:
#line 346 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 88:
#line 347 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 89:
#line 351 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 90:
#line 352 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 91:
#line 353 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 92:
#line 362 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 93:
#line 363 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 94:
#line 364 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 95:
#line 368 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 96:
#line 369 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 97:
#line 373 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 98:
#line 374 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 99:
#line 378 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 100:
#line 379 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 101:
#line 380 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 102:
#line 384 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 103:
#line 385 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 104:
#line 386 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 105:
#line 387 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 106:
#line 388 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 107:
#line 389 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); }
break;
case 108:
#line 390 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 109:
#line 391 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 110:
#line 392 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 111:
#line 396 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 112:
#line 397 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 113:
#line 398 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 399 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 400 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 116:
#line 401 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 117:
#line 405 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement);   }
break;
case 118:
#line 411 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 119:
#line 412 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 120:
#line 416 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 121:
#line 417 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 122:
#line 418 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 123:
#line 418 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   NULL );   UndeclareLocal(yyvsp[-2].pDecl); }
break;
case 124:
#line 419 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 125:
#line 419 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-3].pDecl,   yyvsp[-1].pStatement   );   UndeclareLocal(yyvsp[-3].pDecl); }
break;
case 126:
#line 423 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 127:
#line 424 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 128:
#line 428 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-1].pExpr, NULL); }
break;
case 129:
#line 429 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 130:
#line 433 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement;                          }
break;
case 131:
#line 434 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement);      }
break;
case 132:
#line 438 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 133:
#line 439 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-3].pStatement,StatementMakeCase(NULL, yyvsp[0].pStatement)); }
break;
case 134:
#line 443 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 135:
#line 444 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 136:
#line 445 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-4].pExpr, yyvsp[-1].pStatement);   }
break;
case 137:
#line 449 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 138:
#line 450 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 139:
#line 451 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 140:
#line 452 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 141:
#line 453 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 142:
#line 454 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 143:
#line 455 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 144:
#line 456 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 145:
#line 457 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 146:
#line 458 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 147:
#line 462 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 148:
#line 463 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 149:
#line 464 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 150:
#line 465 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 151:
#line 466 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 152:
#line 470 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 153:
#line 471 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 154:
#line 494 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                 }
break;
case 155:
#line 495 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 156:
#line 496 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMul, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 157:
#line 497 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binDiv, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 158:
#line 498 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMod, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 159:
#line 499 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAdd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 160:
#line 500 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binSub, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 161:
#line 501 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShl, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 162:
#line 502 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShr, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 163:
#line 503 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAnd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 164:
#line 504 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binXor, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 165:
#line 505 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binOr,  yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 166:
#line 509 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 167:
#line 510 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 168:
#line 514 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 169:
#line 518 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 170:
#line 519 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 171:
#line 523 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 172:
#line 524 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 173:
#line 528 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 174:
#line 529 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 175:
#line 533 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 176:
#line 534 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 177:
#line 538 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 178:
#line 539 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 179:
#line 543 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 180:
#line 544 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 181:
#line 545 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 182:
#line 549 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 183:
#line 550 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 184:
#line 551 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 185:
#line 552 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 186:
#line 553 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 187:
#line 557 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 188:
#line 558 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShl,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 189:
#line 559 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 190:
#line 563 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 191:
#line 564 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAdd,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 192:
#line 565 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binSub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 193:
#line 569 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 194:
#line 570 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 195:
#line 571 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binDiv,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 196:
#line 572 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 197:
#line 576 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 198:
#line 577 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 199:
#line 581 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 200:
#line 582 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreInc,yyvsp[0].pExpr);    }
break;
case 201:
#line 583 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreDec,yyvsp[0].pExpr);    }
break;
case 202:
#line 584 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 203:
#line 585 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unSizeOf,yyvsp[0].pExpr);    }
break;
case 204:
#line 586 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 205:
#line 590 "Source/C.y"
{ yyval.nUnaryOp = unAddr;    }
break;
case 206:
#line 591 "Source/C.y"
{ yyval.nUnaryOp = unPtr;     }
break;
case 207:
#line 592 "Source/C.y"
{ yyval.nUnaryOp = unPlus;    }
break;
case 208:
#line 593 "Source/C.y"
{ yyval.nUnaryOp = unMinus;   }
break;
case 209:
#line 594 "Source/C.y"
{ yyval.nUnaryOp = unNeg;     }
break;
case 210:
#line 595 "Source/C.y"
{ yyval.nUnaryOp = unNot;     }
break;
case 211:
#line 599 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 212:
#line 600 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 213:
#line 601 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 214:
#line 602 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 215:
#line 603 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 216:
#line 604 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 217:
#line 605 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostInc,yyvsp[-1].pExpr); }
break;
case 218:
#line 606 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostDec,yyvsp[-1].pExpr); }
break;
case 219:
#line 610 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 220:
#line 611 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 221:
#line 612 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 222:
#line 613 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 223:
#line 614 "Source/C.y"
{ yyval.pExpr = ExprMakeIoReg(yyvsp[-3].Integer, yyvsp[-1].Ident);           }
break;
case 224:
#line 618 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 225:
#line 619 "Source/C.y"
{ yyval.pExpr = ExprConcatArgs(yyvsp[-2].pExpr, yyvsp[0].pExpr);          }
break;
case 226:
#line 623 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 227:
#line 624 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 228:
#line 625 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 229:
#line 626 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2206 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

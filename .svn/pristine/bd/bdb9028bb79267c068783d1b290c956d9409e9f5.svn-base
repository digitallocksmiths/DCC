#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 6 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:                          */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 67 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
/*  TIdExprAssign       nAssign;            // ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define IDENTIFIER 291
#define STRINGliteral 292
#define INTEGERconstant 293
#define CHARACTERconstant 294
#define FLOATINGconstant 295
#define ENUMERATIONconstant 296
#define TYPEDEFname 297
#define ARROW 298
#define INC 299
#define DEC 300
#define LS 301
#define RS 302
#define LE 303
#define GE 304
#define EQ 305
#define NE 306
#define ANDAND 307
#define OROR 308
#define ELLIPSIS 309
#define MULTassign 310
#define DIVassign 311
#define MODassign 312
#define PLUSassign 313
#define MINUSassign 314
#define LSassign 315
#define RSassign 316
#define ANDassign 317
#define XORassign 318
#define ORassign 319
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   65,   65,   66,   66,   16,   67,   16,   16,   16,
   17,   17,   23,   23,    6,    6,    6,    6,    6,    6,
    7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    8,    9,    9,    9,
    9,    4,    4,    4,    5,    5,   18,   18,   15,   15,
   14,   14,   19,   20,   20,   20,   20,   21,   21,   22,
   22,   22,    3,    3,    3,    1,    1,    2,    2,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   10,   10,
   10,   10,   11,   11,   24,   24,   25,   25,   26,   26,
   26,   27,   27,   43,   43,   43,   44,   44,   28,   28,
   29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   32,   32,   32,   32,   32,   32,   33,   34,
   34,   35,   35,   68,   35,   69,   35,   31,   31,   39,
   39,   40,   40,   41,   41,   36,   36,   36,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   38,   38,
   38,   38,   38,   45,   45,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   47,   47,   48,
   49,   49,   50,   50,   51,   51,   52,   52,   53,   53,
   54,   54,   54,   55,   55,   55,   55,   55,   56,   56,
   56,   57,   57,   57,   58,   58,   58,   58,   59,   59,
   60,   60,   60,   60,   60,   60,   42,   42,   42,   42,
   42,   42,   61,   61,   61,   61,   61,   61,   61,   61,
   62,   62,   62,   62,   63,   63,   64,   64,   64,   64,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    2,    0,    4,    3,    4,
    2,    3,    1,    2,    1,    2,    1,    2,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    4,    5,    2,    1,    1,    1,    2,    1,    3,
    1,    3,    3,    1,    2,    1,    2,    1,    3,    1,
    2,    3,    4,    5,    2,    1,    3,    1,    3,    1,
    2,    1,    3,    3,    4,    4,    3,    4,    1,    2,
    2,    3,    1,    2,    1,    3,    1,    3,    2,    1,
    2,    1,    3,    1,    3,    4,    1,    3,    1,    2,
    1,    2,    1,    3,    2,    3,    3,    4,    2,    3,
    3,    4,    1,    1,    1,    1,    1,    1,    3,    1,
    2,    2,    3,    0,    4,    0,    5,    1,    2,    3,
    4,    1,    2,    1,    4,    5,    7,    7,    5,    6,
    6,    7,    7,    8,    7,    8,    8,    9,    3,    2,
    2,    2,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    5,    1,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    1,    4,
    1,    2,    2,    2,    2,    4,    1,    1,    1,    1,
    1,    1,    1,    4,    3,    4,    3,    3,    2,    2,
    1,    1,    1,    3,    1,    3,    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   21,   32,   29,   45,   30,    0,   22,   25,   27,   24,
   46,   38,   31,   28,   34,   33,   26,   39,   23,   40,
   41,   72,   37,    0,    0,    0,   36,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    4,    5,    0,    2,
    0,    0,    0,   83,   81,    0,    0,    0,   11,    0,
   49,    0,   16,   18,   20,    0,    0,    0,   13,    0,
    6,    0,    0,    3,    0,    0,    0,   66,   73,   84,
   82,    0,    0,    0,    0,   47,    0,    0,    0,    0,
   12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  223,  227,  228,  229,  230,    0,    0,
  120,  122,    0,  208,  207,  209,  210,  211,  212,    0,
    0,  128,  113,  114,  115,  116,  117,  118,    0,    0,
  154,  156,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  195,    0,    0,  213,  222,    0,   14,    9,
   92,   77,    0,    0,    0,   87,    0,  221,   74,  170,
    0,  199,    0,    0,   63,    0,    0,   55,   57,   42,
   48,    0,    0,    0,   58,    0,   52,   94,   10,    8,
   50,  151,    0,  152,    0,  150,    0,    0,    0,  205,
    0,    0,    0,    0,    0,  202,  203,    0,    0,    0,
    0,    0,  123,  129,  204,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  219,  220,
    0,    0,    0,    0,    0,    0,   89,   91,    0,   76,
    0,    0,   78,   75,   64,   69,   67,   43,   61,    0,
   53,    0,   97,    0,    0,  153,    0,    0,  149,    0,
    0,    0,    0,  119,    0,    0,  100,    0,  224,  125,
    0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  196,  197,
  198,  158,  159,  160,  161,  162,  163,  164,  165,  166,
  167,  157,  218,  215,  225,    0,    0,  217,  109,    0,
    0,  105,    0,    0,    0,    0,   86,   88,   93,   62,
   59,   95,    0,    0,    0,    0,    0,  206,    0,    0,
    0,  200,  127,    0,    0,  216,  214,  111,  104,  107,
  110,    0,  106,    0,   96,   98,    0,    0,    0,    0,
    0,    0,    0,    0,  139,  169,  226,  112,  108,    0,
  132,    0,    0,  141,    0,    0,    0,    0,    0,    0,
  140,    0,    0,    0,  133,  138,  145,  143,    0,  142,
    0,    0,    0,  137,    0,    0,  147,  146,  144,    0,
    0,    0,  148,
};
short yydgoto[] = {                                      26,
   67,   68,   27,   28,   29,   58,   31,   32,   33,   34,
   46,   35,   36,   51,   52,   37,   59,   75,   76,   77,
  164,  165,   60,  310,  145,  146,  147,  189,  311,  239,
  111,  112,  113,  114,  115,  116,  117,  118,  361,  362,
  363,  119,  167,  254,  120,  121,  122,  151,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  135,  136,  306,  137,   39,   40,   80,  191,  192,
};
short yysindex[] = {                                   2012,
    0,    0,    0,    0,    0, -119,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,   57,    0,    0,    0, -103,   -5,
 2167, 2167, 2167,  -31, 2329,  -21,    0,    0, 2012,    0,
 -115, -265,   43,    0,    0,   57,  -71, 2476,    0, 2294,
    0,   73,    0,    0,    0,  -21,  942,   -5,    0, 2329,
    0, 2113,  662,    0, -265,   31,   11,    0,    0,    0,
    0, 2476, 2476, 2476, 2364,    0,  124, 1412, 2329,   -3,
    0,   48,   79,  116, 1432,  132,  180,  -62, 1608, 1397,
  198,  239,  203,    0,    0,    0,    0,    0, 1821, 1821,
    0,    0,  986,    0,    0,    0,    0,    0,    0, 2167,
 1128,    0,    0,    0,    0,    0,    0,    0, 1835,  175,
    0,    0,  -58,  -17,  184,  257,  259, -261,  -19, -222,
   76,  315,    0,    8,  -29,    0,    0,  253,    0,    0,
    0,    0,  204,  320,  344,    0,  181,    0,    0,    0,
  302,    0,   70, 1835,    0, -265, 2400,    0,    0,    0,
    0, 1835,  358,  186,    0, 1412,    0,    0,    0,    0,
    0,    0, 1835,    0,  213,    0, 1447,  369,  986,    0,
  153, 1835, 1835, 1397, 1835,    0,    0,  298,  416,  309,
  346, 1397,    0,    0,    0,    0, 1835, 1835, 1835, 1835,
 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835,
 1835, 1835, 1835, 1835, 1835, 1835, 1835,  197,    0,    0,
 1467, 1835,  207, 1924, 1486,   -4,    0,    0,  -18,    0,
 2435,  212,    0,    0,    0,    0,    0,    0,    0, 1835,
    0,  124,    0,   74,  360,    0, 1501,  221,    0,  466,
  473,  361,  362,    0, 1959,   25,    0, 1835,    0,    0,
 1306,    0,  -17,  173,  184,  257,  259, -261,  -19,  -19,
 -222, -222, -222, -222,   76,   76,  315,  315,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  381,   30,    0,    0,  484,
  489,    0,  421,  -18, 2248, 1523,    0,    0,    0,    0,
    0,    0,  420,  408, 1622,  237, 1676,    0, 1835, 1397,
 1397,    0,    0, 1835, 1835,    0,    0,    0,    0,    0,
    0,  494,    0,  449,    0,    0,  279, 1397,  396, 1711,
 1793,  290,  411,  288,    0,    0,    0,    0,    0, 1835,
    0,  -73,  426,    0, 1397, 1397,  415, 1397,  458, 1807,
    0, 1397,  495,  503,    0,    0,    0,    0, 1397,    0,
 1397, 1397,  478,    0, 1397, 1397,    0,    0,    0, 1397,
 1397, 1397,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
    7,  135,  156,    0,    0, 2078,    0,    0,  562,    0,
 1769,    0,    0,    0,    0,   42, 1883,    0,    0,  189,
    0,    0,    0,    0,    0, 2203,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   91,    0,    0,    0,    0,
    0,    0,  -27,  163,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   66,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1343,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  497,  -34,  949,  522,  143,  873,   37,  545,
  434,  386,    0,  376,  349,    0,    0,  304,    0,    0,
    0,    0,  479,    0,  523,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  316,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  524,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  480,    0,    0,  485,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  528,    0,    0,    0,    0,
    0,    0,    9,    0, 1243, 1072,  169,  885,  840,  847,
  745,  752,  796,  803,  474,  516,  423,  446,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  508,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1033,    0,    0,    0,    0,    0,    0,
    0,  447,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -98,    0,    0,    0,    0,    0,
  -95,  448,    0,
};
short yygindex[] = {                                      0,
  512,  428,    0,    0,    0,    1,    0,  539, 1015,  749,
    0,  892,  -22,  500,    0,    0,  249,  519,  -33,  150,
    0,  336,   65,  -59,    0,  351,    0,  414, -127, -190,
 -174,  -90,    0,    0,  275,    0,    0,    0,  232,    0,
    0,    0, -143,    0,  -14, 2093,  -57,  -77,    0,  397,
  400,  395,  399,  394,   47,  191,  121,  220,   90,  -61,
    0,    0,    0,    0,    0,  563,    0,    0,    0,
};
#define YYTABLESIZE 2773
short yytable[] = {                                     181,
   30,  152,  144,   42,  199,  150,  171,   65,   24,  171,
  231,   56,   54,   54,   54,  238,  233,  271,   62,   48,
  194,  315,  253,  171,  171,   66,  130,  180,  171,  131,
   54,   53,   54,   55,   24,  234,   25,  186,  187,   30,
  208,  161,  209,  204,  205,  314,   15,   15,   15,  172,
   15,   72,  172,   49,  156,   79,   79,  152,  171,   79,
  267,  232,  143,   54,  265,   15,  172,  172,  227,   63,
  175,  172,  316,  197,  181,  314,  246,  181,  210,  211,
  181,   80,   80,   69,  249,   80,  235,   24,  190,   25,
  171,  154,  152,  264,  181,  181,  150,   15,   25,  181,
  152,  172,  221,  221,  150,  221,   79,  221,  221,  221,
  221,  221,  221,  156,   79,  235,   82,  323,  212,   57,
  213,  110,  337,  161,  221,  221,  221,  221,  221,  181,
  181,   81,   80,  172,   68,  155,  152,  172,  152,  152,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,  152,  152,  152,  152,  173,  221,  313,  255,  221,
  181,  181,  258,   24,  190,   25,  130,  262,  263,  131,
  190,   41,  320,  152,   17,   17,   17,  150,   17,  346,
  194,  162,  130,  177,  274,  131,  177,   47,  152,  221,
  176,  360,  150,   17,  245,   19,   19,   19,  322,   19,
  177,  177,   56,   56,   56,  177,  152,  374,  195,  178,
  391,  392,  178,   56,   19,   68,  197,  307,  197,  177,
   56,  243,  158,  159,  242,   17,  178,  178,  178,  252,
  334,  178,   51,  196,  143,  177,  177,  182,  344,  354,
  355,  143,  326,  234,  251,   25,   19,   51,   38,  198,
  279,  280,  188,   56,  152,  342,  197,  364,  150,   22,
  184,  178,  178,   54,  197,  143,  177,  177,  228,  229,
  230,  256,  152,  171,  377,  378,  356,  380,  183,  327,
  197,  384,  373,  206,  207,   22,   22,   38,  387,  200,
  388,  389,  178,  178,  235,  350,  203,   15,  152,  393,
  194,  194,  150,  289,  290,  291,   79,  201,  139,   61,
  349,    7,  352,   78,  353,  143,  172,  217,  218,  219,
  220,  221,  222,  223,  224,  225,  226,  139,  188,   12,
  285,  286,   80,  197,  140,  367,  369,  265,   22,   25,
   18,  181,  181,  181,  181,   20,   21,   51,  370,  269,
  202,  216,  197,  169,  170,  383,  214,  332,  139,   60,
  240,  215,   51,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,   60,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  201,  201,  241,  235,  201,
  201,  201,  201,  201,  244,  201,  281,  282,  283,  284,
  324,  330,  331,  197,  197,  197,  201,  201,  201,  201,
  201,  201,  199,  199,   22,  250,  199,  199,  199,  199,
  199,  336,  199,  192,  335,   17,  192,  259,  192,  192,
  192,  287,  288,  199,  199,  199,  365,  199,  199,  197,
  261,  201,  201,  192,  192,  192,   19,  192,  192,  177,
  177,  371,  109,   56,  197,  379,  268,  105,  197,  103,
  193,  104,  106,  193,  107,  193,  193,  193,  199,  199,
  270,  189,  201,  201,  189,  178,  178,  189,  192,  192,
  193,  193,  193,  194,  193,  193,  194,  303,  194,  194,
  194,  189,  189,  189,   22,  189,  189,  308,  381,  199,
  199,  197,  319,  194,  194,  194,  328,  194,  194,  192,
  192,  190,  329,  340,  190,  193,  193,  190,  390,   90,
  101,  197,   90,  101,  338,  103,  189,  189,  103,  339,
  347,  190,  190,  190,  358,  190,  190,  168,  194,  194,
  168,  359,  166,  360,  345,  108,  193,  193,  102,  372,
  376,  102,  385,  191,  168,  168,  191,  189,  189,  191,
  386,    1,  175,   85,   99,  175,  190,  190,  101,  194,
  194,  134,  135,  191,  191,  191,  153,  191,  191,  175,
  175,  171,  184,  247,  175,  184,   73,  321,  184,  168,
  157,  318,  260,  375,  273,  276,  278,  190,  190,  275,
  277,   64,  184,  184,  184,    0,  184,  184,  191,  191,
   73,   73,   73,   73,  175,    0,    0,    0,    0,    0,
    0,  168,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  184,  184,  191,
  191,   73,    0,    0,    0,  175,  175,    0,    0,  201,
  201,  201,  201,  201,  201,  201,  201,    0,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  201,  184,  184,
    0,    0,    0,    0,    0,    0,  199,  199,  199,  199,
  199,  199,  199,  199,    0,    0,  192,  192,  192,  192,
  192,  192,  192,  192,  109,   73,    0,    0,    0,  105,
    0,  103,   89,  104,  106,    0,  107,    0,    0,    0,
  148,   94,   95,   96,   97,   98,    0,   73,   99,  100,
    0,    0,    0,  193,  193,  193,  193,  193,  193,  193,
  193,    0,    0,    0,  189,  189,  189,  189,  189,  189,
  189,  189,    0,    0,    0,    0,  194,  194,  194,  194,
  194,  194,  194,  194,  149,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   45,  190,  190,  190,  190,  190,  190,
  190,  190,  187,    0,    0,  187,    0,  108,  187,  188,
    0,    0,  188,    0,   71,  188,    0,    0,    0,    0,
    0,    0,  187,  187,  187,    0,  187,  187,    0,  188,
  188,  188,    0,  188,  188,    0,  191,  191,  191,  191,
  191,  191,  191,  191,    0,    0,    0,    0,  175,  175,
    0,    0,    0,  185,    0,    0,  185,  187,  187,  185,
  186,    0,    0,  186,  188,  188,  186,  184,  184,  184,
  184,  184,  184,  185,  185,  185,    0,  185,  185,    0,
  186,  186,  186,    0,  186,  186,    0,    0,  187,  187,
    0,    0,    0,    0,    0,  188,  188,  182,    0,    0,
  182,    0,    0,  182,  183,    0,    0,  183,  185,  185,
  183,  236,    0,    0,    0,  186,  186,  182,  182,    0,
    0,    0,  182,    0,  183,  183,    0,    0,    0,  183,
  179,    0,    0,  179,    0,   43,  179,    0,    0,  185,
  185,   50,  180,    0,    0,  180,  186,  186,  180,    0,
  179,  179,  182,  182,    0,  179,  266,    0,    0,  183,
  183,    0,  180,  180,   89,    0,    0,  180,    0,  138,
    0,    0,  148,   94,   95,   96,   97,   98,    0,    0,
   99,  100,    0,  182,  182,  179,  179,    0,  163,    0,
  183,  183,    0,  138,  109,    0,    0,  180,  180,  105,
    0,  103,  236,  104,  106,    0,  107,    0,    0,  173,
    0,    0,  173,    0,    0,    0,  179,  179,    0,    0,
  101,    0,    0,    0,    0,    0,  173,  173,  180,  180,
    0,  173,    0,  266,    0,    0,    0,    0,  109,    0,
    0,    0,    0,  105,    0,  103,    0,  104,  106,    0,
  107,    0,    0,    0,  237,    0,    0,    0,    0,   44,
    0,  173,    0,    0,    0,    0,    0,  187,  187,  187,
  187,  187,  187,    0,  188,  188,  188,  188,  188,  188,
   70,    0,   74,    0,   57,  136,  102,  108,    0,    0,
  136,    0,  136,  173,  136,  136,    0,  136,    0,    0,
    0,    0,    0,    0,    0,    0,   74,   74,   74,   74,
    0,  136,    0,    0,    0,    0,    0,    0,  185,  185,
  185,  185,  185,  185,    0,  186,  186,  186,  186,  186,
  186,  108,  176,    0,    0,  176,    0,   74,    0,    0,
    0,    0,    0,    0,    0,   43,    0,    0,    0,  176,
  176,    0,    0,    0,  176,    0,    0,    0,    0,    0,
    0,    0,    0,  163,  182,  182,  182,  182,    0,    0,
    0,  183,  183,  183,  183,  136,    0,  136,  136,    0,
  109,    0,    0,    0,  176,  105,    0,  103,    0,  104,
  106,   74,  107,    0,    0,    0,    0,    0,    0,  179,
  179,    0,    0,    0,    0,    0,  101,    0,    0,    0,
    0,  180,  180,   74,    0,  176,  176,    0,    1,    2,
    3,    4,   83,    0,    5,   84,    0,    6,    7,    8,
    9,   10,   85,   11,   12,   13,   14,   15,   86,   87,
   16,   17,    0,   88,   89,   18,   90,   91,   19,   92,
   20,   21,   93,   94,   95,   96,   97,   98,   23,    0,
   99,  100,    0,    2,    3,    4,    0,    0,    5,    0,
   57,    6,  193,  108,    9,  173,  173,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,   89,   18,
    0,    0,    0,    0,   20,   21,  148,   94,   95,   96,
   97,   98,   23,  174,   99,  100,  174,    0,    0,    0,
    0,    0,    0,  136,    0,    0,  136,  136,    0,    0,
  174,  174,    0,  136,    0,  174,    0,    0,    0,  136,
  136,    0,    0,  136,  136,  136,    0,  136,  136,    0,
  136,    0,    0,  136,  136,  136,  136,  136,  136,    0,
    0,  136,  136,    0,    0,  174,    0,    0,  109,    0,
    0,    0,    0,  105,    0,  103,    0,  104,  106,    0,
  107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  101,    0,    0,  174,    0,    0,
    0,    0,    0,    0,    0,  126,    0,    0,  176,  176,
  126,    0,  126,    0,  126,  126,    0,  126,   83,    0,
    0,   84,    0,    0,    0,    0,    0,    0,   85,    0,
    0,  126,    0,    0,   86,   87,    0,    0,    0,   88,
   89,    0,   90,   91,    0,   92,    0,    0,   93,   94,
   95,   96,   97,   98,    0,    0,   99,  100,   57,  109,
  333,  108,    0,    0,  105,    0,  103,    0,  104,  106,
    0,  107,    0,    0,  109,    0,    0,    0,    0,  105,
    0,  103,    0,  104,  106,  101,  107,    0,    0,    0,
    0,    0,    0,    0,  109,  126,    0,  124,  126,  105,
    0,  103,    0,  104,  106,    0,  107,    0,    0,  109,
    0,    0,    0,    0,  105,    0,  103,    0,  104,  106,
  174,  107,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,  105,  257,  103,  304,  104,  106,
    0,  107,    0,    0,    0,    0,    0,    0,  109,   57,
    0,    0,  108,  105,    0,  103,    0,  104,  106,    0,
  107,    0,    0,  109,  166,    0,    0,  108,  105,    0,
  103,    0,  104,  106,    0,  107,    0,    0,    0,  174,
  174,    0,    0,    0,    0,  109,    0,  108,    0,  325,
  105,    0,  103,    0,  104,  106,   83,  107,    0,   84,
    0,    0,  108,    0,    0,    0,   85,    0,  312,    0,
    0,    0,   86,   87,    0,    0,    0,   88,   89,    0,
   90,   91,  108,   92,    0,    0,   93,   94,   95,   96,
   97,   98,    0,  126,   99,  100,  126,    0,    0,    0,
    0,  108,    0,  126,    0,  343,    0,    0,    0,  126,
  126,    0,    0,    0,  126,  126,  108,  126,  126,    0,
  126,    0,    0,  126,  126,  126,  126,  126,  126,    0,
  109,  126,  126,    0,    0,  105,    0,  179,  108,  104,
  106,    0,  107,    0,  109,    0,    0,   83,    0,  105,
   84,  103,  348,  104,  106,    0,  107,   85,    0,    0,
    0,    0,    0,   86,   87,    0,    0,    0,   88,   89,
    0,   90,   91,    0,   92,    0,    0,   93,   94,   95,
   96,   97,   98,    0,   89,   99,  100,    0,    0,    0,
    0,    0,  148,   94,   95,   96,   97,   98,  109,    0,
   99,  100,    0,  105,   89,  103,    0,  104,  106,    0,
  107,    0,  148,   94,   95,   96,   97,   98,    0,   89,
   99,  100,    0,  108,  351,    0,    0,  148,   94,   95,
   96,   97,   98,  109,    0,   99,  100,  108,  105,   89,
  103,  366,  104,  106,    0,  107,    0,  148,   94,   95,
   96,   97,   98,    0,    0,   99,  100,    0,   89,    0,
    0,    0,    0,    0,    0,    0,  148,   94,   95,   96,
   97,   98,    0,   89,   99,  100,    0,    0,    0,    0,
    0,  148,   94,   95,   96,   97,   98,    0,    0,   99,
  100,  108,    0,    0,    0,   89,    0,    0,   65,   65,
   65,    0,   65,  148,   94,   95,   96,   97,   98,    0,
    0,   99,  100,    0,    0,  109,   65,   65,    0,    0,
  105,    0,  103,  368,  104,  106,  108,  107,    0,  109,
    0,    0,    0,    0,  105,    0,  103,  382,  104,  106,
    0,  107,    0,  109,    0,    0,    0,    0,  105,   65,
  185,    0,  104,  106,    0,  107,    0,  109,    0,    0,
    0,    0,  105,    0,  103,    0,  104,  106,    0,  107,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,    0,    0,    0,    0,    0,    0,    0,  148,   94,
   95,   96,   97,   98,   89,    0,   99,  100,    0,    0,
    0,    0,  148,   94,   95,   96,   97,   98,  108,    0,
   99,  100,   44,   44,   44,    0,   44,    0,    0,    0,
    0,    0,  108,    0,    0,    0,    0,    0,    0,    0,
   44,   44,    0,    0,    0,    0,  108,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   89,    0,
  108,    0,    0,  234,  309,   25,  148,   94,   95,   96,
   97,   98,    0,   44,   99,  100,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,    0,    0,    0,    0,  265,  309,
   25,  148,   94,   95,   96,   97,   98,    0,    0,   99,
  100,    0,    0,    0,  235,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   65,   65,   65,   65,    0,
    0,   65,    0,    0,   65,   65,   65,   65,   65,    0,
   65,   65,   65,   65,   65,    0,    0,   65,   65,  235,
    0,   24,   65,   25,    0,   65,    0,   65,   65,   65,
    0,    0,    0,    0,    0,   65,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,    0,    0,    0,    0,
    0,    0,    0,  148,   94,   95,   96,   97,   98,   89,
    0,   99,  100,    0,    0,    0,    0,  148,   94,   95,
   96,   97,   98,   89,    0,   99,  100,    0,    0,    0,
    0,  148,   94,   95,   96,   97,   98,   89,   70,   99,
  100,   70,    0,    0,    0,  148,   94,   95,   96,   97,
   98,    0,    0,   99,  100,   70,   70,    0,   70,   44,
   44,   44,   44,    0,    0,   44,    0,    0,   44,   44,
   44,   44,   44,  142,   44,   44,   44,   44,   44,    0,
    0,   44,   44,    0,    0,    0,   44,    0,    0,   44,
  168,   44,   44,   44,    0,    0,    0,    0,    0,   44,
    1,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
   70,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,   22,    1,    2,    3,    4,    0,
   23,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,   71,    0,   19,   71,   20,   21,    0,
    0,    0,    0,    0,    0,   23,    0,    0,  168,    0,
   71,   71,    0,   71,    0,    0,    0,    0,    1,    2,
    3,    4,    0,    0,    5,    0,    0,    6,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,  341,  272,
   16,   17,    0,    0,    0,   18,    0,    0,   19,    0,
   20,   21,   22,    0,    0,    0,    0,    0,   23,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
    0,    0,    0,  305,    0,   71,    0,    0,    0,    0,
    0,    0,    0,    0,   70,   70,   70,   70,    0,    0,
   70,    0,    0,   70,   70,   70,   70,   70,    0,   70,
   70,   70,   70,   70,   78,    0,   70,   70,    0,    0,
    0,   70,    0,    0,   70,    0,   70,   70,    0,    1,
    2,    3,    4,    0,   70,    5,    0,    0,    6,    7,
    8,    9,   10,    0,   11,   12,   13,   14,   15,    0,
    0,   16,   17,    0,    0,    0,   18,    0,    0,   19,
    0,   20,   21,  141,    0,    0,    0,    0,    0,   23,
    0,    0,    0,    0,    0,  168,    0,    0,    0,    0,
    0,    0,    0,    1,    2,    3,    4,  357,    0,    5,
    0,    0,    6,    7,    8,    9,   10,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,    0,
   18,   57,    0,   19,    0,   20,   21,    0,    0,   71,
   71,   71,   71,   23,    0,   71,    0,    0,   71,   71,
   71,   71,   71,    0,   71,   71,   71,   71,   71,    0,
    0,   71,   71,    0,    0,    0,   71,    0,  160,   71,
    0,   71,   71,    0,    0,    0,    0,    0,    0,   71,
    0,    0,    0,    0,    1,    2,    3,    4,    0,    0,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,  248,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,    0,    0,
    0,    0,    0,    0,   23,    0,    0,    0,    0,    0,
    1,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    0,    1,    2,    3,    4,    0,
   23,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,    0,    0,   19,    0,   20,   21,    0,
    0,    2,    3,    4,    0,   23,    5,    0,    0,    6,
    0,    0,    9,    0,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
    0,    0,   20,   21,    0,    0,    0,    2,    3,    4,
   23,    0,    5,    0,    0,    6,    0,    0,    9,    0,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,    0,    0,   20,   21,
    0,    1,    2,    3,    4,    0,   23,    5,    0,    0,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,   19,    0,   20,   21,    0,    0,    0,    0,    0,
    0,   23,    0,    2,    3,    4,    0,    0,    5,    0,
    0,    6,    0,  317,    9,    0,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,    0,    0,   20,   21,    0,    0,    0,    0,
    0,    0,   23,
};
short yycheck[] = {                                      90,
    0,   63,   62,  123,   63,   63,   41,  123,   40,   44,
   40,   34,   40,   41,   42,  143,   46,  192,   40,  123,
  111,   40,  166,   58,   59,  291,  125,   89,   63,  125,
   58,   31,   32,   33,   40,   40,   42,   99,  100,   39,
   60,   75,   62,  305,  306,  236,   40,   41,   42,   41,
   44,  123,   44,   59,   44,   40,   41,  119,   93,   44,
  188,   91,   62,   91,   40,   59,   58,   59,   61,   91,
   85,   63,   91,   44,   38,  266,  154,   41,  301,  302,
   44,   40,   41,   41,  162,   44,   91,   40,  103,   42,
  125,   61,  154,  184,   58,   59,  154,   91,   42,   63,
  162,   93,   37,   38,  162,   40,   91,   42,   43,   44,
   45,   46,   47,   44,   50,   91,   44,   44,   43,  123,
   45,   57,   93,  157,   59,   60,   61,   62,   63,   93,
   94,   59,   91,  125,   44,  125,  198,   59,  200,  201,
  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
  212,  213,  214,  215,  216,   40,   91,  235,  173,   94,
  124,  125,  177,   40,  179,   42,  265,  182,  183,  265,
  185,  291,  250,  235,   40,   41,   42,  235,   44,  323,
  271,   58,  281,   41,  199,  281,   44,  291,  250,  124,
   59,  265,  250,   59,  125,   40,   41,   42,  125,   44,
   58,   59,   40,   41,   42,   63,  268,  281,  119,   41,
  385,  386,   44,  236,   59,  125,   44,  232,   44,   40,
   58,   41,   73,   74,   44,   91,   58,   59,  291,   44,
   58,   63,   44,   59,  234,   93,   94,   40,  316,  330,
  331,  241,  257,   40,   59,   42,   91,   59,    0,  308,
  204,  205,  103,   91,  316,  315,   44,  348,  316,  291,
   58,   93,   94,  291,   44,  265,  124,  125,  298,  299,
  300,   59,  334,  308,  365,  366,  334,  368,   40,   59,
   44,  372,  360,  303,  304,  291,  291,   39,  379,  307,
  381,  382,  124,  125,   91,   59,   38,  291,  360,  390,
  391,  392,  360,  214,  215,  216,  291,  124,   60,   35,
  325,  123,  327,   61,  329,  315,  308,  310,  311,  312,
  313,  314,  315,  316,  317,  318,  319,   79,  179,  273,
  210,  211,  291,   44,   60,  350,  351,   40,  291,   42,
  284,  305,  306,  307,  308,  289,  290,   44,   59,   41,
   94,   37,   44,   79,   80,  370,   42,  268,  110,   44,
   41,   47,   59,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   59,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,   37,   38,   44,   91,   41,
   42,   43,   44,   45,   93,   47,  206,  207,  208,  209,
   41,   41,   41,   44,   44,   44,   58,   59,   60,   61,
   62,   63,   37,   38,  291,   58,   41,   42,   43,   44,
   45,   41,   47,   38,   44,  291,   41,   59,   43,   44,
   45,  212,  213,   58,   59,   60,   41,   62,   63,   44,
  288,   93,   94,   58,   59,   60,  291,   62,   63,  307,
  308,   41,   33,  291,   44,   41,   41,   38,   44,   40,
   38,   42,   43,   41,   45,   43,   44,   45,   93,   94,
  125,   38,  124,  125,   41,  307,  308,   44,   93,   94,
   58,   59,   60,   38,   62,   63,   41,  291,   43,   44,
   45,   58,   59,   60,  291,   62,   63,  291,   41,  124,
  125,   44,  291,   58,   59,   60,   41,   62,   63,  124,
  125,   38,   40,   93,   41,   93,   94,   44,   41,   41,
   41,   44,   44,   44,   41,   41,   93,   94,   44,   41,
  123,   58,   59,   60,   41,   62,   63,   41,   93,   94,
   44,   93,  123,  265,  125,  126,  124,  125,   41,  262,
  125,   44,   58,   38,   58,   59,   41,  124,  125,   44,
   58,    0,   41,   41,   41,   44,   93,   94,   41,  124,
  125,  125,  125,   58,   59,   60,   65,   62,   63,   58,
   59,   82,   38,  156,   63,   41,   48,  252,   44,   93,
   72,  241,  179,  362,  198,  201,  203,  124,  125,  200,
  202,   39,   58,   59,   60,   -1,   62,   63,   93,   94,
   72,   73,   74,   75,   93,   -1,   -1,   -1,   -1,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,  124,
  125,  103,   -1,   -1,   -1,  124,  125,   -1,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,   -1,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,   33,  157,   -1,   -1,   -1,   38,
   -1,   40,  283,   42,   43,   -1,   45,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,  179,  299,  300,
   -1,   -1,   -1,  301,  302,  303,  304,  305,  306,  307,
  308,   -1,   -1,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,   -1,   -1,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   25,  301,  302,  303,  304,  305,  306,
  307,  308,   38,   -1,   -1,   41,   -1,  126,   44,   38,
   -1,   -1,   41,   -1,   46,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   58,
   59,   60,   -1,   62,   63,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,  307,  308,
   -1,   -1,   -1,   38,   -1,   -1,   41,   93,   94,   44,
   38,   -1,   -1,   41,   93,   94,   44,  303,  304,  305,
  306,  307,  308,   58,   59,   60,   -1,   62,   63,   -1,
   58,   59,   60,   -1,   62,   63,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,  124,  125,   38,   -1,   -1,
   41,   -1,   -1,   44,   38,   -1,   -1,   41,   93,   94,
   44,  143,   -1,   -1,   -1,   93,   94,   58,   59,   -1,
   -1,   -1,   63,   -1,   58,   59,   -1,   -1,   -1,   63,
   38,   -1,   -1,   41,   -1,   24,   44,   -1,   -1,  124,
  125,   30,   38,   -1,   -1,   41,  124,  125,   44,   -1,
   58,   59,   93,   94,   -1,   63,  188,   -1,   -1,   93,
   94,   -1,   58,   59,  283,   -1,   -1,   63,   -1,   58,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,   -1,
  299,  300,   -1,  124,  125,   93,   94,   -1,   77,   -1,
  124,  125,   -1,   82,   33,   -1,   -1,   93,   94,   38,
   -1,   40,  234,   42,   43,   -1,   45,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,  124,  125,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   -1,   58,   59,  124,  125,
   -1,   63,   -1,  265,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,  143,   -1,   -1,   -1,   -1,   25,
   -1,   93,   -1,   -1,   -1,   -1,   -1,  303,  304,  305,
  306,  307,  308,   -1,  303,  304,  305,  306,  307,  308,
   46,   -1,   48,   -1,  123,   33,  125,  126,   -1,   -1,
   38,   -1,   40,  125,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   72,   73,   74,   75,
   -1,   59,   -1,   -1,   -1,   -1,   -1,   -1,  303,  304,
  305,  306,  307,  308,   -1,  303,  304,  305,  306,  307,
  308,  126,   41,   -1,   -1,   44,   -1,  103,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  234,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  252,  305,  306,  307,  308,   -1,   -1,
   -1,  305,  306,  307,  308,  123,   -1,  125,  126,   -1,
   33,   -1,   -1,   -1,   93,   38,   -1,   40,   -1,   42,
   43,  157,   45,   -1,   -1,   -1,   -1,   -1,   -1,  307,
  308,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,  307,  308,  179,   -1,  124,  125,   -1,  257,  258,
  259,  260,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
  279,  280,   -1,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,   -1,
  299,  300,   -1,  258,  259,  260,   -1,   -1,  263,   -1,
  123,  266,  125,  126,  269,  307,  308,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
  295,  296,  297,   41,  299,  300,   44,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,   -1,   -1,
   58,   59,   -1,  271,   -1,   63,   -1,   -1,   -1,  277,
  278,   -1,   -1,  281,  282,  283,   -1,  285,  286,   -1,
  288,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   -1,  299,  300,   -1,   -1,   93,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,  307,  308,
   38,   -1,   40,   -1,   42,   43,   -1,   45,  261,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   -1,   59,   -1,   -1,  277,  278,   -1,   -1,   -1,  282,
  283,   -1,  285,  286,   -1,  288,   -1,   -1,  291,  292,
  293,  294,  295,  296,   -1,   -1,  299,  300,  123,   33,
  125,  126,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,   59,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,  123,   -1,  125,  126,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   59,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   59,   40,   41,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   33,  123,
   -1,   -1,  126,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   33,  123,   -1,   -1,  126,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,  307,
  308,   -1,   -1,   -1,   -1,   33,   -1,  126,   -1,   59,
   38,   -1,   40,   -1,   42,   43,  261,   45,   -1,  264,
   -1,   -1,  126,   -1,   -1,   -1,  271,   -1,   93,   -1,
   -1,   -1,  277,  278,   -1,   -1,   -1,  282,  283,   -1,
  285,  286,  126,  288,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,  261,  299,  300,  264,   -1,   -1,   -1,
   -1,  126,   -1,  271,   -1,   93,   -1,   -1,   -1,  277,
  278,   -1,   -1,   -1,  282,  283,  126,  285,  286,   -1,
  288,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   33,  299,  300,   -1,   -1,   38,   -1,   40,  126,   42,
   43,   -1,   45,   -1,   33,   -1,   -1,  261,   -1,   38,
  264,   40,   41,   42,   43,   -1,   45,  271,   -1,   -1,
   -1,   -1,   -1,  277,  278,   -1,   -1,   -1,  282,  283,
   -1,  285,  286,   -1,  288,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,  283,  299,  300,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   33,   -1,
  299,  300,   -1,   38,  283,   40,   -1,   42,   43,   -1,
   45,   -1,  291,  292,  293,  294,  295,  296,   -1,  283,
  299,  300,   -1,  126,   59,   -1,   -1,  291,  292,  293,
  294,  295,  296,   33,   -1,  299,  300,  126,   38,  283,
   40,   41,   42,   43,   -1,   45,   -1,  291,  292,  293,
  294,  295,  296,   -1,   -1,  299,  300,   -1,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,  283,  299,  300,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,   -1,  299,
  300,  126,   -1,   -1,   -1,  283,   -1,   -1,   40,   41,
   42,   -1,   44,  291,  292,  293,  294,  295,  296,   -1,
   -1,  299,  300,   -1,   -1,   33,   58,   59,   -1,   -1,
   38,   -1,   40,   41,   42,   43,  126,   45,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,   43,
   -1,   45,   -1,   33,   -1,   -1,   -1,   -1,   38,   91,
   40,   -1,   42,   43,   -1,   45,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  283,   -1,  299,  300,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  126,   -1,
  299,  300,   40,   41,   42,   -1,   44,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,
  126,   -1,   -1,   40,   41,   42,  291,  292,  293,  294,
  295,  296,   -1,   91,  299,  300,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   40,   41,
   42,  291,  292,  293,  294,  295,  296,   -1,   -1,  299,
  300,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   91,
   -1,   40,  284,   42,   -1,  287,   -1,  289,  290,  291,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  283,
   -1,  299,  300,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,  283,   -1,  299,  300,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,  283,   41,  299,
  300,   44,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,   -1,  299,  300,   58,   59,   -1,   61,  257,
  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,  267,
  268,  269,  270,   41,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,
   78,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,  297,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
  123,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  291,  257,  258,  259,  260,   -1,
  297,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   41,   -1,  287,   44,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,  166,   -1,
   58,   59,   -1,   61,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,   -1,  263,   -1,   -1,  266,  267,  268,
  269,  270,   -1,  272,  273,  274,  275,  276,   41,  197,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,
  289,  290,  291,   -1,   -1,   -1,   -1,   -1,  297,  217,
  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
   -1,   -1,   -1,  231,   -1,  123,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   61,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,  257,
  258,  259,  260,   -1,  297,  263,   -1,   -1,  266,  267,
  268,  269,  270,   -1,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,
   -1,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,   -1,  323,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,  335,   -1,  263,
   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,  123,   -1,  287,   -1,  289,  290,   -1,   -1,  257,
  258,  259,  260,  297,   -1,  263,   -1,   -1,  266,  267,
  268,  269,  270,   -1,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,  284,   -1,  125,  287,
   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,  125,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,   -1,  257,  258,  259,  260,   -1,
  297,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,
   -1,  258,  259,  260,   -1,  297,  263,   -1,   -1,  266,
   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,  289,  290,   -1,   -1,   -1,  258,  259,  260,
  297,   -1,  263,   -1,   -1,  266,   -1,   -1,  269,   -1,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,  289,  290,
   -1,  257,  258,  259,  260,   -1,  297,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,
   -1,  297,   -1,  258,  259,  260,   -1,   -1,  263,   -1,
   -1,  266,   -1,  309,  269,   -1,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,  297,
};
#define YYFINAL 26
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR",
"IDENTIFIER","STRINGliteral","INTEGERconstant","CHARACTERconstant",
"FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname","ARROW","INC","DEC","LS",
"RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign",
"MODassign","PLUSassign","MINUSassign","LSassign","RSassign","ANDassign",
"XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"function.definition : declarator compound.statement",
"$$1 :",
"function.definition : declaration.specifiers declarator $$1 compound.statement",
"function.definition : declarator declaration.list compound.statement",
"function.definition : declaration.specifiers declarator declaration.list compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"direct.declarator : direct.declarator '(' identifier.list ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"identifier.list : IDENTIFIER",
"identifier.list : identifier.list ',' IDENTIFIER",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"$$2 :",
"compound.statement : '{' declaration.list $$2 '}'",
"$$3 :",
"compound.statement : '{' declaration.list $$3 statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"case : _CASE constant.expression ':'",
"case : _CASE constant.expression ':' statement.list",
"case.list : case",
"case.list : case.list case",
"switch.list : case.list",
"switch.list : case.list _DEFAULT ':' statement.list",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' '{' switch.list '}'",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression '=' assignment.expression",
"assignment.expression : unary.expression MULTassign assignment.expression",
"assignment.expression : unary.expression DIVassign assignment.expression",
"assignment.expression : unary.expression MODassign assignment.expression",
"assignment.expression : unary.expression PLUSassign assignment.expression",
"assignment.expression : unary.expression MINUSassign assignment.expression",
"assignment.expression : unary.expression LSassign assignment.expression",
"assignment.expression : unary.expression RSassign assignment.expression",
"assignment.expression : unary.expression ANDassign assignment.expression",
"assignment.expression : unary.expression XORassign assignment.expression",
"assignment.expression : unary.expression ORassign assignment.expression",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 625 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1169 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 181 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 5:
#line 182 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 6:
#line 186 "Source/C.y"
{ yyval.pDecl = FunctionBody(NewSpecType(TypeINT, NULL), yyvsp[-1].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 7:
#line 187 "Source/C.y"
{ FuncParams(yyvsp[0].pDecl); }
break;
case 8:
#line 187 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-3].pDecl, yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 9:
#line 188 "Source/C.y"
{ yyval.pDecl = FunctionBody(NewSpecType(TypeINT, NULL), yyvsp[-2].pDecl, yyvsp[-1].pDecl, yyvsp[0].pStatement );   }
break;
case 10:
#line 189 "Source/C.y"
{ yyval.pDecl = FunctionBody( yyvsp[-3].pDecl, yyvsp[-2].pDecl, yyvsp[-1].pDecl, yyvsp[0].pStatement );                          }
break;
case 11:
#line 193 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 12:
#line 194 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);   }
break;
case 13:
#line 198 "Source/C.y"
{  yyval.pDecl = yyvsp[0].pDecl;                 }
break;
case 14:
#line 199 "Source/C.y"
{  yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl); }
break;
case 15:
#line 203 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 16:
#line 204 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 17:
#line 205 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 18:
#line 206 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 19:
#line 207 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 20:
#line 208 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 21:
#line 212 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 22:
#line 213 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 23:
#line 214 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 24:
#line 215 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 25:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 26:
#line 220 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 27:
#line 221 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 28:
#line 222 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 29:
#line 223 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 30:
#line 224 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 31:
#line 225 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 32:
#line 226 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 33:
#line 227 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 34:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 35:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 36:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 37:
#line 231 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 38:
#line 235 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 39:
#line 236 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 40:
#line 237 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 41:
#line 238 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 42:
#line 242 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 43:
#line 243 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 44:
#line 244 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 45:
#line 248 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 46:
#line 249 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 47:
#line 253 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 48:
#line 254 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 49:
#line 259 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                       }
break;
case 50:
#line 260 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl); }
break;
case 51:
#line 264 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 52:
#line 265 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 53:
#line 269 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 54:
#line 273 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 55:
#line 274 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 56:
#line 275 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 57:
#line 276 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 58:
#line 280 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 59:
#line 281 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 60:
#line 285 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 61:
#line 286 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 62:
#line 287 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 63:
#line 291 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 64:
#line 292 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 65:
#line 293 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 66:
#line 297 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 67:
#line 298 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 68:
#line 302 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 69:
#line 303 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 70:
#line 307 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 71:
#line 308 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 72:
#line 312 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 73:
#line 313 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 74:
#line 314 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 75:
#line 315 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 76:
#line 316 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 77:
#line 317 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 78:
#line 318 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,yyvsp[-1].pDecl);     }
break;
case 79:
#line 322 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 80:
#line 323 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 81:
#line 324 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 82:
#line 325 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 83:
#line 329 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 84:
#line 330 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 85:
#line 334 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 86:
#line 335 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 87:
#line 339 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 88:
#line 340 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 89:
#line 344 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 90:
#line 345 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 91:
#line 346 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 92:
#line 350 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);                       }
break;
case 93:
#line 351 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,NewIdentifier(yyvsp[0].Ident)); }
break;
case 94:
#line 355 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 95:
#line 356 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 96:
#line 357 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 97:
#line 361 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 98:
#line 362 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 99:
#line 366 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 100:
#line 367 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 101:
#line 371 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 102:
#line 372 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 103:
#line 373 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 104:
#line 377 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 105:
#line 378 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 106:
#line 379 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 107:
#line 380 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 108:
#line 381 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 109:
#line 382 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); }
break;
case 110:
#line 383 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 111:
#line 384 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 112:
#line 385 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 113:
#line 389 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 390 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 391 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 116:
#line 392 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 117:
#line 393 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 118:
#line 394 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 119:
#line 398 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement);   }
break;
case 120:
#line 404 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 121:
#line 405 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 122:
#line 409 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 123:
#line 410 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 124:
#line 411 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 125:
#line 411 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   NULL );   UndeclareLocal(yyvsp[-2].pDecl); }
break;
case 126:
#line 412 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 127:
#line 412 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-3].pDecl,   yyvsp[-1].pStatement   );   UndeclareLocal(yyvsp[-3].pDecl); }
break;
case 128:
#line 416 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 129:
#line 417 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 130:
#line 421 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-1].pExpr, NULL); }
break;
case 131:
#line 422 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 132:
#line 426 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement;                          }
break;
case 133:
#line 427 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement);      }
break;
case 134:
#line 431 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 135:
#line 432 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-3].pStatement,StatementMakeCase(NULL, yyvsp[0].pStatement)); }
break;
case 136:
#line 436 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 137:
#line 438 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 138:
#line 440 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-4].pExpr, yyvsp[-1].pStatement);   }
break;
case 139:
#line 444 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 140:
#line 445 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 141:
#line 446 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 142:
#line 447 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 143:
#line 448 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 144:
#line 449 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 145:
#line 450 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 146:
#line 451 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 147:
#line 452 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 148:
#line 453 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 149:
#line 457 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 150:
#line 458 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 151:
#line 459 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 152:
#line 460 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 153:
#line 461 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 154:
#line 465 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 155:
#line 466 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 156:
#line 489 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                 }
break;
case 157:
#line 490 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 158:
#line 491 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binMul, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 159:
#line 492 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binDiv, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 160:
#line 493 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binMod, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 161:
#line 494 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binAdd, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 162:
#line 495 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binSub, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 163:
#line 496 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binShl, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 164:
#line 497 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binShr, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 165:
#line 498 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binAnd, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 166:
#line 499 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binXor, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 167:
#line 500 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binOr,  yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 168:
#line 504 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 169:
#line 505 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 170:
#line 509 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 171:
#line 513 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 172:
#line 514 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 173:
#line 518 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 174:
#line 519 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 175:
#line 523 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 176:
#line 524 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 177:
#line 528 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 178:
#line 529 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 179:
#line 533 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 180:
#line 534 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 181:
#line 538 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 182:
#line 539 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 183:
#line 540 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 184:
#line 544 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 185:
#line 545 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 186:
#line 546 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 187:
#line 547 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 188:
#line 548 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 189:
#line 552 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 190:
#line 553 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShl,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 191:
#line 554 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 192:
#line 558 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 193:
#line 559 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAdd,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 194:
#line 560 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binSub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 195:
#line 564 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 196:
#line 565 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 197:
#line 566 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binDiv,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 198:
#line 567 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 199:
#line 571 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 200:
#line 572 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 201:
#line 576 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 202:
#line 577 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreInc,yyvsp[0].pExpr);    }
break;
case 203:
#line 578 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreDec,yyvsp[0].pExpr);    }
break;
case 204:
#line 579 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 205:
#line 580 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unSizeOf,yyvsp[0].pExpr);    }
break;
case 206:
#line 581 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 207:
#line 585 "Source/C.y"
{ yyval.nUnaryOp = unAddr;    }
break;
case 208:
#line 586 "Source/C.y"
{ yyval.nUnaryOp = unPtr;     }
break;
case 209:
#line 587 "Source/C.y"
{ yyval.nUnaryOp = unPlus;    }
break;
case 210:
#line 588 "Source/C.y"
{ yyval.nUnaryOp = unMinus;   }
break;
case 211:
#line 589 "Source/C.y"
{ yyval.nUnaryOp = unNeg;     }
break;
case 212:
#line 590 "Source/C.y"
{ yyval.nUnaryOp = unNot;     }
break;
case 213:
#line 594 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 214:
#line 595 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 215:
#line 596 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 216:
#line 597 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 217:
#line 598 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 218:
#line 599 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 219:
#line 600 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostInc,yyvsp[-1].pExpr);   }
break;
case 220:
#line 601 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostDec,yyvsp[-1].pExpr);   }
break;
case 221:
#line 605 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 222:
#line 606 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 223:
#line 607 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 224:
#line 608 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 225:
#line 612 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 226:
#line 613 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              ConsolePrintf(CON_CYAN, "argument.expression.list 2\n"); }
break;
case 227:
#line 617 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 228:
#line 618 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 229:
#line 619 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 230:
#line 620 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2218 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

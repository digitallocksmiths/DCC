#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 2 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:  19.07.95                */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 63 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
    TIdExprAssign       nAssign;            /* ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define IDENTIFIER 291
#define STRINGliteral 292
#define INTEGERconstant 293
#define CHARACTERconstant 294
#define FLOATINGconstant 295
#define ENUMERATIONconstant 296
#define TYPEDEFname 297
#define ARROW 298
#define INC 299
#define DEC 300
#define LS 301
#define RS 302
#define LE 303
#define GE 304
#define EQ 305
#define NE 306
#define ANDAND 307
#define OROR 308
#define ELLIPSIS 309
#define MULTassign 310
#define DIVassign 311
#define MODassign 312
#define PLUSassign 313
#define MINUSassign 314
#define LSassign 315
#define RSassign 316
#define ANDassign 317
#define XORassign 318
#define ORassign 319
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   63,   63,   64,   64,   16,   16,   16,   16,   17,
   17,   23,   23,    6,    6,    6,    6,    6,    6,    7,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
    4,    4,    4,    5,    5,   18,   18,   15,   15,   14,
   14,   19,   20,   20,   20,   20,   21,   21,   22,   22,
   22,    3,    3,    3,    1,    1,    2,    2,   12,   12,
   13,   13,   13,   13,   13,   13,   13,   10,   10,   10,
   10,   11,   11,   24,   24,   25,   25,   26,   26,   26,
   27,   27,   41,   41,   41,   42,   42,   28,   28,   29,
   29,   29,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   32,   32,   32,   32,   32,   32,   33,   33,   33,
   34,   34,   35,   35,   35,   35,   31,   31,   36,   36,
   36,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   38,   38,   38,   38,   38,   43,   43,   44,   44,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   45,   45,   46,   47,   47,   48,   48,   49,   49,
   50,   50,   51,   51,   52,   52,   52,   53,   53,   53,
   53,   53,   54,   54,   54,   55,   55,   55,   56,   56,
   56,   56,   57,   57,   58,   58,   58,   58,   58,   58,
   40,   40,   40,   40,   40,   40,   59,   59,   59,   59,
   59,   59,   59,   59,   60,   60,   60,   60,   61,   61,
   62,   62,   62,   62,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    2,    3,    3,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    5,    2,    1,    1,    1,    2,    1,    3,    1,
    3,    3,    1,    2,    1,    2,    1,    3,    1,    2,
    3,    4,    5,    2,    1,    3,    1,    3,    1,    2,
    1,    3,    3,    4,    4,    3,    4,    1,    2,    2,
    3,    1,    2,    1,    3,    1,    3,    2,    1,    2,
    1,    3,    1,    3,    4,    1,    3,    1,    2,    1,
    2,    1,    3,    2,    3,    3,    4,    2,    3,    3,
    4,    1,    1,    1,    1,    1,    1,    3,    4,    3,
    1,    2,    2,    3,    3,    4,    1,    2,    5,    7,
    5,    5,    6,    6,    7,    7,    8,    7,    8,    8,
    9,    3,    2,    2,    2,    3,    1,    3,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    5,    1,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    1,    4,    1,    2,    2,    2,    2,    4,
    1,    1,    1,    1,    1,    1,    1,    4,    3,    4,
    3,    3,    2,    2,    1,    1,    1,    3,    1,    3,
    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   44,   29,    0,   21,   24,   26,   23,
   45,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   71,   36,    0,    0,    0,   35,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    4,    5,    0,    2,
    0,    0,    0,   82,   80,    0,    0,    0,   10,    0,
   48,    0,   15,   17,   19,    0,    0,    0,   12,    0,
    6,    0,    0,    3,    0,    0,    0,   65,   72,   83,
   81,    0,    0,    0,    0,   46,    0,    0,    0,    7,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  217,  221,  222,  223,  224,
    0,    0,  121,  123,    0,  202,  201,  203,  204,  205,
  206,    0,    0,  127,  112,  113,  114,  115,  116,  117,
    0,    0,  147,  149,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  189,    0,    0,  207,  216,    0,
   13,    8,   91,   76,    0,    0,    0,   86,    0,  215,
   73,  164,    0,  193,    0,    0,   62,    0,    0,   54,
   56,   41,   47,    0,    0,    0,   57,    0,   51,   93,
    9,   49,  144,    0,    0,  145,    0,  143,    0,    0,
    0,    0,  199,    0,    0,    0,    0,    0,  196,  197,
    0,    0,    0,  125,    0,  124,  128,  198,  122,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  152,
  153,  154,  155,  156,  157,  158,  159,  160,  161,  151,
    0,    0,  213,  214,    0,    0,    0,    0,    0,    0,
   88,   90,    0,   75,    0,    0,   77,   74,   63,   68,
   66,   42,   60,    0,   52,    0,   96,    0,    0,    0,
  146,    0,    0,  120,  142,    0,    0,    0,    0,  118,
    0,    0,   99,    0,  218,  126,  148,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  190,  191,  192,  150,  212,  209,  219,
    0,    0,  211,  108,    0,    0,  104,    0,    0,    0,
    0,   85,   87,   92,   61,   58,   94,    0,    0,  119,
    0,    0,    0,  200,    0,    0,    0,  194,    0,    0,
  210,  208,  110,  103,  106,  109,    0,  105,    0,   95,
   97,  131,    0,    0,    0,    0,    0,    0,    0,  132,
  163,  220,  111,  107,  134,    0,    0,    0,    0,    0,
    0,  133,    0,  138,  136,    0,  135,    0,    0,    0,
  130,  140,  139,  137,    0,  141,
};
short yydgoto[] = {                                      26,
   67,   68,   27,   28,   29,   58,   31,   32,   33,   34,
   46,   35,   36,   51,   52,   37,   59,   75,   76,   77,
  166,  167,   60,  305,  147,  148,  149,  192,  306,  243,
  113,  114,  115,  116,  117,  118,  119,  120,  231,  121,
  169,  258,  122,  123,  124,  153,  125,  126,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
  301,  139,   39,   40,
};
short yysindex[] = {                                   2116,
    0,    0,    0,    0,    0, -113,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -37,  210,    0,    0,    0,  -96,    5,
 2496, 2496, 2496,  -34, 2384,   43,    0,    0, 2116,    0,
  -99, -255,    8,    0,    0,  210,  -57, 2529,    0, 2348,
    0,   11,    0,    0,    0,   43,  768,    5,    0, 2384,
    0, 2236, 1246,    0, -255,   21,  -31,    0,    0,    0,
    0, 2529, 2529, 2529, 1904,    0,  -33, 1269, 2384,    0,
    0,  -37,   32,   71, 1687, 1283,   69,   92,   79, -141,
 1702, 1217,  137,  163,  161,    0,    0,    0,    0,    0,
 1723, 1723,    0,    0,  878,    0,    0,    0,    0,    0,
    0,  818, 1083,    0,    0,    0,    0,    0,    0,    0,
 1687,  100,    0,    0,  -35,  -32,  164,  188,  256,  -65,
  125,    7,  437,  200,    0,   26,  -38,    0,    0,  262,
    0,    0,    0,    0,   64,  308,  333,    0,  126,    0,
    0,    0,  286,    0,   -3, 1687,    0, -255, 2417,    0,
    0,    0,    0, 1687,  328,  184,    0, 1269,    0,    0,
    0,    0,    0, 1687,  338,    0,  185,    0, 1351, 1217,
  355,  878,    0,  132, 1687, 1687, 1217, 1687,    0,    0,
  196,  384,  130,    0, 1143,    0,    0,    0,    0, 1687,
 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1687,  153,    0,    0, 1547, 1687,  190, 1948, 1511,  -10,
    0,    0,  106,    0, 2452,  197,    0,    0,    0,    0,
    0,    0,    0, 1687,    0,  -33,    0,   28,  167, 1217,
    0, 1565,  186,    0,    0,  435,  449,  168,  254,    0,
 2070,  114,    0, 1687,    0,    0,    0,  -32,  158,  164,
  188,  256,  -65,  125,  125,    7,    7,    7,    7,  437,
  437,  200,  200,    0,    0,    0,    0,    0,    0,    0,
  263,   -9,    0,    0,  436,  450,    0,  400,  106, 2271,
 1583,    0,    0,    0,    0,    0,    0, 1232, 1217,    0,
 1615,  219, 1629,    0, 1687, 1217, 1217,    0, 1687, 1687,
    0,    0,    0,    0,    0,    0,  460,    0,  417,    0,
    0,    0, 1217,  309, 1644, 1659,  240,  310,  249,    0,
    0,    0,    0,    0,    0, 1217, 1217,  334, 1217,  347,
 1673,    0, 1217,    0,    0, 1217,    0, 1217, 1217,  377,
    0,    0,    0,    0, 1217,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -2,    0,    0,    0,    0,    0,
  -22,  142,  478,    0,    0, 2190,    0,    0,  515,    0,
 2000,    0,    0,    0,    0,   85, 2035,    0,    0,  241,
    0,    0,    0,    0,    0, 2307,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   63,    0,    0,    0,    0,
    0,    0,  306,  523,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  382,  840, 1185, 1293,  838,  -15,
  131,  483,  409,  155,    0,   98,   55,    0,    0,  241,
    0,    0,    0,    0,  378,    0,  482,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  242,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  484,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  383,
    0,    0,  405,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  485,    0,    0,    0,    0,    0,  871,    0, 1573,
 1728,  896,   27,  643,  680,  491,  542,  565,  602,  446,
  454,  349,  372,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  407,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1180,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
  463,  373,    0,    0,    0,    1,    0,  659, 1159,  207,
    0, 1163,  -30,  448,    0,    0,  559,  466,  -58,  -59,
    0,  288,  116,  -51,    0,  307,    0,  374, -129, -160,
  443,  -92,    0,    0,  171,    0,    0,    0,    0,    0,
 -156,    0,  -55,  535,  141,  225,    0,  356,  357,  354,
  361,  362,   95,  173,  272,  239,  -54, 1936,    0,    0,
    0,    0,    0,  522,
};
#define YYTABLESIZE 2826
short yytable[] = {                                     184,
   30,  235,   24,   56,   25,   24,   24,  237,   25,   42,
  146,  257,  158,  160,  161,  242,  163,   14,   14,   14,
  197,   14,  173,   65,  164,  173,   48,  202,  173,  238,
  177,   53,   54,   55,  200,   66,   14,   78,   78,   30,
  158,   78,  173,  173,   24,  191,   25,  173,   69,  193,
  215,  215,  236,  215,   82,  215,  215,  215,  215,  215,
  215,  273,  145,   49,  174,   72,  198,  174,   14,   81,
  174,  318,  215,  215,  215,  215,  215,  173,  173,  309,
  239,  156,   62,  332,  174,  174,  230,  264,   78,  174,
  173,  195,  195,  157,  270,  195,  195,  195,  195,  195,
  163,  195,  197,  238,  215,   25,   67,  215,  173,  173,
  174,  309,  195,  195,  195,  195,  195,  195,  259,  174,
  174,  249,  191,  263,   79,   79,  193,  178,   79,  268,
  269,  179,  193,   63,  193,  193,  180,  215,  193,  193,
  193,  193,  193,  200,  193,  310,  279,  195,  195,  181,
  174,  174,  317,  271,  239,  193,  193,  193,  199,  193,
  193,  341,  294,  295,  296,   79,  247,  320,  175,  246,
  275,  175,  112,  200,  175,   79,  185,   41,  195,  195,
  302,   16,   16,   16,  211,   16,  212,   67,  175,  175,
  193,  193,  186,  175,   47,  186,  311,  186,  186,  186,
   16,  200,  186,  152,  239,   61,  322,  319,  326,   56,
  200,  200,  186,  186,  186,  329,  186,  186,  187,  328,
   80,  193,  193,  175,  175,  152,  342,  256,  200,  200,
  142,   45,   16,  349,  350,  271,  219,   25,  145,  207,
  208,  217,  255,  261,  323,  145,  218,  186,  186,  171,
  355,   25,   71,   22,  175,  175,   22,   22,  337,  232,
  233,  234,  200,  364,  365,  344,  367,  347,   14,  348,
  371,  145,  201,  372,  203,  373,  374,  345,  186,  186,
   22,  205,  376,  200,   50,   59,  239,  204,   78,  358,
  360,  173,  173,  206,  327,   22,  152,  200,  361,   50,
   59,  284,  285,  331,  152,  370,  330,  213,  214,  175,
  145,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,   78,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  215,  174,  174,  220,  221,  222,  223,  224,
  225,  226,  227,  228,  229,   53,   53,   53,  244,  356,
  362,  240,  200,  200,   22,  195,  195,  195,  195,  195,
  195,  195,  195,   53,  195,  195,  195,  195,  195,  195,
  195,  195,  195,  195,  366,   79,  245,  200,  248,  152,
  250,  286,  287,  288,  289,  254,  187,  368,  253,  187,
  200,  187,  187,  187,  152,  260,   53,  272,  193,  193,
  193,  193,  193,  193,  193,  193,  187,  187,  187,  188,
  187,  187,  188,  265,  188,  188,  188,  375,   89,  267,
  200,   89,  162,  100,  274,  162,  100,  209,  210,  188,
  188,  188,   16,  188,  188,  175,  175,  175,  175,  162,
  162,  187,  187,  298,  240,  102,  183,  101,  102,  183,
  101,  152,  183,  292,  293,  186,  186,  186,  186,  186,
  186,  186,  186,  308,  188,  188,  183,  183,  183,  351,
  183,  183,  187,  187,  162,  324,  333,  272,  315,  215,
  303,  216,   12,  184,  290,  291,  184,  314,  325,  184,
  334,  185,  335,   18,  185,  188,  188,  185,   20,   21,
  353,  183,  183,  184,  184,  184,  162,  184,  184,  354,
  363,  185,  185,  185,    1,  185,  185,   18,   18,   18,
  178,   18,   84,  178,   98,  100,  178,  155,  181,  172,
  251,  181,  183,  183,  181,  339,   18,  159,  184,  184,
  178,  178,  178,  316,  178,  178,  185,  185,  181,  181,
  181,  313,  181,  181,  195,  266,  278,  281,   38,  280,
   64,    0,   55,   55,   55,  282,    0,  283,   18,  184,
  184,    0,    0,    0,    0,  178,  178,  185,  185,  182,
   55,    0,  182,  181,  181,  182,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   53,   38,    0,  182,
  182,  182,  179,  182,  182,  179,  178,  178,  179,    0,
    0,    0,  170,   55,  181,  181,    0,    0,  141,    0,
    0,    0,  179,  179,  179,    0,  179,  179,    0,    0,
    0,    0,    0,    0,  182,  182,    0,  141,    0,  180,
    0,    0,  180,    0,    0,  180,    0,    0,    0,  187,
  187,  187,  187,  187,  187,  187,  187,  179,  179,  180,
  180,  180,    0,  180,  180,  182,  182,    0,    0,    0,
  141,    0,  188,  188,  188,  188,  188,  188,  188,  188,
  176,    0,    0,  176,    0,    0,  176,    0,  179,  179,
    0,    0,    0,    0,  180,  180,    0,    0,    0,    0,
  176,  176,  170,    0,    0,  176,   73,    0,    0,  183,
  183,  183,  183,  183,  183,  183,  183,  177,    0,    0,
  177,    0,    0,  177,    0,  180,  180,    0,    0,    0,
   73,   73,   73,   73,  277,  176,  176,  177,  177,    0,
    0,    0,  177,    0,    0,    0,  184,  184,  184,  184,
  184,  184,  184,  184,  185,  185,  185,  185,  185,  185,
  185,  185,    0,   73,    0,  297,  176,  176,   18,  300,
    0,    0,  177,  177,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  178,  178,  178,  178,  178,
  178,    0,    0,  181,  181,  181,  181,  181,  181,    0,
  111,    0,    0,  177,  177,  107,    0,  105,    0,  106,
  108,    0,  109,   55,    0,    0,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,  103,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,  182,  182,  182,  182,  182,  182,
  111,    0,  170,    0,    0,  107,    0,  105,    0,  106,
  108,    0,  109,    0,  352,    0,    0,  179,  179,  179,
  179,  179,  179,    0,    0,    0,  103,    0,  171,    0,
  165,  171,    0,  165,    0,    0,    0,    0,    0,    0,
   57,    0,  104,  110,    0,  171,  171,  165,  165,    0,
  171,    0,  165,    0,  180,  180,  180,  180,  180,  180,
  111,  166,    0,    0,  166,  107,    0,  105,    0,  106,
  108,    0,  109,    0,    0,    0,    0,    0,  166,  166,
  171,  171,  165,  166,    0,    0,  172,    0,    0,  172,
   57,    0,  194,  110,    0,    0,    0,  176,  176,  176,
  176,    0,    0,  172,  172,    0,    0,    0,  172,    0,
    0,  171,  171,  166,  165,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  177,  177,  177,  177,  172,  172,
    0,    0,    0,    0,    0,  166,    0,    0,    0,    0,
    0,    0,    0,  110,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  172,
  172,    0,    0,    0,    1,    2,    3,    4,   83,    0,
    5,   84,   85,    6,    7,    8,    9,   10,   86,   11,
   12,   13,   14,   15,   87,   88,   16,   17,   89,   90,
   91,   18,   92,   93,   19,   94,   20,   21,   95,   96,
   97,   98,   99,  100,   23,    0,  101,  102,    0,    0,
    0,    0,    0,    0,    1,    2,    3,    4,   83,    0,
    5,   84,   85,    6,    7,    8,    9,   10,   86,   11,
   12,   13,   14,   15,   87,   88,   16,   17,   89,   90,
   91,   18,   92,   93,   19,   94,   20,   21,   95,   96,
   97,   98,   99,  100,   23,  111,  101,  102,    0,    0,
  107,    0,  105,    0,  106,  108,    0,  109,    0,    0,
    0,    0,    0,    0,    0,    2,    3,    4,    0,    0,
    5,  103,    0,    6,  171,  171,    9,  165,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
   91,   18,    0,    0,    0,    0,   20,   21,  150,   96,
   97,   98,   99,  100,   23,  111,  101,  102,  166,    0,
  107,    0,  105,   44,  106,  108,   43,  109,    0,    0,
    0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
    0,  103,  172,  172,   70,   57,   74,  196,  110,    0,
    0,    0,  129,    0,    0,    0,    0,  129,    0,  129,
  140,  129,  129,    0,  129,  167,    0,    0,  167,    0,
   74,   74,   74,   74,    0,    0,    0,    0,  129,  165,
    0,    0,  167,  167,  140,    0,    0,  167,    0,  111,
    0,    0,    0,    0,  107,    0,  105,    0,  106,  108,
    0,  109,    0,   74,  111,   57,    0,  276,  110,  107,
    0,  105,    0,  106,  108,  103,  109,  167,  111,    0,
    0,    0,    0,  107,    0,  105,    0,  106,  108,    0,
  109,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  111,  129,    0,  129,  129,  107,  241,  105,  167,
  106,  108,    0,  109,    0,  111,    0,   74,    0,    0,
  107,    0,  105,    0,  106,  108,    0,  109,    0,    0,
    0,    0,    0,  169,    0,    0,  169,    0,  151,   57,
   74,  176,  110,   83,    0,    0,   84,   85,    0,    0,
  169,  169,    0,   86,  168,  169,  340,  110,    0,   87,
   88,    0,    0,   89,   90,   91,    0,   92,   93,    0,
   94,  110,    0,   95,   96,   97,   98,   99,  100,    0,
    0,  101,  102,  111,    0,  169,    0,    0,  107,    0,
  105,  168,  106,  108,  110,  109,    0,    0,    0,    0,
   43,    0,    0,   83,    0,    0,   84,   85,  110,  262,
    0,    0,    0,   86,    0,    0,  169,  169,  165,   87,
   88,    0,    0,   89,   90,   91,    0,   92,   93,    0,
   94,    0,    0,   95,   96,   97,   98,   99,  100,    0,
  129,  101,  102,  129,  129,    0,    0,    0,    0,    0,
  129,    0,    0,    0,    0,    0,  129,  129,    0,    0,
  129,  129,  129,    0,  129,  129,    0,  129,    0,    0,
  129,  129,  129,  129,  129,  129,  110,   83,  129,  129,
   84,   85,    0,    0,    0,    0,    0,   86,    0,    0,
    0,  167,  167,   87,   88,    0,    0,   89,   90,   91,
    0,   92,   93,    0,   94,    0,    0,   95,   96,   97,
   98,   99,  100,    0,   91,  101,  102,    0,    0,    0,
    0,    0,  150,   96,   97,   98,   99,  100,   91,    0,
  101,  102,    0,    0,    0,    0,  150,   96,   97,   98,
   99,  100,    0,  111,  101,  102,    0,    0,  107,    0,
  105,   91,  106,  108,    0,  109,    0,    0,    0,  150,
   96,   97,   98,   99,  100,   91,    0,  101,  102,    0,
    0,    0,    0,  150,   96,   97,   98,   99,  100,  111,
    0,  101,  102,    0,  107,    0,  105,  299,  106,  108,
    0,  109,    0,    0,    0,    0,    0,  111,    0,  169,
  169,    0,  107,  307,  105,    0,  106,  108,    0,  109,
    0,    0,    0,  168,    0,  111,  168,    0,    0,    0,
  107,    0,  105,  321,  106,  108,    0,  109,    0,    0,
  168,  168,    0,   91,    0,  168,  110,    0,    0,    0,
    0,  150,   96,   97,   98,   99,  100,  111,    0,  101,
  102,    0,  107,    0,  105,  343,  106,  108,    0,  109,
    0,  111,    0,    0,    0,  168,  107,    0,  105,    0,
  106,  108,  110,  109,    0,  338,  111,    0,    0,    0,
    0,  107,    0,  105,  357,  106,  108,  346,  109,    0,
  110,  111,    0,    0,    0,    0,  107,  168,  105,  359,
  106,  108,    0,  109,    0,  111,    0,    0,  110,    0,
  107,    0,  105,  369,  106,  108,    0,  109,    0,  111,
    0,    0,    0,    0,  107,    0,  105,    0,  106,  108,
    0,  109,    0,    0,  111,    0,    0,    0,    0,  107,
  110,  182,    0,  106,  108,    0,  109,    0,    0,    0,
    0,    0,    0,    0,  110,  111,    0,    0,    0,    0,
  107,    0,  188,    0,  106,  108,    0,  109,  170,  110,
    0,  170,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  110,  170,  170,    0,    0,    0,
  170,    0,    0,   91,    0,    0,    0,    0,  110,    0,
    0,  150,   96,   97,   98,   99,  100,    0,    0,  101,
  102,    0,  110,    0,    0,    0,    0,    0,    0,    0,
  170,    0,    0,    0,    0,    0,    0,  110,    0,   91,
    0,    0,    0,    0,    0,    0,    0,  150,   96,   97,
   98,   99,  100,    0,    0,  101,  102,   91,  110,    0,
    0,  170,  170,    0,    0,  150,   96,   97,   98,   99,
  100,    0,    0,  101,  102,   91,    0,    0,    0,    0,
    0,    0,    0,  150,   96,   97,   98,   99,  100,  168,
  168,  101,  102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   91,    0,    0,
    0,    0,    0,    0,    0,  150,   96,   97,   98,   99,
  100,   91,    0,  101,  102,    0,    0,    0,    0,  150,
   96,   97,   98,   99,  100,    0,   91,  101,  102,    0,
    0,    0,    0,    0,  150,   96,   97,   98,   99,  100,
    0,   91,  101,  102,    0,    0,    0,    0,    0,  150,
   96,   97,   98,   99,  100,   91,    0,  101,  102,    0,
    0,    0,    0,  150,   96,   97,   98,   99,  100,   91,
    0,  101,  102,    0,    0,    0,    0,  150,   96,   97,
   98,   99,  100,    0,   91,  101,  102,  238,  304,   25,
    0,    0,  150,   96,   97,   98,   99,  100,  154,    0,
  101,  102,    0,    0,    0,   91,    0,    0,    0,    0,
    0,    0,    0,  150,   96,   97,   98,   99,  100,    0,
  154,  101,  102,    0,    0,    0,  183,    0,  162,    0,
    0,    0,    0,    0,  170,  170,  189,  190,  239,   64,
   64,   64,    0,   64,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  154,   64,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   43,   43,   43,    0,   43,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,  154,   43,   43,    0,    0,    0,    0,    0,  154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
  304,   25,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   43,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  154,    0,  154,  154,
  154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,  154,  154,   24,    0,   25,    0,    0,
  239,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    0,    0,    9,    0,  154,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,  154,
    0,    0,   20,   21,    0,    0,    0,    0,    0,    0,
   23,    0,    0,    0,    1,    2,    3,    4,    0,  154,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
   69,   18,    0,   69,   19,    0,   20,   21,   22,    0,
    0,    0,    0,    0,   23,    0,  154,   69,   69,    0,
   69,    0,    0,    0,    0,    0,   64,   64,   64,   64,
    0,    0,   64,    0,  154,   64,   64,   64,   64,   64,
    0,   64,   64,   64,   64,   64,  144,    0,   64,   64,
    0,    0,    0,   64,    0,    0,   64,    0,   64,   64,
   64,   43,   43,   43,   43,    0,   64,   43,    0,    0,
   43,   43,   43,   43,   43,    0,   43,   43,   43,   43,
   43,  336,   69,   43,   43,    0,    0,    0,   43,    0,
    0,   43,    0,   43,   43,   43,    1,    2,    3,    4,
    0,   43,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,   70,   16,   17,
   70,    0,    0,   18,    0,    0,   19,    0,   20,   21,
    0,    0,    0,    0,   70,   70,   23,   70,    0,    0,
    0,    0,    1,    2,    3,    4,    0,    0,    5,    0,
    0,    6,    7,    8,    9,   10,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,   19,    0,   20,   21,   22,    0,   78,    0,
    0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,   69,   69,   69,
    0,    0,   69,    0,    0,   69,   69,   69,   69,   69,
    0,   69,   69,   69,   69,   69,    0,    0,   69,   69,
   57,    0,    0,   69,    0,    0,   69,    0,   69,   69,
    0,    0,    0,    0,    0,    0,   69,    0,    0,    0,
    0,    0,    1,    2,    3,    4,    0,    0,    5,    0,
    0,    6,    7,    8,    9,   10,   57,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,   19,    0,   20,   21,  143,    1,    2,    3,
    4,    0,   23,    5,    0,    0,    6,    7,    8,    9,
   10,  252,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,   20,
   21,    0,    0,   70,   70,   70,   70,   23,    0,   70,
    0,    0,   70,   70,   70,   70,   70,    0,   70,   70,
   70,   70,   70,    0,    0,   70,   70,    0,    0,    0,
   70,    0,    0,   70,    0,   70,   70,    0,    0,    0,
    0,    0,    0,   70,    1,    2,    3,    4,    0,    0,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,    0,    0,
    1,    2,    3,    4,   23,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    2,    3,    4,    0,    0,    5,
   23,    0,    6,    0,    0,    9,    0,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,    0,
   18,    0,    0,    0,    0,   20,   21,    0,    1,    2,
    3,    4,    0,   23,    5,    0,    0,    6,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,   19,    0,
   20,   21,    0,    0,    0,    0,    0,    0,   23,    0,
    0,    0,    1,    2,    3,    4,    0,    0,    5,    0,
  312,    6,    7,    8,    9,   10,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,   19,    0,   20,   21,    2,    3,    4,    0,
    0,    5,   23,    0,    6,    0,    0,    9,    0,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,    0,    0,    0,    0,   20,   21,    0,
    0,    0,    0,    0,    0,   23,
};
short yycheck[] = {                                      92,
    0,   40,   40,   34,   42,   40,   40,   46,   42,  123,
   62,  168,   44,   73,   74,  145,   75,   40,   41,   42,
  113,   44,   38,  123,   58,   41,  123,   63,   44,   40,
   86,   31,   32,   33,   44,  291,   59,   40,   41,   39,
   44,   44,   58,   59,   40,  105,   42,   63,   41,  105,
   37,   38,   91,   40,   44,   42,   43,   44,   45,   46,
   47,  191,   62,   59,   38,  123,  121,   41,   91,   59,
   44,   44,   59,   60,   61,   62,   63,   93,   94,  240,
   91,   61,   40,   93,   58,   59,   61,  180,   91,   63,
   59,   37,   38,  125,  187,   41,   42,   43,   44,   45,
  159,   47,  195,   40,   91,   42,   44,   94,  124,  125,
   40,  272,   58,   59,   60,   61,   62,   63,  174,   93,
   94,  125,  182,  179,   40,   41,  182,   59,   44,  185,
  186,   40,  188,   91,   37,   38,   58,  124,   41,   42,
   43,   44,   45,   44,   47,   40,  202,   93,   94,  291,
  124,  125,  125,   40,   91,   58,   59,   60,   59,   62,
   63,  318,  217,  218,  219,   50,   41,  260,   38,   44,
   41,   41,   57,   44,   44,   91,   40,  291,  124,  125,
  236,   40,   41,   42,   60,   44,   62,  125,   58,   59,
   93,   94,   38,   63,  291,   41,   91,   43,   44,   45,
   59,   44,   40,   63,   91,   35,  262,   41,   41,  240,
   44,   44,   58,   59,   60,   58,   62,   63,   58,  274,
   50,  124,  125,   93,   94,   85,  319,   44,   44,   44,
   60,   25,   91,  326,  327,   40,   37,   42,  238,  305,
  306,   42,   59,   59,   59,  245,   47,   93,   94,   79,
  343,   42,   46,  291,  124,  125,  291,  291,  310,  298,
  299,  300,   44,  356,  357,  321,  359,  323,  291,  325,
  363,  271,  308,  366,  307,  368,  369,   59,  124,  125,
  291,   94,  375,   44,   44,   44,   91,  124,  291,  345,
  346,  307,  308,   38,   41,  291,  156,   44,   59,   59,
   59,  207,  208,   41,  164,  361,   44,  301,  302,   85,
  310,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   61,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,  307,  308,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  319,   40,   41,   42,   41,   41,
   41,  145,   44,   44,  291,  301,  302,  303,  304,  305,
  306,  307,  308,   58,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,   41,  291,   44,   44,   93,  239,
  156,  209,  210,  211,  212,   58,   38,   41,  164,   41,
   44,   43,   44,   45,  254,   58,   91,  191,  301,  302,
  303,  304,  305,  306,  307,  308,   58,   59,   60,   38,
   62,   63,   41,   59,   43,   44,   45,   41,   41,  288,
   44,   44,   41,   41,   41,   44,   44,  303,  304,   58,
   59,   60,  291,   62,   63,  305,  306,  307,  308,   58,
   59,   93,   94,  291,  238,   41,   38,   41,   44,   41,
   44,  311,   44,  215,  216,  301,  302,  303,  304,  305,
  306,  307,  308,  239,   93,   94,   58,   59,   60,  329,
   62,   63,  124,  125,   93,   41,   41,  271,  254,   43,
  291,   45,  273,   38,  213,  214,   41,  291,   40,   44,
   41,   38,   93,  284,   41,  124,  125,   44,  289,  290,
   41,   93,   94,   58,   59,   60,  125,   62,   63,   93,
  262,   58,   59,   60,    0,   62,   63,   40,   41,   42,
   38,   44,   41,   41,   41,   41,   44,   65,   38,   82,
  158,   41,  124,  125,   44,  311,   59,   72,   93,   94,
   58,   59,   60,  256,   62,   63,   93,   94,   58,   59,
   60,  245,   62,   63,  112,  182,  201,  204,    0,  203,
   39,   -1,   40,   41,   42,  205,   -1,  206,   91,  124,
  125,   -1,   -1,   -1,   -1,   93,   94,  124,  125,   38,
   58,   -1,   41,   93,   94,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,   39,   -1,   58,
   59,   60,   38,   62,   63,   41,  124,  125,   44,   -1,
   -1,   -1,   78,   91,  124,  125,   -1,   -1,   60,   -1,
   -1,   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   79,   -1,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,   93,   94,   58,
   59,   60,   -1,   62,   63,  124,  125,   -1,   -1,   -1,
  112,   -1,  301,  302,  303,  304,  305,  306,  307,  308,
   38,   -1,   -1,   41,   -1,   -1,   44,   -1,  124,  125,
   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,
   58,   59,  168,   -1,   -1,   63,   48,   -1,   -1,  301,
  302,  303,  304,  305,  306,  307,  308,   38,   -1,   -1,
   41,   -1,   -1,   44,   -1,  124,  125,   -1,   -1,   -1,
   72,   73,   74,   75,  200,   93,   94,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,  301,  302,  303,  304,
  305,  306,  307,  308,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  105,   -1,  231,  124,  125,  291,  235,
   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,  304,  305,  306,  307,
  308,   -1,   -1,  303,  304,  305,  306,  307,  308,   -1,
   33,   -1,   -1,  124,  125,   38,   -1,   40,   -1,   42,
   43,   -1,   45,  291,   -1,   -1,   -1,  159,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  182,   -1,   -1,   -1,  303,  304,  305,  306,  307,  308,
   33,   -1,  318,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,  330,   -1,   -1,  303,  304,  305,
  306,  307,  308,   -1,   -1,   -1,   59,   -1,   41,   -1,
   41,   44,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,  125,  126,   -1,   58,   59,   58,   59,   -1,
   63,   -1,   63,   -1,  303,  304,  305,  306,  307,  308,
   33,   41,   -1,   -1,   44,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   58,   59,
   93,   94,   93,   63,   -1,   -1,   41,   -1,   -1,   44,
  123,   -1,  125,  126,   -1,   -1,   -1,  305,  306,  307,
  308,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,  124,  125,   93,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  305,  306,  307,  308,   93,   94,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,   -1,  299,  300,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,   33,  299,  300,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  258,  259,  260,   -1,   -1,
  263,   59,   -1,  266,  307,  308,  269,  308,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
  283,  284,   -1,   -1,   -1,   -1,  289,  290,  291,  292,
  293,  294,  295,  296,  297,   33,  299,  300,  308,   -1,
   38,   -1,   40,   25,   42,   43,   24,   45,   -1,   -1,
   -1,   -1,   30,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   59,  307,  308,   46,  123,   48,  125,  126,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   58,   42,   43,   -1,   45,   41,   -1,   -1,   44,   -1,
   72,   73,   74,   75,   -1,   -1,   -1,   -1,   59,   77,
   -1,   -1,   58,   59,   82,   -1,   -1,   63,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,  105,   33,  123,   -1,  125,  126,   38,
   -1,   40,   -1,   42,   43,   59,   45,   93,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,  123,   -1,  125,  126,   38,  145,   40,  125,
   42,   43,   -1,   45,   -1,   33,   -1,  159,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,   93,  123,
  182,   59,  126,  261,   -1,   -1,  264,  265,   -1,   -1,
   58,   59,   -1,  271,  123,   63,  125,  126,   -1,  277,
  278,   -1,   -1,  281,  282,  283,   -1,  285,  286,   -1,
  288,  126,   -1,  291,  292,  293,  294,  295,  296,   -1,
   -1,  299,  300,   33,   -1,   93,   -1,   -1,   38,   -1,
   40,  123,   42,   43,  126,   45,   -1,   -1,   -1,   -1,
  238,   -1,   -1,  261,   -1,   -1,  264,  265,  126,   59,
   -1,   -1,   -1,  271,   -1,   -1,  124,  125,  256,  277,
  278,   -1,   -1,  281,  282,  283,   -1,  285,  286,   -1,
  288,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
  261,  299,  300,  264,  265,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,   -1,
  281,  282,  283,   -1,  285,  286,   -1,  288,   -1,   -1,
  291,  292,  293,  294,  295,  296,  126,  261,  299,  300,
  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,   -1,
   -1,  307,  308,  277,  278,   -1,   -1,  281,  282,  283,
   -1,  285,  286,   -1,  288,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,  283,  299,  300,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  283,   -1,
  299,  300,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   33,  299,  300,   -1,   -1,   38,   -1,
   40,  283,   42,   43,   -1,   45,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  283,   -1,  299,  300,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,   33,
   -1,  299,  300,   -1,   38,   -1,   40,   41,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   33,   -1,  307,
  308,   -1,   38,   93,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   41,   -1,   33,   44,   -1,   -1,   -1,
   38,   -1,   40,   59,   42,   43,   -1,   45,   -1,   -1,
   58,   59,   -1,  283,   -1,   63,  126,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   33,   -1,  299,
  300,   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,
   -1,   33,   -1,   -1,   -1,   93,   38,   -1,   40,   -1,
   42,   43,  126,   45,   -1,   93,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   41,   42,   43,   59,   45,   -1,
  126,   33,   -1,   -1,   -1,   -1,   38,  125,   40,   41,
   42,   43,   -1,   45,   -1,   33,   -1,   -1,  126,   -1,
   38,   -1,   40,   41,   42,   43,   -1,   45,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
  126,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   41,  126,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,  283,   -1,   -1,   -1,   -1,  126,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,   -1,  299,
  300,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,   -1,  299,  300,  283,  126,   -1,
   -1,  124,  125,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,   -1,  299,  300,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  307,
  308,  299,  300,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,  283,   -1,  299,  300,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,  283,  299,  300,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
   -1,  283,  299,  300,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  283,   -1,  299,  300,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,  283,
   -1,  299,  300,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,  283,  299,  300,   40,   41,   42,
   -1,   -1,  291,  292,  293,  294,  295,  296,   63,   -1,
  299,  300,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   85,  299,  300,   -1,   -1,   -1,   91,   -1,  125,   -1,
   -1,   -1,   -1,   -1,  307,  308,  101,  102,   91,   40,
   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  121,   58,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   40,   41,   42,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,  156,   58,   59,   -1,   -1,   -1,   -1,   -1,  164,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   41,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  201,   -1,  203,  204,
  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
  215,  216,  217,  218,  219,   40,   -1,   42,   -1,   -1,
   91,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
   -1,   -1,  269,   -1,  239,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,  254,
   -1,   -1,  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   -1,  257,  258,  259,  260,   -1,  274,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   41,  284,   -1,   44,  287,   -1,  289,  290,  291,   -1,
   -1,   -1,   -1,   -1,  297,   -1,  311,   58,   59,   -1,
   61,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
   -1,   -1,  263,   -1,  329,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   41,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
  291,  257,  258,  259,  260,   -1,  297,  263,   -1,   -1,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   41,  123,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,  291,  257,  258,  259,  260,
   -1,  297,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   41,  279,  280,
   44,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
   -1,   -1,   -1,   -1,   58,   59,  297,   61,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,   -1,  289,  290,  291,   -1,   61,   -1,
   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
  123,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,  269,  270,  123,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,   -1,  289,  290,  291,  257,  258,  259,
  260,   -1,  297,  263,   -1,   -1,  266,  267,  268,  269,
  270,  125,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,   -1,   -1,  257,  258,  259,  260,  297,   -1,  263,
   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,   -1,   -1,  287,   -1,  289,  290,   -1,   -1,   -1,
   -1,   -1,   -1,  297,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,   -1,
  257,  258,  259,  260,  297,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  258,  259,  260,   -1,   -1,  263,
  297,   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,  289,  290,   -1,  257,  258,
  259,  260,   -1,  297,  263,   -1,   -1,  266,  267,  268,
  269,  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,
  289,  290,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,
  309,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,   -1,  289,  290,  258,  259,  260,   -1,
   -1,  263,  297,   -1,  266,   -1,   -1,  269,   -1,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,  297,
};
#define YYFINAL 26
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR",
"IDENTIFIER","STRINGliteral","INTEGERconstant","CHARACTERconstant",
"FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname","ARROW","INC","DEC","LS",
"RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign",
"MODassign","PLUSassign","MINUSassign","LSassign","RSassign","ANDassign",
"XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"function.definition : declarator compound.statement",
"function.definition : declaration.specifiers declarator compound.statement",
"function.definition : declarator declaration.list compound.statement",
"function.definition : declaration.specifiers declarator declaration.list compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"direct.declarator : direct.declarator '(' identifier.list ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"identifier.list : IDENTIFIER",
"identifier.list : identifier.list ',' IDENTIFIER",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"labeled.statement : _CASE constant.expression ':' statement",
"labeled.statement : _DEFAULT ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"compound.statement : '{' declaration.list '}'",
"compound.statement : '{' declaration.list statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' statement",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression assignment.operator assignment.expression",
"assignment.operator : '='",
"assignment.operator : MULTassign",
"assignment.operator : DIVassign",
"assignment.operator : MODassign",
"assignment.operator : PLUSassign",
"assignment.operator : MINUSassign",
"assignment.operator : LSassign",
"assignment.operator : RSassign",
"assignment.operator : ANDassign",
"assignment.operator : XORassign",
"assignment.operator : ORassign",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 586 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1167 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 174 "Source/C.y"
{ Declaration(yyvsp[0].pDecl, TRUE); }
break;
case 5:
#line 175 "Source/C.y"
{ Declaration(yyvsp[0].pDecl, TRUE); }
break;
case 6:
#line 179 "Source/C.y"
{ yyval.pDecl = FunctionBody(NewSpecType(TypeINT, NULL), yyvsp[-1].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 7:
#line 180 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, yyvsp[-1].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 8:
#line 181 "Source/C.y"
{ yyval.pDecl = FunctionBody(NewSpecType(TypeINT, NULL), yyvsp[-2].pDecl, yyvsp[-1].pDecl, yyvsp[0].pStatement );   }
break;
case 9:
#line 182 "Source/C.y"
{ yyval.pDecl = FunctionBody( yyvsp[-3].pDecl, yyvsp[-2].pDecl, yyvsp[-1].pDecl, yyvsp[0].pStatement );                          }
break;
case 10:
#line 186 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 11:
#line 187 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 12:
#line 191 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 13:
#line 192 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);       }
break;
case 14:
#line 196 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 15:
#line 197 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 16:
#line 198 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 17:
#line 199 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 18:
#line 200 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 19:
#line 201 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 20:
#line 205 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 206 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 207 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 208 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 209 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 213 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 214 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 215 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 217 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 218 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 219 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 220 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 221 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 222 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 35:
#line 223 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 36:
#line 224 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 37:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 38:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 231 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 41:
#line 235 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 42:
#line 236 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 43:
#line 237 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 44:
#line 241 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 45:
#line 242 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 46:
#line 246 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 47:
#line 247 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 48:
#line 252 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 49:
#line 253 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 50:
#line 257 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 51:
#line 258 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 52:
#line 262 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 53:
#line 266 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 54:
#line 267 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 55:
#line 268 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 56:
#line 269 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 57:
#line 273 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 58:
#line 274 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 59:
#line 278 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 60:
#line 279 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 61:
#line 280 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 62:
#line 284 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 63:
#line 285 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 64:
#line 286 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 65:
#line 290 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 66:
#line 291 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 67:
#line 295 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 68:
#line 296 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 69:
#line 300 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 70:
#line 301 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 71:
#line 305 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 72:
#line 306 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 73:
#line 307 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 74:
#line 308 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 75:
#line 309 "Source/C.y"
{ yyval.pDecl = NewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 76:
#line 310 "Source/C.y"
{ yyval.pDecl = NewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 77:
#line 311 "Source/C.y"
{ yyval.pDecl = NewFunc(yyvsp[-3].pDecl,NULL,yyvsp[-1].pDecl);     }
break;
case 78:
#line 315 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 79:
#line 316 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 80:
#line 317 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 81:
#line 318 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 82:
#line 322 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 83:
#line 323 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 84:
#line 327 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 85:
#line 328 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 86:
#line 332 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 87:
#line 333 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 88:
#line 337 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 89:
#line 338 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 90:
#line 339 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 91:
#line 343 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);                   }
break;
case 92:
#line 344 "Source/C.y"
{ yyval.pDecl = MakeBrother(yyvsp[-2].pDecl,NewIdentifier(yyvsp[0].Ident));   }
break;
case 93:
#line 348 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 94:
#line 349 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 95:
#line 350 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 96:
#line 354 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 97:
#line 355 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 98:
#line 359 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 99:
#line 360 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 100:
#line 364 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 101:
#line 365 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 102:
#line 366 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 103:
#line 370 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 104:
#line 371 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 105:
#line 372 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 106:
#line 373 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 107:
#line 374 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 108:
#line 375 "Source/C.y"
{ yyval.pDecl = NewFunc(NULL,NULL,NULL); }
break;
case 109:
#line 376 "Source/C.y"
{ yyval.pDecl = NewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 110:
#line 377 "Source/C.y"
{ yyval.pDecl = NewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 111:
#line 378 "Source/C.y"
{ yyval.pDecl = NewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 112:
#line 382 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 113:
#line 383 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 384 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 385 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 116:
#line 386 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 117:
#line 387 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 118:
#line 391 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement); }
break;
case 119:
#line 392 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);     }
break;
case 120:
#line 393 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(NULL, yyvsp[0].pStatement);   }
break;
case 121:
#line 397 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 122:
#line 398 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 123:
#line 402 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 124:
#line 403 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 125:
#line 404 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-1].pDecl,   NULL ); }
break;
case 126:
#line 405 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   yyvsp[-1].pStatement   ); }
break;
case 127:
#line 409 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 128:
#line 410 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 129:
#line 414 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 130:
#line 415 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 131:
#line 416 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 132:
#line 420 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 133:
#line 421 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 134:
#line 422 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 135:
#line 423 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 136:
#line 424 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 137:
#line 425 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 138:
#line 426 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 139:
#line 427 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 140:
#line 428 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 141:
#line 429 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 142:
#line 433 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 143:
#line 434 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 144:
#line 435 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 145:
#line 436 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 146:
#line 437 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 147:
#line 441 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 148:
#line 442 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 149:
#line 446 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 150:
#line 447 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-1].nAssign, yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 151:
#line 451 "Source/C.y"
{ yyval.nAssign = AsNop;   }
break;
case 152:
#line 452 "Source/C.y"
{ yyval.nAssign = AsMul;   }
break;
case 153:
#line 453 "Source/C.y"
{ yyval.nAssign = AsDiv;   }
break;
case 154:
#line 454 "Source/C.y"
{ yyval.nAssign = AsMod;   }
break;
case 155:
#line 455 "Source/C.y"
{ yyval.nAssign = AsAdd;   }
break;
case 156:
#line 456 "Source/C.y"
{ yyval.nAssign = AsSub;   }
break;
case 157:
#line 457 "Source/C.y"
{ yyval.nAssign = AsSL;    }
break;
case 158:
#line 458 "Source/C.y"
{ yyval.nAssign = AsSR;    }
break;
case 159:
#line 459 "Source/C.y"
{ yyval.nAssign = AsBAnd;  }
break;
case 160:
#line 460 "Source/C.y"
{ yyval.nAssign = AsBXor;  }
break;
case 161:
#line 461 "Source/C.y"
{ yyval.nAssign = AsBOr;   }
break;
case 162:
#line 465 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 163:
#line 466 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 164:
#line 470 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 165:
#line 474 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 166:
#line 475 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(LOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 167:
#line 479 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 168:
#line 480 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(LAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 169:
#line 484 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 170:
#line 485 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(BOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 171:
#line 489 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 172:
#line 490 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(BXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 173:
#line 494 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 174:
#line 495 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(BAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 175:
#line 499 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 176:
#line 500 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 177:
#line 501 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 178:
#line 505 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 179:
#line 506 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 180:
#line 507 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 181:
#line 508 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 182:
#line 509 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(CGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 183:
#line 513 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 184:
#line 514 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(BSL,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 185:
#line 515 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(BSR,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 186:
#line 519 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 187:
#line 520 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(Add,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 188:
#line 521 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(Sub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 189:
#line 525 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 190:
#line 526 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(Mul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 191:
#line 527 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(Div,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 192:
#line 528 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(Mod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 193:
#line 532 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 194:
#line 533 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 195:
#line 537 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 196:
#line 538 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(PreInc,yyvsp[0].pExpr);    }
break;
case 197:
#line 539 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(PreDec,yyvsp[0].pExpr);    }
break;
case 198:
#line 540 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 199:
#line 541 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(SizeOf,yyvsp[0].pExpr);    }
break;
case 200:
#line 542 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 201:
#line 546 "Source/C.y"
{ yyval.nUnaryOp = Addr;    }
break;
case 202:
#line 547 "Source/C.y"
{ yyval.nUnaryOp = Ptr;     }
break;
case 203:
#line 548 "Source/C.y"
{ yyval.nUnaryOp = Plus;    }
break;
case 204:
#line 549 "Source/C.y"
{ yyval.nUnaryOp = Minus;   }
break;
case 205:
#line 550 "Source/C.y"
{ yyval.nUnaryOp = Neg;     }
break;
case 206:
#line 551 "Source/C.y"
{ yyval.nUnaryOp = Not;     }
break;
case 207:
#line 555 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 208:
#line 556 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 209:
#line 557 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 210:
#line 558 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 211:
#line 559 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 212:
#line 560 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 213:
#line 561 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(PostInc,yyvsp[-1].pExpr);   }
break;
case 214:
#line 562 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(PostDec,yyvsp[-1].pExpr);   }
break;
case 215:
#line 566 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 216:
#line 567 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 217:
#line 568 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 218:
#line 569 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 219:
#line 573 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 220:
#line 574 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              ConsolePrintf(CON_CYAN, "argument.expression.list 2\n"); }
break;
case 221:
#line 578 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 222:
#line 579 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 223:
#line 580 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 224:
#line 581 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2192 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 6 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:                          */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 71 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
/*  TIdExprAssign       nAssign;            // ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define _IOREG 291
#define _NORETURN 292
#define _UNDEFENDED 293
#define IDENTIFIER 294
#define STRINGliteral 295
#define INTEGERconstant 296
#define CHARACTERconstant 297
#define FLOATINGconstant 298
#define ENUMERATIONconstant 299
#define TYPEDEFname 300
#define ARROW 301
#define INC 302
#define DEC 303
#define LS 304
#define RS 305
#define LE 306
#define GE 307
#define EQ 308
#define NE 309
#define ANDAND 310
#define OROR 311
#define ELLIPSIS 312
#define MULTassign 313
#define DIVassign 314
#define MODassign 315
#define PLUSassign 316
#define MINUSassign 317
#define LSassign 318
#define RSassign 319
#define ANDassign 320
#define XORassign 321
#define ORassign 322
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   64,   64,   65,   65,   66,   16,   67,   16,   17,
   17,   23,   23,    6,    6,    6,    6,    6,    6,    7,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
    9,    9,    4,    4,    4,    5,    5,   18,   18,   15,
   15,   14,   14,   19,   19,   20,   20,   20,   20,   21,
   21,   22,   22,   22,    3,    3,    3,    1,    1,    1,
    2,    2,   12,   12,   13,   13,   13,   13,   13,   13,
   10,   10,   10,   10,   11,   11,   24,   24,   25,   25,
   26,   26,   26,   42,   42,   42,   43,   43,   27,   27,
   28,   28,   28,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   31,   31,   31,   31,   31,   31,   32,   33,
   33,   34,   34,   68,   34,   69,   34,   30,   30,   38,
   38,   39,   39,   40,   40,   35,   35,   35,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   37,   37,
   37,   37,   37,   44,   44,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   46,   46,   47,
   48,   48,   49,   49,   50,   50,   51,   51,   52,   52,
   53,   53,   53,   54,   54,   54,   54,   54,   55,   55,
   55,   56,   56,   56,   57,   57,   57,   57,   58,   58,
   59,   59,   59,   59,   59,   59,   41,   41,   41,   41,
   41,   41,   60,   60,   60,   60,   60,   60,   60,   60,
   61,   61,   61,   61,   61,   62,   62,   63,   63,   63,
   63,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    0,    3,    0,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    4,    5,    2,    1,    1,    1,    2,    1,
    3,    1,    3,    3,    2,    1,    2,    1,    2,    1,
    3,    1,    2,    3,    4,    5,    2,    1,    3,    2,
    1,    3,    1,    2,    1,    3,    3,    4,    4,    3,
    1,    2,    2,    3,    1,    2,    1,    3,    1,    3,
    2,    1,    2,    1,    3,    4,    1,    3,    1,    2,
    1,    2,    1,    3,    2,    3,    3,    4,    2,    3,
    3,    4,    1,    1,    1,    1,    1,    1,    3,    1,
    2,    2,    3,    0,    4,    0,    5,    1,    2,    3,
    4,    1,    2,    1,    4,    5,    7,    7,    5,    6,
    6,    7,    7,    8,    7,    8,    8,    9,    3,    2,
    2,    2,    3,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    1,    5,    1,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    1,    4,
    1,    2,    2,    2,    2,    4,    1,    1,    1,    1,
    1,    1,    1,    4,    3,    4,    3,    3,    2,    2,
    1,    1,    1,    3,    6,    1,    3,    1,    1,    1,
    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   46,   29,    0,   21,   24,   26,   23,
   47,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   41,   42,   75,   36,    0,    0,    0,   35,   34,
    0,    0,    0,    0,    0,    0,    6,    0,    4,    5,
    0,    2,    0,    0,    0,   85,   83,    0,    0,    0,
   10,    0,   50,    0,   15,   17,   19,    0,    0,    0,
    0,    3,    0,    0,    0,   68,   76,   86,   84,    0,
    0,    0,    0,   48,    0,    0,    0,   11,    0,    0,
    7,   80,    0,    0,    0,   89,    0,    0,  221,  223,
  228,  229,  230,  231,    0,    0,    0,   77,  208,  207,
  209,  210,  211,  212,    0,  170,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  195,  199,    0,
  213,  222,    0,    0,   65,    0,    0,   57,   59,   43,
   49,   55,    0,    0,    0,   60,    0,   53,   94,  156,
    0,    9,    0,   51,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  120,  122,    0,   12,    0,    0,
  128,  113,  114,  115,  116,  117,  118,    0,  154,    0,
    0,    0,   91,   93,    0,   79,    0,    0,  205,    0,
    0,  202,  203,    0,    0,    0,  204,   78,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  219,  220,
    0,    0,    0,   66,   72,   69,   44,   63,    0,   54,
    0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  151,    0,  152,    0,  150,    0,
    0,    0,    0,    0,    0,   13,    0,    0,  123,  129,
  121,    0,  109,    0,    0,  105,    0,    0,    0,    0,
   88,   90,    0,    0,    0,    0,  100,    0,  224,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  196,  197,  198,  218,  215,
  226,    0,    0,  217,   64,   61,   95,    0,  158,  159,
  160,  161,  162,  163,  164,  165,  166,  167,  157,    0,
  153,    0,    0,  149,    0,    0,    0,  119,  125,    0,
  155,  111,  104,  107,  110,    0,  106,    0,  206,    0,
  200,    0,    0,  216,  214,   96,   98,    0,    0,    0,
    0,    0,    0,    0,  127,  112,  108,    0,  169,  227,
    0,    0,    0,    0,    0,    0,    0,    0,  139,  225,
    0,  132,    0,    0,  141,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,  133,  138,  145,  143,    0,
  142,    0,    0,    0,  137,    0,    0,  147,  146,  144,
    0,    0,    0,  148,
};
short yydgoto[] = {                                      28,
   65,   66,   29,   30,   31,   83,   33,   34,   35,   36,
   48,   37,   38,   53,   54,   39,   40,   73,   74,   75,
  135,  136,  159,  254,   85,   86,  185,  255,  175,  160,
  161,  162,  163,  164,  165,  166,  167,  362,  363,  364,
  105,  138,  223,  168,  169,  140,  107,  108,  109,  110,
  111,  112,  113,  114,  115,  116,  117,  118,  141,  120,
  121,  292,  122,   41,   42,   59,   77,  247,  248,
};
short yysindex[] = {                                   2052,
    0,    0,    0,    0,    0, -110,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    9,  358,    0,    0,    0,
 -107,   10, 2365, 2365, 2365,  -34,    0,  152,    0,    0,
 2052,    0, -105, -236,   37,    0,    0,  358,   39, 2164,
    0,  117,    0,  -12,    0,    0,    0,  152,   72, 2090,
 1329,    0, -236,  136,  -16,    0,    0,    0,    0, 2164,
 2164, 2164, 2242,    0,   46, 1346,   72,    0,    9,  863,
    0,    0,  115,   84,  178,    0, 1767,  192,    0,    0,
    0,    0,    0,    0, 1788, 1788,  915,    0,    0,    0,
    0,    0,    0,    0, 1827,    0,  143,  -53,  -49,  126,
  174,  239,   25,  -33,  166,  271,  347,    0,    0,  -38,
    0,    0,  -13, 1827,    0, -236, 2280,    0,    0,    0,
    0,    0, 1827,  257,   64,    0, 1346,    0,    0,    0,
  306,    0,  117,    0,  262,  307, 1367,  296,  351,   89,
 1264,  361,  367,  357,    0,    0,   10,    0, 2365, 1054,
    0,    0,    0,    0,    0,    0,    0,  190,    0, 1969,
 1385,  175,    0,    0,  214,    0, 2318,  915,    0,  129,
 1827,    0,    0,  171,  410,  189,    0,    0, 1827, 1827,
 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
 1827, 1827, 1827, 1827, 1827, 1827, 1827,  172,    0,    0,
 1462, 1827,  181,    0,    0,    0,    0,    0, 1827,    0,
  156,    0,   63, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
 1827, 1827, 1827, 1827,    0, 1827,    0,  297,    0, 1418,
  421,  221, 1827, 1827, 1264,    0,  377, 1264,    0,    0,
    0, 1827,    0,  469,  476,    0,  434,  214, 2128, 1541,
    0,    0,  494,  508, 2014,  227,    0, 1827,    0,  -49,
   22,  126,  174,  239,   25,  -33,  -33,  166,  166,  166,
  166,  271,  271,  347,  347,    0,    0,    0,    0,    0,
    0,  298,    1,    0,    0,    0,    0,  759,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  460,
    0, 1559,  299,    0,  519,  470,  475,    0,    0, 1188,
    0,    0,    0,    0,    0,  524,    0,  467,    0,  275,
    0, 1827, 1827,    0,    0,    0,    0,  466, 1614,  337,
 1660, 1827, 1264, 1264,    0,    0,    0,  560,    0,    0,
  338, 1264,  482, 1685, 1733,  349,  487,  340,    0,    0,
 1827,    0, -240,  485,    0, 1264, 1264,  503, 1264,  525,
 1750,    0, 1264,  557,  558,    0,    0,    0,    0, 1264,
    0, 1264, 1264,  533,    0, 1264, 1264,    0,    0,    0,
 1264, 1264, 1264,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -37,    0,    0,    0,
    0,    0,   15,  112,  168,    0,    0,  267,    0,    0,
  617,    0, 1878,    0,    0,    0,    0,  509, 1931,    0,
    0,  187,    0,    0,    0,    0,    0,  831,    0,    0,
    0,    0,    0,   77,    0,    0,    0,    0,    0,    0,
  211,  362,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  540,    0,  577,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  636,  951,  795,
    2,   26,  749,  634,  462,  182,  131,    0,    0,   55,
    0,    0,    0,    0,    0,   80,    0,    0,    0,    0,
    0,    0,    0,  400,    0,    0,    0,    0,    0,    0,
  123,    0,  401,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -23,    0,    0,    0,    0, 1235,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  544,    0,    0,  567,    0,    0,    0,    0,    0,
    0,    0,    0,  588,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  568,    0,    0,
    0,    0,    0,    0,    0,  589,    0,    0,    0,  977,
    0,  953,  804,  294,  806,  641,  716,  474,  513,  520,
  608,  405,  414,  286,  354,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  958,    0,    0,
    0,    0,  507,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -46,    0,    0,    0,    0,
    0,  -44,  510,    0,
};
short yygindex[] = {                                      0,
  570,  514,    0,    0,    0,   42,    0,  896,  807,  378,
    0,  955,  -25,  555,    0,    0,  158,  566,  -40,  385,
    0,  418,    0,  -55,    0,  464,  477,  -21, -163, -158,
 2106,    0,    0,  -29,    0,    0,    0,  290,    0,    0,
    0, -125,    0,  142, 1210,  -60,  -42,    0,  465,  478,
  481,  483,  463,  155,  343,  293,  342,  217,  -61,    0,
    0,    0,    0,    0,  633,    0,    0,    0,    0,
};
#define YYTABLESIZE 2665
short yytable[] = {                                     119,
  106,  211,   81,   81,   84,   26,   81,  213,  258,  190,
   58,  222,   44,  221,  221,   50,  221,   63,  221,  221,
  221,  221,  221,  221,  361,  179,  199,  126,  200,   81,
  126,   79,  131,  182,  183,  221,  221,  221,  221,  221,
  375,   32,  175,  119,  252,  175,   78,  142,   26,   26,
   27,   27,  212,   81,   14,   14,   14,   64,   14,  175,
  175,  174,  119,  106,  175,  252,  177,  221,   51,  177,
  221,  119,  106,   14,   55,   56,   57,   67,  130,  332,
  131,  215,   32,  177,  177,   26,  131,   27,  177,  320,
  218,  201,  201,  335,  175,  201,  201,  201,  201,  201,
  221,  201,  258,  133,  132,   14,  298,  221,  125,  119,
  106,  214,  201,  201,  201,  201,  201,  201,  177,  177,
   71,  157,  220,   70,  176,  175,  175,  119,  257,  119,
  119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  119,   58,  201,  201,  177,
  177,   16,   16,   16,  170,   16,   27,  119,  106,  199,
  199,   70,  267,  199,  199,  199,  199,  199,  192,  199,
   16,  192,  337,  192,  192,  192,  295,   76,  201,  201,
  199,  199,  199,   43,  199,  199,   49,  297,  192,  192,
  192,   60,  192,  192,   80,   26,  124,   27,  119,  106,
  157,   71,   16,  326,   70,  171,  119,   18,   18,   18,
  265,   18,   27,  133,  170,  199,  199,  328,  130,  189,
  131,  177,  189,  192,  192,  189,   18,  392,  393,  269,
   52,  180,  252,  252,  130,  188,  131,  158,  186,  189,
  189,  189,   61,  189,  189,   52,  199,  199,  251,  192,
   56,   56,   56,  259,  192,  192,   81,  189,   18,   24,
  191,  171,  208,  209,  210,  171,  265,  193,   56,   56,
  119,  349,  197,  198,  189,  189,  194,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  238,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  119,
  106,   56,   24,   24,  260,  189,  189,   73,   14,    8,
   73,  175,  175,  203,  219,  204,  246,  171,  374,  186,
  235,  187,  186,  193,   73,   73,  193,   73,  193,  193,
  193,  271,  195,  196,  178,  177,  177,  178,  334,   24,
  252,  333,  252,  193,  193,  193,  236,  193,  193,  276,
  277,  178,  178,  293,  239,  311,  178,  341,  201,  201,
  201,  201,  201,  201,  201,  201,  234,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  201,  310,  193,  193,
  252,  313,  241,  207,  316,  317,  178,  178,  205,   73,
  240,  194,  252,  206,  194,  354,  194,  194,  194,   27,
  243,   58,   58,   58,   47,   16,  244,  371,   24,  193,
  193,  194,  194,  194,  245,  194,  194,  178,  178,   58,
   58,  286,  287,  288,  264,   69,  199,  199,  199,  199,
  199,  199,  199,  199,  192,  192,  192,  192,  192,  192,
  192,  192,  190,   62,   52,  190,  194,  194,  190,   24,
  268,  191,   58,  340,  191,  128,  129,  191,   62,   52,
  172,   18,  190,  190,  190,  289,  190,  190,   24,  201,
  202,  191,  191,  191,  294,  191,  191,  194,  194,  314,
  353,  184,  356,  357,  331,  189,  189,  189,  189,  189,
  189,  189,  189,  282,  283,  368,  370,  190,  190,  184,
  338,  319,  184,  252,   56,  184,  191,  191,  315,  322,
  343,  187,  384,  252,  187,  344,  323,  187,  252,  184,
  184,  184,  366,  184,  184,  252,  324,  372,  190,  190,
  252,  187,  187,  187,  329,  187,  187,  191,  191,  278,
  279,  280,  281,  380,  284,  285,  252,  172,   82,   82,
  188,  330,   82,  188,  184,  184,  188,  185,  342,  347,
  185,  266,  184,  185,  346,  382,  187,  187,  252,  348,
  188,  188,  188,  391,  188,  188,  252,  185,  185,  185,
   92,  185,  185,   92,  101,  184,  184,  101,  351,  193,
  193,  193,  193,  193,  193,  193,  193,  187,  187,   82,
  360,  373,  361,  178,  178,  188,  188,  103,  102,  377,
  103,  102,  185,  185,  386,  387,    1,   87,  224,  225,
  226,  227,  228,  229,  230,  231,  232,  233,   99,  101,
   12,  134,  123,  144,  135,  127,  188,  188,  296,  216,
  262,   18,  266,  185,  185,  186,   20,   21,  186,   22,
   23,  186,  376,  270,  263,   58,  275,  194,  194,  194,
  194,  194,  194,  194,  194,  186,  186,  186,  272,  186,
  186,  181,  273,   62,  181,  274,  168,  181,  182,  168,
    0,  182,    0,    0,  182,    0,    0,    0,    0,    0,
    0,  181,  181,  168,  168,    0,  181,    0,  182,  182,
  186,  186,    0,  182,    0,    0,    0,    0,  190,  190,
  190,  190,  190,  190,  190,  190,    0,  191,  191,  191,
  191,  191,  191,  191,  191,    0,  181,  181,  168,    0,
    0,  186,  186,  182,  182,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  183,    0,    0,  183,  181,  181,  183,
  168,    0,    0,    0,  182,  182,    0,  184,  184,  184,
  184,  184,  184,  183,  183,    0,    0,    0,  183,  187,
  187,  187,  187,  187,  187,    0,  179,    0,    0,  179,
    0,  104,  179,    0,    0,    0,  100,    0,   97,    0,
   99,  101,   82,  102,    0,    0,  179,  179,  183,  183,
    0,  179,    0,    0,    0,    0,    0,    0,  188,  188,
  188,  188,  188,  188,    0,  185,  185,  185,  185,  185,
  185,    0,    0,   46,    0,  173,    0,    0,  173,  183,
  183,  179,  179,  180,  176,    0,  180,  176,    0,  180,
    0,    0,  173,  173,   68,    0,   72,  173,    0,    0,
    0,  176,  176,  180,  180,    0,  176,    0,  180,    0,
    0,   74,  179,  179,   74,    0,   72,   72,   72,   72,
    0,  137,    0,  336,  103,    0,    0,  173,   74,   74,
    0,   74,    0,    0,    0,  104,  176,    0,  180,  180,
  100,    0,   97,   72,   99,  101,    0,  102,    0,    0,
    0,    0,    0,  186,  186,  186,  186,  186,  186,  173,
    0,  155,    0,    0,    0,    0,    0,  176,  176,  180,
  180,    0,    0,   72,    0,    0,    0,    0,    0,    0,
    0,  181,  181,  181,  181,   71,    0,  104,  182,  182,
  182,  182,  100,   74,   97,    0,   99,  101,    0,  102,
    0,    0,    0,    0,    0,   71,   71,   71,   71,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   45,    0,    0,    0,   72,   80,   52,  156,  103,    0,
  136,  171,   71,  174,  171,  136,  174,  136,    0,  136,
  136,    0,  136,    0,    0,    0,    0,    0,  171,  171,
  174,  174,    0,  171,    0,  174,  136,  172,    0,    0,
  172,    0,   71,  183,  183,  183,  183,    0,    0,  134,
    0,    0,    0,  143,  172,  172,    0,  173,    0,  172,
  103,   87,    0,  171,    0,  174,    0,    0,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,  179,  179,
   95,   96,    0,    0,    0,    0,    0,    0,    0,  172,
    0,    0,    0,   71,    0,  171,    0,  174,    0,    0,
  136,    0,  136,  136,    0,    0,  104,    0,    0,    0,
    0,  100,    0,   97,    0,   99,  101,    0,  102,    0,
    0,  172,    0,    0,  173,  173,    0,    0,    0,    0,
    0,  143,  155,  176,  176,  180,  180,    0,    0,    1,
    2,    3,    4,  145,   45,    5,  146,    0,    6,    7,
    8,    9,   10,  147,   11,   12,   13,   14,   15,  148,
  149,   16,   17,    0,  150,   87,   18,  151,  152,   19,
  153,   20,   21,   88,   22,   23,  154,   90,   91,   92,
   93,   94,   25,    0,   95,   96,    0,    0,    0,    0,
    0,    0,    2,    3,    4,  134,   80,    5,  249,  103,
    6,    0,    0,    9,    0,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,   87,   18,    0,
    0,    0,    0,   20,   21,   88,   22,   23,   89,   90,
   91,   92,   93,   94,   25,    0,   95,   96,  136,    0,
  104,  136,  136,    0,    0,  100,    0,   97,  136,   99,
  101,    0,  102,    0,  136,  136,    0,    0,  136,  136,
  136,    0,  136,  136,    0,  136,  155,    0,  136,    0,
    0,  136,  136,  136,  136,  136,  136,    0,    0,  136,
  136,  171,  174,  174,    0,    0,    0,  126,    0,    0,
    0,    0,  126,    0,  126,    0,  126,  126,    0,  126,
    0,    0,    0,    0,    0,  139,    0,  172,    0,    0,
    0,    0,    0,  126,    0,    0,  104,    0,    0,    0,
    0,  100,    0,   97,    0,   99,  101,    0,  102,    0,
   80,    0,  345,  103,  145,    0,    0,  146,    0,    0,
    0,    0,  155,    0,  147,    0,    0,    0,    0,    0,
  148,  149,    0,    0,    0,  150,   87,    0,  151,  152,
    0,  153,    0,    0,   88,    0,  139,  154,   90,   91,
   92,   93,   94,    0,    0,   95,   96,  126,    0,  124,
  126,  104,    0,    0,    0,    0,  100,    0,   97,    0,
   99,  101,    0,  102,    0,    0,    0,    0,  104,    0,
    0,    0,    0,  100,    0,   97,   80,   99,  101,  103,
  102,    0,    0,    0,    0,    0,    0,    0,    0,  104,
    0,    0,    0,    0,  100,    0,   97,    0,   99,  101,
    0,  102,    0,    0,    0,    0,    0,  104,    0,    0,
  291,   98,  100,    0,   97,  237,   99,  101,    0,  102,
    0,    0,    0,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,    0,    0,    0,    0,  145,    0,
  104,  146,    0,    0,  103,  100,    0,   97,  147,   99,
  101,  321,  102,    0,  148,  149,    0,    0,  137,  150,
   87,  103,  151,  152,    0,  153,  312,  256,   88,    0,
    0,  154,   90,   91,   92,   93,   94,    0,    0,   95,
   96,    0,  103,    0,  104,  126,    0,    0,  126,  100,
    0,   97,  290,   99,  101,  126,  102,  139,    0,    0,
  103,  126,  126,    0,    0,    0,  126,  126,    0,  126,
  126,    0,  126,    0,  145,  126,    0,  146,  126,  126,
  126,  126,  126,  126,  147,    0,  126,  126,    0,    0,
  148,  149,  350,  103,    0,  150,   87,    0,  151,  152,
    0,  153,    0,    0,   88,    0,    0,  154,   90,   91,
   92,   93,   94,    0,    0,   95,   96,    0,    0,    0,
    0,    0,    0,  104,    0,    0,    0,    0,  100,    0,
   97,    0,   99,  101,    0,  102,    0,  103,    0,    0,
    0,  104,    0,    0,    0,    0,  100,    0,   97,    0,
   99,  101,    0,  102,    0,    0,    0,    0,    0,    0,
    0,   87,    0,    0,    0,    0,    0,  339,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,   87,    0,
   95,   96,    0,  327,    0,    0,   88,    0,    0,   89,
   90,   91,   92,   93,   94,    0,  104,   95,   96,   87,
    0,  100,    0,   97,  352,   99,  101,   88,  102,    0,
   89,   90,   91,   92,   93,   94,  103,   87,   95,   96,
    0,    0,    0,    0,    0,   88,    0,    0,   89,   90,
   91,   92,   93,   94,  103,    0,   95,   96,    0,    0,
    0,    0,  104,    0,    0,    0,    0,  100,    0,   97,
   87,   99,  101,    0,  102,    0,    0,    0,   88,    0,
    0,   89,   90,   91,   92,   93,   94,  104,  355,   95,
   96,    0,  100,    0,   97,  367,   99,  101,    0,  102,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
    0,    0,    0,    0,   87,    0,    0,    0,    0,    0,
    0,    0,   88,    0,    0,   89,   90,   91,   92,   93,
   94,    0,    0,   95,   96,  104,    0,    0,    0,    0,
  100,    0,   97,  369,   99,  101,    0,  102,    0,    0,
    0,    0,  104,    0,    0,  103,    0,  100,    0,   97,
  383,   99,  101,    0,  102,    0,    0,    0,    0,  104,
    0,    0,    0,    0,  100,    0,  178,    0,   99,  101,
  103,  102,    0,    0,    0,    0,    0,    0,    0,    0,
  104,    0,    0,   87,    0,  100,    0,  181,    0,   99,
  101,   88,  102,    0,   89,   90,   91,   92,   93,   94,
    0,   87,   95,   96,    0,    0,    0,    0,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,  103,  104,
   95,   96,    0,    0,  100,    0,   97,    0,   99,  101,
    0,  102,    0,    0,    0,  103,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,    0,    0,    0,   87,    0,    0,    0,
    0,    0,    0,    0,   88,    0,    0,   89,   90,   91,
   92,   93,   94,  103,    0,   95,   96,   67,   67,   67,
    0,   67,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,   67,    0,    0,    0,
    0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
   88,    0,  103,   89,   90,   91,   92,   93,   94,    0,
    0,   95,   96,    0,    0,    0,    0,   87,   67,    0,
   45,   45,   45,    0,   45,   88,    0,    0,   89,   90,
   91,   92,   93,   94,    0,    0,   95,   96,   45,   45,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,  253,
   27,    0,    0,    0,    0,   87,    0,    0,    0,    0,
    0,   45,    0,   88,    0,    0,   89,   90,   91,   92,
   93,   94,   87,    0,   95,   96,    0,    0,    0,    0,
   88,    0,    0,   89,   90,   91,   92,   93,   94,   87,
    0,   95,   96,  265,  253,   27,    0,   88,    0,  171,
   89,   90,   91,   92,   93,   94,    0,    0,   95,   96,
   87,    0,    0,    0,    0,    0,    0,    0,   88,    0,
    0,   89,   90,   91,   92,   93,   94,    0,    0,   95,
   96,   26,    0,   27,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  171,    0,    0,    0,    0,   87,
    0,    0,    0,    0,    0,    0,    0,   88,    0,    0,
   89,   90,   91,   92,   93,   94,    0,    0,   95,   96,
   82,    0,    0,    0,   67,   67,   67,   67,    0,    0,
   67,    0,    0,   67,   67,   67,   67,   67,    0,   67,
   67,   67,   67,   67,    0,    0,   67,   67,    0,    0,
    0,   67,    0,    0,   67,    0,   67,   67,  325,   67,
   67,   67,    0,    0,    0,    0,    0,   67,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   45,   45,   45,
   45,    0,    0,   45,    0,    0,   45,   45,   45,   45,
   45,    0,   45,   45,   45,   45,   45,    0,    0,   45,
   45,    0,    0,    0,   45,    0,    0,   45,    0,   45,
   45,    0,   45,   45,   45,    1,    2,    3,    4,    0,
   45,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,    0,    0,   19,  242,   20,   21,    0,
   22,   23,   24,    0,    0,  250,    0,    0,   25,    0,
    1,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    0,   22,   23,    0,    1,    2,
    3,    4,    0,   25,    5,    0,    0,    6,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,   19,    0,
   20,   21,    0,   22,   23,   24,    1,    2,    3,    4,
  318,   25,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,  130,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
    0,   22,   23,    0,    1,    2,    3,    4,    0,   25,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,  217,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,    0,   22,
   23,    2,    3,    4,    0,  250,    5,   25,    0,    6,
    0,    0,    9,    0,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,  358,  359,
    0,    0,   20,   21,    0,   22,   23,  365,    0,    0,
    0,    0,    0,   25,    0,    0,    0,    0,    0,    0,
    0,  378,  379,    0,  381,    0,    0,    0,  385,    0,
    0,    0,    0,    0,    0,  388,    0,  389,  390,    0,
    0,    0,    0,    0,    0,    0,  394,  250,  250,    2,
    3,    4,    0,    0,    5,    0,    0,    6,    0,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,    0,    0,
   20,   21,    0,   22,   23,    0,    0,    2,    3,    4,
    0,   25,    5,    0,    0,    6,    0,    0,    9,    0,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,    0,    0,   20,   21,
    0,   22,   23,    0,    1,    2,    3,    4,    0,   25,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,   19,    0,   20,   21,    0,   22,
   23,    0,    0,    0,    0,    0,    0,   25,    0,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,  261,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,   19,    0,   20,   21,    0,   22,   23,    0,    0,
    0,    0,    0,    0,   25,
};
short yycheck[] = {                                      61,
   61,   40,   40,   41,   60,   40,   44,   46,  172,   63,
   36,  137,  123,   37,   38,  123,   40,  123,   42,   43,
   44,   45,   46,   47,  265,   87,   60,   44,   62,   59,
   44,   44,   73,   95,   96,   59,   60,   61,   62,   63,
  281,    0,   41,  105,   44,   44,   59,   77,   40,   40,
   42,   42,   91,   91,   40,   41,   42,  294,   44,   58,
   59,   83,  124,  124,   63,   44,   41,   91,   59,   44,
   94,  133,  133,   59,   33,   34,   35,   41,  125,   58,
  125,  124,   41,   58,   59,   40,  127,   42,   63,  248,
  133,   37,   38,   93,   93,   41,   42,   43,   44,   45,
  124,   47,  266,   58,   59,   91,   44,   44,  125,  171,
  171,  125,   58,   59,   60,   61,   62,   63,   93,   94,
   44,   80,   59,   44,   41,  124,  125,  189,  171,  191,
  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
  202,  203,  204,  205,  206,  207,  172,   93,   94,  124,
  125,   40,   41,   42,   40,   44,   42,  219,  219,   37,
   38,  123,  184,   41,   42,   43,   44,   45,   38,   47,
   59,   41,  298,   43,   44,   45,  219,   61,  124,  125,
   58,   59,   60,  294,   62,   63,  294,  125,   58,   59,
   60,   40,   62,   63,  123,   40,   61,   42,  260,  260,
  159,  125,   91,  259,  125,   91,  268,   40,   41,   42,
   40,   44,   42,   58,   40,   93,   94,  260,  265,   38,
  265,   44,   41,   93,   94,   44,   59,  386,  387,   41,
   44,   40,   44,   44,  281,   93,  281,   80,   97,   58,
   59,   60,   91,   62,   63,   59,  124,  125,   59,  124,
   40,   41,   42,   40,  124,  125,  294,  311,   91,  294,
  310,   91,  301,  302,  303,   91,   40,   94,   58,   59,
  332,  332,  306,  307,   93,   94,   38,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  147,  313,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  361,
  361,   91,  294,  294,   91,  124,  125,   41,  294,  123,
   44,  310,  311,   43,   58,   45,  159,   91,  361,  178,
   59,  105,  181,   38,   58,   59,   41,   61,   43,   44,
   45,  190,  308,  309,   41,  310,  311,   44,   41,  294,
   44,   44,   44,   58,   59,   60,   40,   62,   63,  195,
  196,   58,   59,  212,   59,   59,   63,   59,  304,  305,
  306,  307,  308,  309,  310,  311,   61,  313,  314,  315,
  316,  317,  318,  319,  320,  321,  322,  236,   93,   94,
   44,  240,  294,   37,  243,  244,   93,   94,   42,  123,
   40,   38,   44,   47,   41,   59,   43,   44,   45,   42,
   40,   40,   41,   42,   27,  294,   40,   59,  294,  124,
  125,   58,   59,   60,   58,   62,   63,  124,  125,   58,
   59,  205,  206,  207,  296,   48,  304,  305,  306,  307,
  308,  309,  310,  311,  304,  305,  306,  307,  308,  309,
  310,  311,   38,   44,   44,   41,   93,   94,   44,  294,
   41,   38,   91,  312,   41,   71,   72,   44,   59,   59,
   83,  294,   58,   59,   60,  294,   62,   63,  294,  304,
  305,   58,   59,   60,  294,   62,   63,  124,  125,   59,
  339,   97,  341,  342,  268,  304,  305,  306,  307,  308,
  309,  310,  311,  201,  202,  354,  355,   93,   94,   38,
   41,  125,   41,   44,  294,   44,   93,   94,  288,   41,
   41,   38,  371,   44,   41,   41,   41,   44,   44,   58,
   59,   60,   41,   62,   63,   44,   93,   41,  124,  125,
   44,   58,   59,   60,   41,   62,   63,  124,  125,  197,
  198,  199,  200,   41,  203,  204,   44,  170,   40,   41,
   38,   44,   44,   41,   93,   94,   44,   38,   40,   93,
   41,  184,  178,   44,   41,   41,   93,   94,   44,  295,
   58,   59,   60,   41,   62,   63,   44,   58,   59,   60,
   41,   62,   63,   44,   41,  124,  125,   44,  123,  304,
  305,  306,  307,  308,  309,  310,  311,  124,  125,   91,
   41,  262,  265,  310,  311,   93,   94,   41,   41,  125,
   44,   44,   93,   94,   58,   58,    0,   41,  313,  314,
  315,  316,  317,  318,  319,  320,  321,  322,   41,   41,
  273,  125,   63,   79,  125,   70,  124,  125,  221,  126,
  177,  284,  265,  124,  125,   38,  289,  290,   41,  292,
  293,   44,  363,  189,  178,  294,  194,  304,  305,  306,
  307,  308,  309,  310,  311,   58,   59,   60,  191,   62,
   63,   38,  192,   41,   41,  193,   41,   44,   38,   44,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   58,   59,   -1,   63,   -1,   58,   59,
   93,   94,   -1,   63,   -1,   -1,   -1,   -1,  304,  305,
  306,  307,  308,  309,  310,  311,   -1,  304,  305,  306,
  307,  308,  309,  310,  311,   -1,   93,   94,   93,   -1,
   -1,  124,  125,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   38,   -1,   -1,   41,  124,  125,   44,
  125,   -1,   -1,   -1,  124,  125,   -1,  306,  307,  308,
  309,  310,  311,   58,   59,   -1,   -1,   -1,   63,  306,
  307,  308,  309,  310,  311,   -1,   38,   -1,   -1,   41,
   -1,   33,   44,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,  294,   45,   -1,   -1,   58,   59,   93,   94,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,  306,  307,
  308,  309,  310,  311,   -1,  306,  307,  308,  309,  310,
  311,   -1,   -1,   27,   -1,   41,   -1,   -1,   44,  124,
  125,   93,   94,   38,   41,   -1,   41,   44,   -1,   44,
   -1,   -1,   58,   59,   48,   -1,   50,   63,   -1,   -1,
   -1,   58,   59,   58,   59,   -1,   63,   -1,   63,   -1,
   -1,   41,  124,  125,   44,   -1,   70,   71,   72,   73,
   -1,  123,   -1,  125,  126,   -1,   -1,   93,   58,   59,
   -1,   61,   -1,   -1,   -1,   33,   93,   -1,   93,   94,
   38,   -1,   40,   97,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,  306,  307,  308,  309,  310,  311,  125,
   -1,   59,   -1,   -1,   -1,   -1,   -1,  124,  125,  124,
  125,   -1,   -1,  127,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  308,  309,  310,  311,   50,   -1,   33,  308,  309,
  310,  311,   38,  123,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   70,   71,   72,   73,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   26,   -1,   -1,   -1,  178,  123,   32,  125,  126,   -1,
   33,   41,   97,   41,   44,   38,   44,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   58,   59,
   58,   59,   -1,   63,   -1,   63,   59,   41,   -1,   -1,
   44,   -1,  127,  308,  309,  310,  311,   -1,   -1,   75,
   -1,   -1,   -1,   79,   58,   59,   -1,   83,   -1,   63,
  126,  283,   -1,   93,   -1,   93,   -1,   -1,   -1,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,  310,  311,
  302,  303,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,   -1,  178,   -1,  125,   -1,  125,   -1,   -1,
  123,   -1,  125,  126,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,  125,   -1,   -1,  310,  311,   -1,   -1,   -1,   -1,
   -1,  157,   59,  310,  311,  310,  311,   -1,   -1,  257,
  258,  259,  260,  261,  170,  263,  264,   -1,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,   -1,  282,  283,  284,  285,  286,  287,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   -1,  302,  303,   -1,   -1,   -1,   -1,
   -1,   -1,  258,  259,  260,  221,  123,  263,  125,  126,
  266,   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,  283,  284,   -1,
   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,   -1,  302,  303,  261,   -1,
   33,  264,  265,   -1,   -1,   38,   -1,   40,  271,   42,
   43,   -1,   45,   -1,  277,  278,   -1,   -1,  281,  282,
  283,   -1,  285,  286,   -1,  288,   59,   -1,  291,   -1,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,  311,  310,  311,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   76,   -1,  311,   -1,   -1,
   -1,   -1,   -1,   59,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
  123,   -1,  125,  126,  261,   -1,   -1,  264,   -1,   -1,
   -1,   -1,   59,   -1,  271,   -1,   -1,   -1,   -1,   -1,
  277,  278,   -1,   -1,   -1,  282,  283,   -1,  285,  286,
   -1,  288,   -1,   -1,  291,   -1,  137,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  123,   -1,  125,
  126,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,  123,   42,   43,  126,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
  211,   93,   38,   -1,   40,   59,   42,   43,   -1,   45,
   -1,   -1,   -1,  224,  225,  226,  227,  228,  229,  230,
  231,  232,  233,  234,   -1,   -1,   -1,   -1,  261,   -1,
   33,  264,   -1,   -1,  126,   38,   -1,   40,  271,   42,
   43,  252,   45,   -1,  277,  278,   -1,   -1,  123,  282,
  283,  126,  285,  286,   -1,  288,   59,   93,  291,   -1,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,   -1,  126,   -1,   33,  261,   -1,   -1,  264,   38,
   -1,   40,   41,   42,   43,  271,   45,  298,   -1,   -1,
  126,  277,  278,   -1,   -1,   -1,  282,  283,   -1,  285,
  286,   -1,  288,   -1,  261,  291,   -1,  264,  294,  295,
  296,  297,  298,  299,  271,   -1,  302,  303,   -1,   -1,
  277,  278,  333,  126,   -1,  282,  283,   -1,  285,  286,
   -1,  288,   -1,   -1,  291,   -1,   -1,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,   -1,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,  126,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  283,   -1,   -1,   -1,   -1,   -1,   59,   -1,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,  283,   -1,
  302,  303,   -1,   93,   -1,   -1,  291,   -1,   -1,  294,
  295,  296,  297,  298,  299,   -1,   33,  302,  303,  283,
   -1,   38,   -1,   40,   41,   42,   43,  291,   45,   -1,
  294,  295,  296,  297,  298,  299,  126,  283,  302,  303,
   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,  294,  295,
  296,  297,  298,  299,  126,   -1,  302,  303,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  283,   42,   43,   -1,   45,   -1,   -1,   -1,  291,   -1,
   -1,  294,  295,  296,  297,  298,  299,   33,   59,  302,
  303,   -1,   38,   -1,   40,   41,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,  294,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,   41,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  126,   -1,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   33,
   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
  126,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,  283,   -1,   38,   -1,   40,   -1,   42,
   43,  291,   45,   -1,  294,  295,  296,  297,  298,  299,
   -1,  283,  302,  303,   -1,   -1,   -1,   -1,   -1,  291,
   -1,   -1,  294,  295,  296,  297,  298,  299,  126,   33,
  302,  303,   -1,   -1,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,   -1,   -1,  294,  295,  296,
  297,  298,  299,  126,   -1,  302,  303,   40,   41,   42,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,   -1,  126,  294,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,   -1,   -1,   -1,   -1,  283,   91,   -1,
   40,   41,   42,   -1,   44,  291,   -1,   -1,  294,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,   58,   59,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,   41,
   42,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,
   -1,   91,   -1,  291,   -1,   -1,  294,  295,  296,  297,
  298,  299,  283,   -1,  302,  303,   -1,   -1,   -1,   -1,
  291,   -1,   -1,  294,  295,  296,  297,  298,  299,  283,
   -1,  302,  303,   40,   41,   42,   -1,  291,   -1,   91,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,   -1,
   -1,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,   40,   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  283,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
   41,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   41,  292,
  293,  294,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,   -1,  292,  293,  294,  257,  258,  259,  260,   -1,
  300,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   -1,  287,  151,  289,  290,   -1,
  292,  293,  294,   -1,   -1,  160,   -1,   -1,  300,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,   -1,  292,  293,   -1,  257,  258,
  259,  260,   -1,  300,  263,   -1,   -1,  266,  267,  268,
  269,  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,
  289,  290,   -1,  292,  293,  294,  257,  258,  259,  260,
  245,  300,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,  125,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
   -1,  292,  293,   -1,  257,  258,  259,  260,   -1,  300,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,  125,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,  292,
  293,  258,  259,  260,   -1,  320,  263,  300,   -1,  266,
   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  343,  344,
   -1,   -1,  289,  290,   -1,  292,  293,  352,   -1,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  366,  367,   -1,  369,   -1,   -1,   -1,  373,   -1,
   -1,   -1,   -1,   -1,   -1,  380,   -1,  382,  383,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  391,  392,  393,  258,
  259,  260,   -1,   -1,  263,   -1,   -1,  266,   -1,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
  289,  290,   -1,  292,  293,   -1,   -1,  258,  259,  260,
   -1,  300,  263,   -1,   -1,  266,   -1,   -1,  269,   -1,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,  289,  290,
   -1,  292,  293,   -1,  257,  258,  259,  260,   -1,  300,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,  312,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,   -1,  292,  293,   -1,   -1,
   -1,   -1,   -1,   -1,  300,
};
#define YYFINAL 28
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 322
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR","_IOREG",
"_NORETURN","_UNDEFENDED","IDENTIFIER","STRINGliteral","INTEGERconstant",
"CHARACTERconstant","FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname",
"ARROW","INC","DEC","LS","RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS",
"MULTassign","DIVassign","MODassign","PLUSassign","MINUSassign","LSassign",
"RSassign","ANDassign","XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"$$1 :",
"function.definition : declarator $$1 compound.statement",
"$$2 :",
"function.definition : declaration.specifiers declarator $$2 compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"type.qualifier : _NORETURN",
"type.qualifier : _UNDEFENDED",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"struct.declaration : specifier.qualifier.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator.list : enumerator.list ','",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"$$3 :",
"compound.statement : '{' declaration.list $$3 '}'",
"$$4 :",
"compound.statement : '{' declaration.list $$4 statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"case : _CASE constant.expression ':'",
"case : _CASE constant.expression ':' statement.list",
"case.list : case",
"case.list : case.list case",
"switch.list : case.list",
"switch.list : case.list _DEFAULT ':' statement.list",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' '{' switch.list '}'",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression '=' assignment.expression",
"assignment.expression : unary.expression MULTassign assignment.expression",
"assignment.expression : unary.expression DIVassign assignment.expression",
"assignment.expression : unary.expression MODassign assignment.expression",
"assignment.expression : unary.expression PLUSassign assignment.expression",
"assignment.expression : unary.expression MINUSassign assignment.expression",
"assignment.expression : unary.expression LSassign assignment.expression",
"assignment.expression : unary.expression RSassign assignment.expression",
"assignment.expression : unary.expression ANDassign assignment.expression",
"assignment.expression : unary.expression XORassign assignment.expression",
"assignment.expression : unary.expression ORassign assignment.expression",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"primary.expression : _IOREG '(' INTEGERconstant ',' STRINGliteral ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 633 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1153 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 185 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 5:
#line 186 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 6:
#line 190 "Source/C.y"
{ FuncParams(NewSpecType(TypeINT, NULL), yyvsp[0].pDecl); }
break;
case 7:
#line 190 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 8:
#line 191 "Source/C.y"
{ FuncParams(yyvsp[-1].pDecl, yyvsp[0].pDecl); }
break;
case 9:
#line 191 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 10:
#line 197 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 11:
#line 198 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);   }
break;
case 12:
#line 202 "Source/C.y"
{  yyval.pDecl = yyvsp[0].pDecl;                 }
break;
case 13:
#line 203 "Source/C.y"
{  yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl); }
break;
case 14:
#line 207 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 15:
#line 208 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 16:
#line 209 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 17:
#line 210 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 18:
#line 211 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 19:
#line 212 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 20:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 217 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 218 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 219 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 220 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 224 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 225 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 226 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 227 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 231 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 232 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 233 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 35:
#line 234 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 36:
#line 235 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 37:
#line 239 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 38:
#line 240 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 241 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 242 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 41:
#line 243 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNORETURN);      }
break;
case 42:
#line 244 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualUNDEFENDEF);    }
break;
case 43:
#line 249 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 44:
#line 250 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 45:
#line 251 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 46:
#line 255 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 47:
#line 256 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 48:
#line 260 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 49:
#line 261 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 50:
#line 266 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                       }
break;
case 51:
#line 267 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl); }
break;
case 52:
#line 271 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 53:
#line 272 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 54:
#line 276 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 55:
#line 277 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier("") ,yyvsp[-1].pDecl);  }
break;
case 56:
#line 281 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 57:
#line 282 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 58:
#line 283 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 59:
#line 284 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 60:
#line 288 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 61:
#line 289 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 62:
#line 293 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 63:
#line 294 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 64:
#line 295 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 65:
#line 299 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 66:
#line 300 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 67:
#line 301 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 68:
#line 305 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 69:
#line 306 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 70:
#line 307 "Source/C.y"
{ yyval.pEnumElement = yyvsp[-1].pEnumElement;                      }
break;
case 71:
#line 311 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 72:
#line 312 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 73:
#line 316 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 74:
#line 317 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 75:
#line 321 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 76:
#line 322 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 77:
#line 323 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 78:
#line 324 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 79:
#line 325 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 80:
#line 326 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 81:
#line 331 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 82:
#line 332 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 83:
#line 333 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 84:
#line 334 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 85:
#line 338 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 86:
#line 339 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 87:
#line 343 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 88:
#line 344 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 89:
#line 348 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 90:
#line 349 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 91:
#line 353 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 92:
#line 354 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 93:
#line 355 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 94:
#line 364 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 95:
#line 365 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 96:
#line 366 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 97:
#line 370 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 98:
#line 371 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 99:
#line 375 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 100:
#line 376 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 101:
#line 380 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 102:
#line 381 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 103:
#line 382 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 104:
#line 386 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 105:
#line 387 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 106:
#line 388 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 107:
#line 389 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 108:
#line 390 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 109:
#line 391 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); }
break;
case 110:
#line 392 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 111:
#line 393 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 112:
#line 394 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 113:
#line 398 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 399 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 400 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 116:
#line 401 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 117:
#line 402 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 118:
#line 403 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 119:
#line 407 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement);   }
break;
case 120:
#line 413 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 121:
#line 414 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 122:
#line 418 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 123:
#line 419 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 124:
#line 420 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 125:
#line 420 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   NULL );   UndeclareLocal(yyvsp[-2].pDecl); }
break;
case 126:
#line 421 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 127:
#line 421 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-3].pDecl,   yyvsp[-1].pStatement   );   UndeclareLocal(yyvsp[-3].pDecl); }
break;
case 128:
#line 425 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 129:
#line 426 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 130:
#line 430 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-1].pExpr, NULL); }
break;
case 131:
#line 431 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 132:
#line 435 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement;                          }
break;
case 133:
#line 436 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement);      }
break;
case 134:
#line 440 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 135:
#line 441 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-3].pStatement,StatementMakeCase(NULL, yyvsp[0].pStatement)); }
break;
case 136:
#line 445 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 137:
#line 446 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 138:
#line 447 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-4].pExpr, yyvsp[-1].pStatement);   }
break;
case 139:
#line 451 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 140:
#line 452 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 141:
#line 453 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 142:
#line 454 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 143:
#line 455 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 144:
#line 456 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 145:
#line 457 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 146:
#line 458 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 147:
#line 459 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 148:
#line 460 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 149:
#line 464 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 150:
#line 465 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 151:
#line 466 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 152:
#line 467 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 153:
#line 468 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 154:
#line 472 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 155:
#line 473 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 156:
#line 496 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                 }
break;
case 157:
#line 497 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 158:
#line 498 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMul, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 159:
#line 499 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binDiv, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 160:
#line 500 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binMod, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 161:
#line 501 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAdd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 162:
#line 502 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binSub, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 163:
#line 503 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShl, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 164:
#line 504 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binNop, yyvsp[-2].pExpr, ExprMakeBinaryNode(binShr, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 165:
#line 505 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binAnd, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 166:
#line 506 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binXor, yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 167:
#line 507 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(binOr,  yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 168:
#line 511 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 169:
#line 512 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 170:
#line 516 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 171:
#line 520 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 172:
#line 521 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 173:
#line 525 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 174:
#line 526 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 175:
#line 530 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 176:
#line 531 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 177:
#line 535 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 178:
#line 536 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 179:
#line 540 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 180:
#line 541 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 181:
#line 545 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 182:
#line 546 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 183:
#line 547 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 184:
#line 551 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 185:
#line 552 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 186:
#line 553 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 187:
#line 554 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 188:
#line 555 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 189:
#line 559 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 190:
#line 560 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShl,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 191:
#line 561 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 192:
#line 565 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 193:
#line 566 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAdd,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 194:
#line 567 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binSub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 195:
#line 571 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 196:
#line 572 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 197:
#line 573 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binDiv,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 198:
#line 574 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 199:
#line 578 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 200:
#line 579 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 201:
#line 583 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 202:
#line 584 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreInc,yyvsp[0].pExpr);    }
break;
case 203:
#line 585 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreDec,yyvsp[0].pExpr);    }
break;
case 204:
#line 586 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 205:
#line 587 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unSizeOf,yyvsp[0].pExpr);    }
break;
case 206:
#line 588 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 207:
#line 592 "Source/C.y"
{ yyval.nUnaryOp = unAddr;    }
break;
case 208:
#line 593 "Source/C.y"
{ yyval.nUnaryOp = unPtr;     }
break;
case 209:
#line 594 "Source/C.y"
{ yyval.nUnaryOp = unPlus;    }
break;
case 210:
#line 595 "Source/C.y"
{ yyval.nUnaryOp = unMinus;   }
break;
case 211:
#line 596 "Source/C.y"
{ yyval.nUnaryOp = unNeg;     }
break;
case 212:
#line 597 "Source/C.y"
{ yyval.nUnaryOp = unNot;     }
break;
case 213:
#line 601 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 214:
#line 602 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 215:
#line 603 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 216:
#line 604 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 217:
#line 605 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 218:
#line 606 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 219:
#line 607 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostInc,yyvsp[-1].pExpr); }
break;
case 220:
#line 608 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostDec,yyvsp[-1].pExpr); }
break;
case 221:
#line 612 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 222:
#line 613 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 223:
#line 614 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 224:
#line 615 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 225:
#line 616 "Source/C.y"
{ yyval.pExpr = ExprMakeIoReg(yyvsp[-3].Integer, yyvsp[-1].Ident);           }
break;
case 226:
#line 620 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 227:
#line 621 "Source/C.y"
{ yyval.pExpr = ExprConcatArgs(yyvsp[-2].pExpr, yyvsp[0].pExpr);          }
break;
case 228:
#line 625 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 229:
#line 626 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 230:
#line 627 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 231:
#line 628 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2206 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

; SKC AVR Output - V1(Jan  7 2020)

#define		_IO_SPL	0x3D
#define		_IO_SPH	0x3E

                                                            ; ##########################
                                                            ; # Start of CONST segment #
                     .section    CONST, "a"                 ; ##########################
                     ;.endseg                               ; === End of CONST segment ===


                                                            ; #########################
                                                            ; # Start of INIT segment #
                     .section    INIT,  "a"                 ; #########################
                                                            ; This is the source of the initialization data
                                                            ; #########################
                     .section    .data                      ; # Start of DATA segment #
                                                            ; #########################
                                                            ; This is where the initialization data will be copied to
                     ;.endseg                               ; === End of DATA segment ===


                                                            ; ########################
                     .section    .bss                       ; # Start of BSS segment #
                                                            ; ########################
                                                            ; Here starts the uninitialized data
                     ;.endseg                               ; === End of BSS segment ===


                                                            ; #########################
                     .section    .text                      ; # Start of TEXT segment #
                                                            ; #########################
                                                            ; Here starts the executable code

                     .global   ComparisonLogic
ComparisonLogic:     ; ###########################################
                     ; # Function: ComparisonLogic          
                     ; #   Return: void                     
                     ; #   Params: <none>                   
                     ; #   CPU   : @Y+11, Return Address    
                     ; #         : @Y+9, Preserved Frame Pointer
                     ; #   Locals: @Y+8  , c  size=1 char , Class[_____]
                     ; #         : @Y+7  , c2  size=1 char , Class[_____]
                     ; #         : @Y+5  , s  size=2 short , Class[_____]
                     ; #         : @Y+1  , l  size=4 long , Class[_____]
                     ; #         : sizeof(locals) = 8       
                     ; ###########################################
                     ; #### frame setup #########           ; 
                     push      r29                          ;   2: (YH) preserve Frame
                     push      r28                          ;   2: (YL)
                     in        r29, _IO_SPH                 ;   1: FP <- SP
                     in        r28, _IO_SPL                 ;   1:
                     ; #### alloc locals ########           ; 
                     sbiw      r28, 8                       ;   2: FP -= sizeof(locals))
                     out       _IO_SPH, r29                 ;   1: SP <- FP
                     out       _IO_SPL, r28                 ;   1:
                     ; #### body text ###########           ; 
                     ; ==== Compound Statement ============ ; L_Statement_compound_000001
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000002
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000004             ; 1/2:
                     ldd       r20, Y+5                     ;   2: reg16 <==s
                     ldd       r21, Y+6                     ;   2:
                     or        r20, r21                     ;   1: Cast Short to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000004:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000003             ; 1/2:
                     ldd       r20, Y+1                     ;   2: reg32 <== l
                     ldd       r21, Y+2                     ;   2:
                     ldd       r22, Y+3                     ;   2:
                     ldd       r23, Y+4                     ;   2:
                     or        r20, r21                     ;   1: Cast Long to Flag
                     or        r20, r22                     ;   1:
                     or        r20, r23                     ;   1:
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000003:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000002
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000005
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000006             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000006:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000005
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000007
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000008             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000008:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000007
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000009
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000010             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000010:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000009
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000011
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000012             ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
L_LAndOut_000012:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000011
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000013
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000014             ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
L_LAndOut_000014:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000013
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000015
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000017             ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
L_LAndOut_000017:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000016             ; 1/2:
                     ldd       r20, Y+7                     ;   2: reg8 <==c2
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000016:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000015
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000018
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000020             ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
L_LAndOut_000020:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000019             ; 1/2:
                     ldd       r20, Y+7                     ;   2: reg8 <==c2
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000019:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000018
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000021
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000022             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000022:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000021
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000023
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000025             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000025:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000024             ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000026             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000026:                                           ;    :
L_LAndOut_000024:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000023
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000027
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000029             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000029:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000028             ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000030             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000030:                                           ;    :
L_LAndOut_000028:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000027
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000031
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000033             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000033:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000032             ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000034             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000034:                                           ;    :
L_LAndOut_000032:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000031
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000035
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000037             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000037:                                           ;    :
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000036             ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000038             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000038:                                           ;    :
L_LAndOut_000036:                                           ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000035
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000039
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000040              ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
L_LOrOut_000040:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000039
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000041
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000042              ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
L_LOrOut_000042:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000041
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000043
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000044              ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LOrOut_000044:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000043
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000045
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000046              ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LOrOut_000046:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000045
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000047
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000049              ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
L_LOrOut_000049:                                            ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000048              ; 1/2:
                     ldd       r20, Y+7                     ;   2: reg8 <==c2
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LOrOut_000048:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000047
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000050
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000052              ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
L_LOrOut_000052:                                            ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000051              ; 1/2:
                     ldd       r20, Y+7                     ;   2: reg8 <==c2
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LOrOut_000051:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000050
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000053
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000055             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000055:                                           ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000054              ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000056             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000056:                                           ;    :
L_LOrOut_000054:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000053
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000057
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000059             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000059:                                           ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000058              ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000060             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000060:                                           ;    :
L_LOrOut_000058:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000057
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000061
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000063             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000063:                                           ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000062              ; 1/2:
                     ldi       r20, 0x00                    ;   1: Immediate byte 0
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000064             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000064:                                           ;    :
L_LOrOut_000062:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000061
                     ; ==== Expr Statement ================ ; L_Statement_Expression_000065
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000067             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000067:                                           ;    :
                     tst       r20                          ;   1: Logical Or
                     brne      L_LOrOut_000066              ; 1/2:
                     ldi       r20, 0x01                    ;   1: Immediate byte 1
                     tst       r20                          ;   1: Logical And
                     breq      L_LAndOut_000068             ; 1/2:
                     ldd       r20, Y+8                     ;   2: reg8 <==c
                     push      r20                          ;   2:
                     ldi       r20, 0xff                    ;   1: Immediate byte 255
                     pop       r24                          ;   2:
                     or        r20, r24                     ;   1: Or 8
                     or        r20, r20                     ;   1: Cast Byte to Flag
                     subi      r20, 0x01                    ;   1:
                     sbc       r20, r20                     ;   1:
                     andi      r20, 0x01                    ;   1:
L_LAndOut_000068:                                           ;    :
L_LOrOut_000066:                                            ;    :
                     ;      Expr end ------------           ; L_Statement_Expression_000065
                     ;      Compound End --------           ; L_Statement_compound_000001
                     ; #### exit ################           ; 
L_Exit_000000:       adiw      r28, 8                       ;   2: Y += sizeof(locals)
                     out       _IO_SPH, r29                 ;   1: SP <- Y
                     out       _IO_SPL, r28                 ;   1:
                     pop       r28                          ;   2: FP <- preserved Frame
                     pop       r29                          ;   2: 
                     ret                                    ;   4: 
                     
         
                            
                     ;.endseg                               ; === End of TEXT segment ===



                     .end                                   ; End of generated code.

; eof

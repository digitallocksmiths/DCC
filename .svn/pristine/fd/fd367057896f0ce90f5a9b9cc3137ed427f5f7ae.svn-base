// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <setjmp.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <limits.h>
#include <float.h>
#include <Windows.h>

//#include <ext\types.h>
#include "Utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "gen.h"
#include "main.h"
#include "C_Yacced.tab.h"
#include "GenStatements.h"


#ifdef _DEBUG

char *Uops[] = { "-u",  "+u",  "~u",    "u++",  "++u", "u--", "--u", "sizeof","addr", "ptr", "!u" };

char *Bops[] = { "+b",  "-b",  "*b",    "/b",   "%b", "&b",  "|b",  "^b",    "==b",  "!=b", "<b",  "<=b", ">b",    ">=b",  "&&b", "||b", ">>b", "<<b" };


void PrintNode(TPExprNode pN) {
    switch (pN->Usage) {
        case uConst:    printf("%lx ",  pN->Use.Const.lInteger);
                        break;
        case uVar:      printf("<%s> ",  pN->Use.Var.pszIdentifier);
                        break;
        case uUnary:    printf("(op ");
                        PrintNode(pN->Use.Unary.pOperand);
                        printf(")");
                        break;
        default:    Error(WARNING0, "Other ");
                    break;
    }
}

void ExprPrintInit(TPExprNode n) {
    while (n) {
        if (n->Usage != uInit) {
            Error(FATAL, "PrintInit: What !\n");
        }
        if (n->Use.Init.pAssignment) {
            PrintNode(n->Use.Init.pAssignment);
        }
        if (n->Use.Init.pChildren) {
            printf("{ ");
            ExprPrintInit(n->Use.Init.pChildren);
            printf("} ");
        }
        n=n->pSibling;
    }
}


void PrintType(int iDepth, TPExprNode n) {
    ASSERT(n->pType && ((n->pType->Usage == DecSpec) || (n->pType->Usage == DecPtr) || (n->pType->Usage == DecArray)));
    ParseDeclSpec(0, n->pType, FALSE);
 }

char *pszCasts[] = {
    "s8 to s16",
    "s8 to s32",
    "s16 to s32",
    "u8 to u16",
    "u8 to u32",
    "u16 to u32",
    "32 to 16",
    "32 to 8",
    "32 to BOOL",
    "16 to 8",
    "16 to BOOL"
};



void GenExpressionPrettyPrint(int iDepth, TPExprNode n) {
    if (!n) {
        printf("..Null\n");
        return;
    }
    
    switch (n->Usage) {
        case    uConst:     ConsoleIndent(iDepth);
                            ConsolePrintf(CON_MAGENTA_BRIGHT, "0x%x ",    n->Use.Const.lInteger);
                            PrintType(iDepth, n);
                            break;
        case    uVar:       ConsoleIndent(iDepth);
                            ConsolePrintf(CON_YELLOW_BRIGHT, "[%s",  n->Use.Var.pszIdentifier);
                            if (n->Use.Var.iFrameOffset != GLOBAL_VAR) ConsolePrintf(CON_YELLOW_BRIGHT, ":%d] ", n->Use.Var.iFrameOffset);       // variable offset
                            else                                       ConsolePrintf(CON_YELLOW_BRIGHT, "] ");                                   // variable is global
                            PrintType(iDepth, n);
                            break;
        case    uUnary:     ConsoleIndent(iDepth);
                            printf("%s ", Uops[n->Use.Unary.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Unary.pOperand);
                            break;
        case    uBinary:    GenExpressionPrettyPrint(iDepth + 1, n->Use.Binary.pLeft);
                            ConsoleIndent(iDepth);
                            printf("%s ", Bops[n->Use.Unary.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Binary.pRight);
                            break;
        case    uTernary:   ConsoleIndent(iDepth);
                            printf("Tern ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.First);
                            ConsoleIndent(iDepth);
                            printf("Then\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.Second);
                            ConsoleIndent(iDepth);
                            printf("Else\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Ternary.Third);
                            break;
        case    uDot:       GenExpressionPrettyPrint(iDepth + 1, n->Use.Dot.pRecord);
                            ConsoleIndent(iDepth);
                            printf("Dot ");
                            PrintType(iDepth, n);
                            ConsoleIndent(iDepth);
                            printf("[%s:%d]\n", n->Use.Dot.pszField, n->Use.Dot.iOffset);
                            break;
        case    uArrow:     GenExpressionPrettyPrint(iDepth + 1, n->Use.Arrow.pRecord);
                            ConsoleIndent(iDepth);
                            printf("Arrow ");
                            PrintType(iDepth, n);
                            ConsoleIndent(iDepth);
                            printf("[%s:%d]\n",n->Use.Arrow.pszField, n->Use.Arrow.iOffset);
                            break;
        case    uArray:     GenExpressionPrettyPrint(iDepth + 1, n->Use.Array.pVector);
                            ConsoleIndent(iDepth);
                            printf("Array ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Array.pIndex);
                            break;
        case    uFunc:      GenExpressionPrettyPrint(iDepth + 1, n->Use.pFunc.pFunc);
                            ConsoleIndent(iDepth);
                            printf("Function ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.pFunc.pParams);
                            break;
        case    uCast:      ConsoleIndent(iDepth);
                            printf("Cast %s", pszCasts[n->Use.Cast.Op]);
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Cast.pTarget);
                            break;
        case    uAssign:    ConsoleIndent(iDepth);
                            printf("Assign ");
                            PrintType(iDepth, n);
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Assign.pLval);
                            ConsoleIndent(iDepth);
                            printf("<==\n");
                            GenExpressionPrettyPrint(iDepth + 1, n->Use.Assign.pRval);
                            break;
        default:            Error(FATAL, "ParseExpr: What [%d]\n", n->Usage);
                            break;
    }
}
#endif // _DEBUG

// ############################################################################################
static LPSTR OperandRegImmediate(int iR1, unsigned char bVal) {
    static char caRegVal[16];
    sprintf_s(caRegVal, sizeof(caRegVal), "r%d, 0x%02x", iR1, bVal);
    return caRegVal;
}

static LPSTR OperandRegVar(int iR1, LPSTR pszVar) {
    static char caRegStr[256];
    if ((iR1 & 0x01) == 0) {
        sprintf_s(caRegStr, sizeof(caRegStr), "r%d, lo8(%s)", iR1, pszVar);
    }
    else {
        sprintf_s(caRegStr, sizeof(caRegStr), "r%d, hi8(%s)", iR1, pszVar);
    }
    return caRegStr;
}

static LPSTR OperandRegStr(int iR1, LPSTR pszStr) {
    static char caRegVal[16];
    sprintf_s(caRegVal, sizeof(caRegVal), "r%d, %s", iR1, pszStr);
    return caRegVal;
}

static LPSTR OperandRegDisp(int iR1, LPSTR pszStr, int iDisp) {
    static char caRegVal[16];
    if (iDisp < 0) {
        sprintf_s(caRegVal, sizeof(caRegVal), "r%d, %s%d", iR1, pszStr, iDisp);
    }
    else {
        sprintf_s(caRegVal, sizeof(caRegVal), "r%d, %s+%d", iR1, pszStr, iDisp);
    }
    return caRegVal;
}

static LPSTR OperandRegReg(int iR1, int iR2) {
    static char caRegPair[16];
    sprintf_s(caRegPair, sizeof(caRegPair), "r%d, r%d", iR1, iR2);
    return caRegPair;
}

static LPSTR CommentNumber(int iCycles, LPSTR pszT, long lValue) {
    static char caComment[256];
    sprintf_s(caComment, sizeof(caComment), "%3d: %s%ld", iCycles, pszT, lValue);
    return caComment;
}

static LPSTR CommentString(int iCycles, LPSTR pszT, LPSTR pszM) {
    static char caComment[256];
    sprintf_s(caComment, sizeof(caComment), "%3d: %s%s", iCycles, pszT, pszM);
    return caComment;
}


int AVR_LoadImmediate8(FILE *hOut, int iReg, unsigned char bValue) {
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(26, bValue), CommentNumber(1, "", bValue), TRUE, FALSE);
    GenAsmOut(hOut, "", "mov",  OperandRegReg(iReg, 26),         "  1:",                       TRUE, FALSE);
    return iReg + 1;
}
int  AVR_LoadImmediate16(FILE *hOut, int iReg, unsigned short nValue) {
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(26, (nValue & 0xFF)),        CommentNumber(1, "", nValue), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(27, ((nValue >> 8) & 0xFF)), "  1:",                       TRUE, FALSE);
    GenAsmOut(hOut, "", "movw", OperandRegReg(iReg, 26),                         "  1:",                       TRUE, FALSE);
    return iReg + 2;
}
int  AVR_LoadImmediate32(FILE *hOut, int iReg, unsigned long lValue) {
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(26, (lValue & 0xFF)),         CommentNumber(1, "", lValue), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(27, ((lValue >> 8) & 0xFF)),  "  1:",                       TRUE, FALSE);
    GenAsmOut(hOut, "", "movw", OperandRegReg(iReg, 26),                          "  1:",                       TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(26, ((lValue >> 16) & 0xFF)), "  1:",                       TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi",  OperandRegImmediate(27, ((lValue >> 24) & 0xFF)), "  1:",                       TRUE, FALSE);
    GenAsmOut(hOut, "", "movw", OperandRegReg(iReg+2, 26),                        "  1:",                       TRUE, FALSE);
    return iReg + 4;
}

int AVR_LoadRom8(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar), CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar), "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg, "Z"),  "  3:", TRUE, FALSE);
    return iReg + 1;
}
int  AVR_LoadRom16(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar),     CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar),     "  1:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg,     "Z+"), "  3:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg + 1, "Z"),  "  3:",                           TRUE, FALSE);
    return iReg + 2;
}
int  AVR_LoadRom32(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar),     CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar),     "  1:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg,     "Z+"), "  3:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg + 1, "Z+"), "  3:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg + 2, "Z+"), "  3:",                           TRUE, FALSE);
    GenAsmOut(hOut, "", "lpm", OperandRegStr(iReg + 3, "Z"),  "  3:",                           TRUE, FALSE);
    return iReg + 4;
}

int AVR_LoadRam8(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar), CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar), "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ld",  OperandRegStr(iReg, "Z"),  "  1:", TRUE, FALSE);
    return iReg + 1;
    ;
}
int  AVR_LoadRam16(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar),        CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar),        "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ld",  OperandRegStr(iReg, "Z"),         "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 1, "Z", 1), "  2:", TRUE, FALSE);
    return iReg + 2;
}
int  AVR_LoadRam32(FILE *hOut, int iReg, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldi", OperandRegVar(30, pszVar),        CommentString(1, "Z = ", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldi", OperandRegVar(31, pszVar),        "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ld",  OperandRegStr(iReg, "Z"),         "  1:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 1, "Z", 1), "  2:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 2, "Z", 2), "  2:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 3, "Z", 3), "  2:", TRUE, FALSE);
    return iReg + 4;
}

int AVR_LoadFrame8(FILE *hOut, int iReg, int iOffset, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg, "Y", iGlbLocalSize + iOffset), CommentString(2, "", pszVar), TRUE, FALSE);
    return iReg + 1;
}
int  AVR_LoadFrame16(FILE *hOut, int iReg, int iOffset, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg,      "Y", iGlbLocalSize + iOffset),   CommentString(2, "", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 1 , "Y", iGlbLocalSize + iOffset+1), "  2:",                       TRUE, FALSE);
    return iReg + 2;
}
int  AVR_LoadFrame32(FILE *hOut, int iReg, int iOffset, LPSTR pszVar) {
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg,     "Y", iGlbLocalSize + iOffset),     CommentString(2, "", pszVar), TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 1, "Y", iGlbLocalSize + iOffset + 1), "  2:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 2, "Y", iGlbLocalSize + iOffset + 2), "  2:", TRUE, FALSE);
    GenAsmOut(hOut, "", "ldd", OperandRegDisp(iReg + 3, "Y", iGlbLocalSize + iOffset + 3), "  2:", TRUE, FALSE);
    return iReg + 4;
    ;
}


// ############################################################################################

int GenExprConst(FILE *hOut, int iReg, TPExprNode pExpr) {
    switch (CalcSizeOf(pExpr->pType)) {
    case 1:     return AVR_LoadImmediate8(hOut, iReg, (unsigned char)pExpr->Use.Const.lInteger);
    case 2:     return AVR_LoadImmediate16(hOut, iReg, (unsigned short)pExpr->Use.Const.lInteger);
    case 4:     return AVR_LoadImmediate32(hOut, iReg, (unsigned long)pExpr->Use.Const.lInteger);
    default:    Error(FATAL, "GenExprConst: Size?\n");
        return 0;
    }
}

int GenExprVar(FILE *hOut, int iReg, TPExprNode pExpr) {
    if (pExpr->Use.Var.iFrameOffset == GLOBAL_VAR) {
        if ((pExpr->pType->Use.DecSpec.Qual & QualCONST) == QualCONST) {
            switch (CalcSizeOf(pExpr->pType)) {
            case 1:     return AVR_LoadRom8(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            case 2:     return AVR_LoadRom16(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            case 4:     return AVR_LoadRom32(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            default:    Error(FATAL, "GenExprVar Rom: Size?\n");
                return 0;
            }
        }
        else {
            switch (CalcSizeOf(pExpr->pType)) {
            case 1:     return AVR_LoadRam8(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            case 2:     return AVR_LoadRam16(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            case 4:     return AVR_LoadRam32(hOut, iReg, pExpr->Use.Var.pszIdentifier);
            default:    Error(FATAL, "GenExprVar Ram: Size?\n");
                return 0;
            }
        }

    }
    else {
        switch (CalcSizeOf(pExpr->pType)) {
        case 1:     return AVR_LoadFrame8(hOut,  iReg, pExpr->Use.Var.iFrameOffset, pExpr->Use.Var.pszIdentifier);
        case 2:     return AVR_LoadFrame16(hOut, iReg, pExpr->Use.Var.iFrameOffset, pExpr->Use.Var.pszIdentifier);
        case 4:     return AVR_LoadFrame32(hOut, iReg, pExpr->Use.Var.iFrameOffset, pExpr->Use.Var.pszIdentifier);
        default:    Error(FATAL, "GenExprVar frame: Size?\n");
            return 0;
        }
    }
}

static int GenExpr(FILE *hOut, int iReg, TPExprNode pExpr) {
    if (!pExpr) {
        printf("..Null\n");
        Error(FATAL, "GenExpr() - NULL\n");
        return 0;
    }

    int iSize = CalcSizeOf(pExpr->pType);
    if ((iSize != 1) && (iSize != 2) && (iSize != 4)) {
        Error(FATAL, "GenExpr: Size?\n");
    }

    switch (pExpr->Usage) {
    case    uConst: return GenExprConst(hOut, iReg, pExpr);
    case    uVar:   return GenExprVar(hOut, iReg, pExpr);
    case    uUnary:
        Error(FATAL, "GenExpr() - uUnary needs implementing\n");
        break;
    case    uBinary:
        Error(FATAL, "GenExpr() - uBinary needs implementing\n");
        break;
    case    uTernary:
        Error(FATAL, "GenExpr() - uTernary needs implementing\n");
        break;
    case    uDot:
        Error(FATAL, "GenExpr() - uDot needs implementing\n");
        break;
    case    uArrow:
        Error(FATAL, "GenExpr() - uArrow needs implementing\n");
        break;
    case    uArray:
        Error(FATAL, "GenExpr() - uArray needs implementing\n");
        break;
    case    uFunc:
        Error(FATAL, "GenExpr() - uFunc needs implementing\n");
        break;
    case    uCast:
        Error(FATAL, "GenExpr() - uCast needs implementing\n");
        break;
    case    uAssign:
        Error(FATAL, "GenExpr() - uAssign needs implementing\n");
        break;
    default:
        Error(FATAL, "GenExpr() - [%d]\n", pExpr->Usage);
        break;
    }
    return 0;

}

// ##########################################################################
// #  Function: GenExpression
// #        <todo: task brief description>
// #
// #        <todo: task detailed description>
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void    GenExpression(FILE *hOut, TPExprNode pExpr) {

    GenExpr(hOut, EXP_REG_BASE, pExpr);

}

/* eof */


#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 2 "C.Y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:  19.07.95                */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "main.h"

/* Yacc generates two unreferenced lables for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 62 "C.Y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    LPSTR   Ident;           /* labels/strings/identifiers etc*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;
    LPVOID  ptr;
} YYSTYPE;
#line 47 "C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define IDENTIFIER 291
#define STRINGliteral 292
#define INTEGERconstant 293
#define CHARACTERconstant 294
#define FLOATINGconstant 295
#define ENUMERATIONconstant 296
#define TYPEDEFname 297
#define ARROW 298
#define INC 299
#define DEC 300
#define LS 301
#define RS 302
#define LE 303
#define GE 304
#define EQ 305
#define NE 306
#define ANDAND 307
#define OROR 308
#define ELLIPSIS 309
#define MULTassign 310
#define DIVassign 311
#define MODassign 312
#define PLUSassign 313
#define MINUSassign 314
#define LSassign 315
#define RSassign 316
#define ANDassign 317
#define XORassign 318
#define ORassign 319
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   53,   53,   54,   54,   55,   55,   55,   55,   14,
   14,   57,   57,    4,    4,    4,    4,    4,    4,    5,
    5,    5,    5,    5,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
   20,   20,   20,   21,   21,   15,   15,   13,   13,   12,
   12,   16,   17,   17,   17,   17,   18,   18,   19,   19,
   19,    3,    3,    3,    1,    1,    2,    2,   10,   10,
   11,   11,   11,   11,   11,   11,   11,    8,    8,    8,
    8,    9,    9,   22,   22,   23,   23,   24,   24,   24,
   25,   25,   26,   26,   26,   27,   27,   28,   28,   29,
   29,   29,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   58,   58,   58,   58,   58,   58,   59,   59,   59,
   60,   60,   56,   56,   56,   56,   64,   64,   61,   61,
   61,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   63,   63,   63,   63,   63,   31,   31,   32,   32,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   34,   34,   35,   36,   36,   37,   37,   38,   38,
   39,   39,   40,   40,   41,   41,   41,   42,   42,   42,
   42,   42,   43,   43,   43,   44,   44,   44,   45,   45,
   45,   45,   46,   46,   47,   47,   47,   47,   47,   47,
   48,   48,   48,   48,   48,   48,   49,   49,   49,   49,
   49,   49,   49,   49,   50,   50,   50,   50,   51,   51,
   52,   52,   52,   52,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    2,    3,    3,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    5,    2,    1,    1,    1,    2,    1,    3,    1,
    3,    3,    1,    2,    1,    2,    1,    3,    1,    2,
    3,    4,    5,    2,    1,    3,    1,    3,    1,    2,
    1,    3,    3,    4,    4,    3,    4,    1,    2,    2,
    3,    1,    2,    1,    3,    1,    3,    2,    1,    2,
    1,    3,    1,    3,    4,    1,    3,    1,    2,    1,
    2,    1,    3,    2,    3,    3,    4,    2,    3,    3,
    4,    1,    1,    1,    1,    1,    1,    3,    4,    3,
    1,    2,    2,    3,    3,    4,    1,    2,    5,    7,
    5,    5,    6,    6,    7,    7,    8,    7,    8,    8,
    9,    3,    2,    2,    2,    3,    1,    3,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    5,    1,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    1,    4,    1,    2,    2,    2,    2,    4,
    1,    1,    1,    1,    1,    1,    1,    4,    3,    4,
    3,    3,    2,    2,    1,    1,    1,    3,    1,    3,
    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   44,   29,    0,   21,   24,   26,   23,
   45,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   71,   36,    0,    0,    0,   35,    0,    0,    0,
    0,    0,    0,    0,    5,   34,    0,    0,    2,    4,
    0,    0,    0,   82,   80,    0,   10,    0,   48,    0,
   15,   17,   19,    0,    0,    0,   12,    6,    0,    0,
    0,    0,    0,    3,    0,    0,    0,   65,   72,   83,
   81,    0,    7,    0,   11,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  217,
  221,  222,  223,  224,    0,    0,  121,  123,    0,  202,
  201,  203,  204,  205,  206,    0,  147,  149,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  189,    0,
    0,    0,  207,  216,  114,    0,  127,  112,  113,  115,
  116,  117,    0,    0,   13,    8,   91,   76,    0,    0,
    0,   86,    0,  215,   73,  164,    0,  193,    0,    0,
    0,    0,   46,    0,    0,    0,   62,    0,    0,   51,
   93,    9,   49,  144,    0,    0,  145,    0,  143,    0,
    0,    0,    0,  199,    0,    0,    0,    0,    0,  196,
  197,    0,    0,    0,  122,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  152,  153,  154,  155,  156,
  157,  158,  159,  160,  161,  151,    0,  198,    0,  213,
  214,    0,    0,    0,  125,    0,  124,  128,    0,    0,
    0,   88,   90,    0,   75,    0,    0,   77,   74,    0,
   54,   56,   41,   47,    0,    0,    0,   57,   63,   68,
   66,   96,    0,    0,    0,  146,    0,    0,  120,  142,
    0,    0,    0,    0,  118,    0,    0,   99,    0,  218,
  148,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  190,  191,  192,
  150,  212,  209,  219,    0,    0,  211,  126,  108,    0,
    0,  104,    0,    0,    0,    0,   85,   87,   92,   42,
   60,    0,   52,    0,   94,    0,    0,  119,    0,    0,
    0,  200,    0,    0,    0,  194,    0,    0,  210,  208,
  110,  103,  106,  109,    0,  105,    0,   61,   58,   95,
   97,  131,    0,    0,    0,    0,    0,    0,    0,  132,
  163,  220,  111,  107,  134,    0,    0,    0,    0,    0,
    0,  133,    0,  138,  136,    0,  135,    0,    0,    0,
  130,  140,  139,  137,    0,  141,
};
short yydgoto[] = {                                      26,
   67,   68,   27,   56,   29,   30,   31,   32,   46,   33,
   34,   49,   50,   57,  152,  153,  154,  247,  248,   36,
   37,  300,  141,  142,  143,  160,  253,  183,  301,  234,
  106,  107,  217,  108,  147,  109,  110,  111,  112,  113,
  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
  295,  124,   38,   39,   40,  125,   59,  127,  128,  129,
  130,  131,  132,  133,
};
short yysindex[] = {                                   2190,
    0,    0,    0,    0,    0, -100,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   85,  309,    0,    0,  -35, 2555, 2555,
 2555,  -31, 2410,   28,    0,    0,  -90, 2190,    0,    0,
  -81, -247,   39,    0,    0,  309,    0, 2374,    0,   20,
    0,    0,    0,   28,  865,  -35,    0,    0, 2410, 1614,
 1347,  -41, 2588,    0, -247,   30,  -19,    0,    0,    0,
    0,  644,    0, 2410,    0,   85,   44,   76, 1766,  982,
   61,  104,  102,  -94, 1780, 1332,  241,  268,  158,    0,
    0,    0,    0,    0, 1800, 1800,    0,    0,  956,    0,
    0,    0,    0,    0,    0,   82,    0,    0,  -60,  -61,
  221,  253,  339, -150,   38,  -73,  264,  297,    0,  -15,
 1766,  -24,    0,    0,    0,  909,    0,    0,    0,    0,
    0,    0, 1221,  322,    0,    0,    0,    0,   81,  354,
  352,    0,   37,    0,    0,    0,  311,    0, 2588, 2588,
 2588, 2443,    0,  -32,   -1, 1766,    0, -247,  644,    0,
    0,    0,    0,    0, 1766,  355,    0,  156,    0, 1365,
 1332,  371,  956,    0,  151, 1766, 1766, 1332, 1766,    0,
    0,  170,  417,   95,    0, 1766, 1766, 1766, 1766, 1766,
 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766,
 1766, 1766, 1766, 1766, 1766,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1766,    0,  191,    0,
    0, 1392, 1766,  199,    0, 1258,    0,    0, 2014, 1438,
  -26,    0,    0,   47,    0, 2511,  202,    0,    0, 2476,
    0,    0,    0,    0, 1766,  409,  160,    0,    0,    0,
    0,    0,    4,  206, 1332,    0, 1406,  177,    0,    0,
  435,  454,  299,  343,    0, 2149,   68,    0, 1766,    0,
    0,  -61,  176,  221,  253,  339, -150,   38,   38,  -73,
  -73,  -73,  -73,  264,  264,  297,  297,    0,    0,    0,
    0,    0,    0,    0,  361,   -7,    0,    0,    0,  459,
  462,    0,  412,   47, 2339, 1629,    0,    0,    0,    0,
    0, 1766,    0,  -32,    0,  590, 1332,    0, 1670,  207,
 1702,    0, 1766, 1332, 1332,    0, 1766, 1766,    0,    0,
    0,    0,    0,    0,  463,    0,  420,    0,    0,    0,
    0,    0, 1332,  368, 1724, 1738,  246,  376,  252,    0,
    0,    0,    0,    0,    0, 1332, 1332,  403, 1332,  404,
 1752,    0, 1332,    0,    0, 1332,    0, 1332, 1332,  413,
    0,    0,    0,    0, 1332,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,    0,    0,    0,  107,  411,
  457,    0,    0, 2256,    0,    0,    0,  520,    0,    0,
 1891,    0,    0,    0,    0,  338,    0,  302,    0,    0,
    0,    0,    0, 2297,    0,    0,    0,    0,    0,    0,
    0, 2094,    0,    0,    0,    8,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  722,   25,
 1002,  904,  772,  -23,  702,  471,  402,  130,    0,  120,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  302,    0,    0,    0,    0,  415,    0,
  476,    0,    0,    0,    0,    0,    0,    0,    0,  -29,
  112,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  480,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  427,    0,    0,  433,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  329,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  482,    0,    0,    0,
    0,  481,    0, 1263, 1304, 1226,  798,  747,  770,  494,
  517,  545,  679,  425,  448,  348,  356,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  434,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1295,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
  472,  366,    0,    1,    0,  807,  522,    3,    0,  -22,
  -13,  452,    0,  184,  387, -135,   36,    0,  229,    0,
    0,  -56,    0,  310,    0, -121,    0,  372, -119, -190,
   29,  163,    0,  -34,  613,    0,  364,  370,  373,  369,
  374,   48,  140,   64,   86,   22, 2023,    0,    0,    0,
    0,    0,    0,  524,    0,  220,  185,  -86,    0,    0,
    0,    0,    0,  441,
};
#define YYTABLESIZE 2885
short yytable[] = {                                     175,
   28,   43,  188,  140,   24,   48,   25,   24,   24,   25,
   53,   53,   53,  229,  173,  222,  244,  173,   54,  233,
  173,  224,   42,   47,  158,  245,  146,   45,   53,   51,
   52,   53,   63,  134,  173,  173,  186,  252,   28,  173,
  304,   65,  158,   66,  146,  216,  228,  316,   71,  215,
  215,   67,  215,  134,  215,  215,  215,  215,  215,  215,
  139,   53,  268,   76,  230,  165,  223,   60,  165,  173,
  173,  215,  215,  215,  215,  215,  304,  238,   75,   69,
  237,  149,  165,  165,  259,  330,  305,  165,  195,  195,
  156,  265,  195,  195,  195,  195,  195,  197,  195,  198,
  173,  173,  164,  215,  244,  157,  215,  266,  168,  195,
  195,  195,  195,  195,  195,  165,  232,  165,   61,  169,
  229,  146,   25,  249,   24,  186,   25,  184,  315,   78,
   78,  246,   67,   78,  182,  270,  215,  306,  186,  228,
  185,  231,  218,  170,  195,  195,   14,   14,   14,  165,
   14,   55,   55,   55,  193,  194,  193,  193,  230,  171,
  193,  193,  193,  193,  193,   14,  193,  186,  318,   55,
  186,  230,  186,  186,  186,  195,  195,  193,  193,  193,
   78,  193,  193,   35,  267,  241,  242,  186,  186,  186,
   41,  186,  186,  254,  341,  146,  172,   14,  258,  186,
   62,  184,   55,  314,  263,  264,   43,  184,  182,  266,
  146,   25,  193,  193,  256,  178,  273,   54,  313,  186,
  186,   35,  186,  186,  288,  289,  290,  199,  200,  139,
  342,  231,   74,  327,  161,  321,  139,  349,  350,  126,
  278,  279,  135,  193,  193,  189,  317,  187,  335,  186,
  186,  296,   58,  186,  186,   22,  355,  135,   22,   22,
  230,   53,  284,  285,   22,  345,  139,   73,  267,  364,
  365,  146,  367,  219,  220,  221,  371,  146,  136,  372,
  176,  373,  374,  173,  173,  320,  286,  287,  376,  186,
  326,  246,  351,  162,  206,  207,  208,  209,  210,  211,
  212,  213,  214,  215,  361,  139,  201,  177,  202,  135,
  215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  161,  215,  215,  215,  215,  215,  215,  215,  215,
  215,  215,  165,  205,  280,  281,  282,  283,  203,  324,
  195,  196,  186,  204,  190,   50,  191,  344,  271,  347,
   25,  348,  195,  195,  195,  195,  195,  195,  195,  195,
   50,  195,  195,  195,  195,  195,  195,  195,  195,  195,
  195,   22,   59,  358,  360,   22,  192,   79,   79,  291,
   78,   79,   72,  325,  294,  187,  186,   59,  187,  370,
  187,  187,  187,  188,  235,  236,  188,   14,  188,  188,
  188,  329,   55,  239,  328,  187,  187,  187,  356,  187,
  187,  186,  255,  188,  188,  188,  362,  188,  188,  186,
  193,  193,  193,  193,  193,  193,  193,  193,   79,  260,
  186,  186,  186,  186,  186,  186,  186,  186,  262,  183,
  187,  187,  183,  366,  368,  183,  186,  186,  188,  188,
   16,   16,   16,  375,   16,   89,  186,  269,   89,  183,
  183,  183,  184,  183,  183,  184,  312,  100,  184,   16,
  100,  187,  187,  102,  101,  322,  102,  101,  161,  188,
  188,  292,  184,  184,  184,  185,  184,  184,  185,  297,
  352,  185,  309,  323,  183,  183,   18,   18,   18,  331,
   18,   16,  332,  353,  333,  185,  185,  185,  178,  185,
  185,  178,  354,  363,  178,   18,   84,  184,  184,    1,
   98,  166,  100,  251,  166,  183,  183,  163,  178,  178,
  178,  181,  178,  178,  181,  240,  155,  181,  166,  166,
  185,  185,  339,  166,  261,  308,   44,   18,  184,  184,
  272,  181,  181,  181,  182,  181,  181,  182,  274,  276,
  182,   64,  275,  178,  178,  277,  226,   70,    0,    0,
    0,  185,  185,  166,  182,  182,  182,    0,  182,  182,
    0,   12,  179,    0,  151,  179,  181,  181,  179,    0,
    0,    0,   18,    0,  178,  178,    0,   20,   21,    0,
    0,    0,  179,  179,  179,  166,  179,  179,    0,  182,
  182,    0,    0,    0,    0,    0,    0,  181,  181,    0,
  151,    0,  105,    0,    0,    0,    0,  101,   79,   99,
    0,  100,  102,    0,  103,    0,    0,  179,  179,    0,
  182,  182,    0,    0,    0,    0,    0,    0,  187,  187,
  187,  187,  187,  187,  187,  187,  188,  188,  188,  188,
  188,  188,  188,  188,    0,    0,    0,    0,  179,  179,
  151,  151,  151,  151,    0,    0,  105,    0,    0,    0,
    0,  101,    0,   99,    0,  100,  102,    0,  103,    0,
    0,  166,    0,    0,  151,    0,    0,    0,    0,    0,
    0,   16,  183,  183,  183,  183,  183,  183,  183,  183,
    0,    0,  159,    0,  340,  104,  180,    0,    0,  180,
    0,    0,  180,    0,    0,  184,  184,  184,  184,  184,
  184,  184,  184,    0,    0,    0,  180,  180,  180,  175,
  180,  180,  175,    0,    0,  175,    0,   18,  185,  185,
  185,  185,  185,  185,  185,  185,    0,    0,    0,  175,
  175,  151,  162,    0,  175,  162,  159,    0,  250,  104,
    0,  180,  180,  178,  178,  178,  178,  178,  178,  162,
  162,    0,    0,    0,  176,    0,    0,  176,  166,    0,
  176,    0,    0,    0,  175,  175,  181,  181,  181,  181,
  181,  181,  180,  180,  176,  176,    0,  177,    0,  176,
  177,    0,  171,  177,  162,  171,    0,    0,    0,  182,
  182,  182,  182,  182,  182,  175,  175,  177,  177,  171,
  171,    0,  177,    0,  171,  174,    0,    0,  174,  176,
  176,  174,  303,    0,    0,    0,  162,  179,  179,  179,
  179,  179,  179,    0,    0,  174,  174,  311,    0,    0,
  174,    0,  177,  177,  171,  171,    0,    0,    0,  150,
  176,  176,   85,    0,    0,    0,    0,    0,    0,    0,
  144,   90,   91,   92,   93,   94,    0,    0,   95,   96,
  174,  174,    0,  177,  177,  171,  171,  105,    0,    0,
    0,    0,  101,    0,   99,  150,  100,  102,    0,  103,
    0,    0,    0,    0,    0,    0,    0,    0,  337,    0,
    0,  174,  174,   97,  338,    0,   85,    0,    0,    0,
    0,    0,    0,    0,  144,   90,   91,   92,   93,   94,
    0,  105,   95,   96,  169,    0,  101,  169,   99,    0,
  100,  102,    0,  103,    0,  150,  150,  150,  150,    0,
    0,  169,  169,    0,    0,    0,  169,   97,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
    0,  180,  180,  180,  180,  180,  180,   55,  105,   98,
  104,    0,    0,  101,    0,   99,  169,  100,  102,    0,
  103,    0,    0,    0,    0,    0,  175,  175,  175,  175,
    0,    0,    0,    0,  105,    0,    0,    0,    0,  101,
    0,   99,    0,  100,  102,    0,  103,  169,  169,    0,
    0,   55,    0,  225,  104,    0,    0,    0,    0,    0,
  167,    0,  167,    0,    0,  167,  150,    0,    0,    0,
    0,  176,  176,  176,  176,    0,    0,    0,    0,  167,
  167,    0,    0,    0,  167,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  177,  177,  177,  177,  171,  171,
    0,  104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  167,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  174,  174,    0,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    2,    3,    4,   77,  167,    5,   78,   79,
    6,    7,    8,    9,   10,   80,   11,   12,   13,   14,
   15,   81,   82,   16,   17,   83,   84,   85,   18,   86,
   87,   19,   88,   20,   21,   89,   90,   91,   92,   93,
   94,   23,    0,   95,   96,    1,    2,    3,    4,   77,
    0,    5,   78,   79,    6,    7,    8,    9,   10,   80,
   11,   12,   13,   14,   15,   81,   82,   16,   17,   83,
   84,   85,   18,   86,   87,   19,   88,   20,   21,   89,
   90,   91,   92,   93,   94,   23,    0,   95,   96,    0,
  169,  169,    0,    2,    3,    4,    0,    0,    5,    0,
    0,    6,    0,    0,    9,    0,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,   85,   18,
    0,    0,    0,    0,   20,   21,  144,   90,   91,   92,
   93,   94,   23,  105,   95,   96,    0,    0,  101,    0,
   99,    0,  100,  102,   85,  103,  172,    0,    0,  172,
    0,    0,  144,   90,   91,   92,   93,   94,    0,   97,
   95,   96,    0,  172,  172,    0,    0,    0,  172,    0,
  105,    0,    0,    0,    0,  101,    0,   99,    0,  100,
  102,    0,  103,  168,    0,    0,  168,    0,  167,  167,
    0,    0,    0,    0,    0,    0,   97,    0,  172,  172,
  168,  168,    0,    0,    0,  168,    0,  129,    0,    0,
    0,    0,  129,    0,  129,    0,  129,  129,    0,  129,
    0,    0,    0,   55,  170,  227,  104,  170,    0,  172,
  172,    0,    0,  129,    0,  168,    0,    0,    0,    0,
    0,  170,  170,    0,  105,    0,  170,    0,    0,  101,
    0,   99,    0,  100,  102,    0,  103,    0,    0,  105,
   55,    0,  298,  104,  101,    0,   99,  168,  100,  102,
   97,  103,    0,    0,    0,    0,  170,  105,    0,    0,
    0,    0,  101,    0,   99,    0,  100,  102,    0,  103,
    0,    0,    0,    0,    0,    0,    0,  129,    0,  129,
  129,    0,    0,  257,  105,    0,    0,  170,  170,  101,
    0,   99,  293,  100,  102,    0,  103,    0,  105,  145,
    0,    0,    0,  101,    0,   99,    0,  100,  102,    0,
  103,    0,    0,    0,   55,    0,    0,  104,    0,    0,
    0,    0,    0,    0,  319,    0,    0,    0,    0,    0,
  105,    0,  104,    0,    0,  101,    0,   99,    0,  100,
  102,   77,  103,    0,   78,   79,    0,    0,    0,    0,
  104,   80,    0,    0,    0,    0,    0,   81,   82,    0,
    0,   83,   84,   85,    0,   86,   87,    0,   88,    0,
    0,   89,   90,   91,   92,   93,   94,  104,   77,   95,
   96,   78,   79,    0,    0,    0,    0,    0,   80,    0,
  302,  104,  172,  172,   81,   82,    0,    0,   83,   84,
   85,    0,   86,   87,    0,   88,    0,    0,   89,   90,
   91,   92,   93,   94,    0,  129,   95,   96,  129,  129,
    0,    0,    0,  104,    0,  129,    0,    0,    0,  168,
  168,  129,  129,    0,    0,  129,  129,  129,    0,  129,
  129,    0,  129,    0,    0,  129,  129,  129,  129,  129,
  129,    0,   77,  129,  129,   78,   79,    0,    0,    0,
    0,    0,   80,    0,    0,    0,    0,    0,   81,   82,
  170,  170,   83,   84,   85,    0,   86,   87,    0,   88,
    0,    0,   89,   90,   91,   92,   93,   94,    0,   85,
   95,   96,    0,    0,    0,    0,    0,  144,   90,   91,
   92,   93,   94,    0,    0,   95,   96,   85,    0,    0,
    0,    0,    0,    0,  138,  144,   90,   91,   92,   93,
   94,  105,    0,   95,   96,    0,  101,    0,   99,    0,
  100,  102,    0,  103,   85,    0,    0,    0,    0,    0,
    0,    0,  144,   90,   91,   92,   93,   94,   85,    0,
   95,   96,    0,    0,    0,    0,  144,   90,   91,   92,
   93,   94,  105,    0,   95,   96,    0,  101,    0,   99,
  343,  100,  102,    0,  103,    0,    0,    0,    0,    0,
   85,  336,    0,    0,    0,    0,    0,    0,  144,   90,
   91,   92,   93,   94,  105,    0,   95,   96,    0,  101,
    0,   99,    0,  100,  102,    0,  103,    0,    0,    0,
    0,    0,    0,    0,  104,    0,  105,    0,    0,    0,
  346,  101,    0,   99,  357,  100,  102,    0,  103,    0,
  105,    0,    0,    0,    0,  101,    0,   99,  359,  100,
  102,    0,  103,    0,  105,    0,    0,    0,    0,  101,
    0,   99,  369,  100,  102,  104,  103,    0,  105,    0,
    0,    0,    0,  101,    0,   99,    0,  100,  102,    0,
  103,    0,  105,    0,    0,    0,    0,  101,    0,  173,
    0,  100,  102,    0,  103,    0,    0,  104,    0,    0,
    0,    0,  105,    0,    0,    0,    0,  101,    0,  179,
    0,  100,  102,    0,  103,    0,    0,    0,    0,  104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
    1,    2,    3,    4,    0,    0,    5,  104,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,  104,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,  137,  104,    0,    0,    0,    0,
   23,   85,    0,    0,    0,    0,    0,    0,    0,  144,
   90,   91,   92,   93,   94,  104,    0,   95,   96,    0,
   64,   64,   64,    0,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   64,   64,
    0,    0,   85,    0,    0,    0,    0,    0,    0,    0,
  144,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   64,    0,    0,   85,    0,    0,    0,    0,    0,
    0,    0,  144,   90,   91,   92,   93,   94,    0,    0,
   95,   96,    0,    0,    0,    0,   85,    0,    0,    0,
    0,    0,    0,    0,  144,   90,   91,   92,   93,   94,
   85,    0,   95,   96,    0,    0,    0,    0,  144,   90,
   91,   92,   93,   94,   85,    0,   95,   96,    0,    0,
    0,    0,  144,   90,   91,   92,   93,   94,   85,    0,
   95,   96,    0,  229,  299,   25,  144,   90,   91,   92,
   93,   94,   85,    0,   95,   96,    0,    0,    0,    0,
  144,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,    0,   85,  148,    0,    0,    0,    0,    0,    0,
  144,   90,   91,   92,   93,   94,    0,    0,   95,   96,
    0,  148,    0,    0,  230,    0,    0,  174,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  180,  181,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,   43,   43,    0,   43,    0,    0,
    0,    0,    0,  148,    0,    0,    0,   64,   64,   64,
   64,   43,   43,   64,    0,    0,   64,   64,   64,   64,
   64,    0,   64,   64,   64,   64,   64,    0,    0,   64,
   64,    0,    0,    0,   64,    0,    0,   64,  148,   64,
   64,   64,    0,    0,   43,    0,    0,   64,  266,  299,
   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  148,
    0,  148,  148,  148,  148,  148,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,  148,    0,   24,
    0,   25,    0,    0,    0,    0,    0,    0,    0,  230,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  148,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  148,    0,    0,
    1,    2,    3,    4,    0,    0,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,  148,   16,   17,    0,    0,   69,   18,    0,   69,
   19,    0,   20,   21,   22,    0,    0,    0,    0,    0,
   23,    0,    0,   69,   69,    0,   69,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  148,    0,
    0,    0,    0,    0,  148,    0,    0,   70,    0,    0,
   70,    0,    0,    0,    0,    0,    0,    0,    0,  148,
   43,   43,   43,   43,   70,   70,   43,   70,    0,   43,
   43,   43,   43,   43,    0,   43,   43,   43,   43,   43,
    0,    0,   43,   43,    0,    0,    0,   43,   69,  334,
   43,    0,   43,   43,   43,    0,    0,    0,    0,    0,
   43,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    1,    2,    3,    4,    0,
    0,    5,    0,    0,    6,    7,    8,    9,   10,   70,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,    0,   72,   19,    0,   20,   21,    0,
    0,    0,    0,    0,    0,   23,    1,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
   22,    0,    0,    0,    0,    0,   23,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   55,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   69,   69,   69,   69,    0,    0,   69,    0,
    0,   69,   69,   69,   69,   69,    0,   69,   69,   69,
   69,   69,   55,    0,   69,   69,    0,    0,    0,   69,
    0,    0,   69,    0,   69,   69,    0,    0,    0,    0,
    0,    0,   69,   70,   70,   70,   70,    0,    0,   70,
    0,    0,   70,   70,   70,   70,   70,  243,   70,   70,
   70,   70,   70,    0,    0,   70,   70,    0,    0,    0,
   70,    0,    0,   70,    0,   70,   70,    0,    0,    0,
    0,    0,    0,   70,    0,    1,    2,    3,    4,    0,
  310,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,    0,   18,    0,    0,   19,    0,   20,   21,    0,
    1,    2,    3,    4,    0,   23,    5,    0,    0,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    0,    0,    1,    2,    3,    4,
   23,    0,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
    2,    3,    4,    0,    0,    5,   23,    0,    6,    0,
    0,    9,    0,    0,   11,   12,   13,   14,   15,    0,
    0,   16,   17,    0,    0,    0,   18,    0,    0,    0,
    0,   20,   21,    2,    3,    4,    0,    0,    5,   23,
    0,    6,    0,    0,    9,    0,    0,   11,   12,   13,
   14,   15,    0,    0,   16,   17,    0,    0,    0,   18,
    0,    0,    0,    0,   20,   21,    0,    1,    2,    3,
    4,    0,   23,    5,    0,    0,    6,    7,    8,    9,
   10,    0,   11,   12,   13,   14,   15,    0,    0,   16,
   17,    0,    0,    0,   18,    0,    0,   19,    0,   20,
   21,    0,    0,    0,    0,    0,    0,   23,    0,    0,
    0,    1,    2,    3,    4,    0,    0,    5,    0,  307,
    6,    7,    8,    9,   10,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,   19,    0,   20,   21,    2,    3,    4,    0,    0,
    5,   23,    0,    6,    0,    0,    9,    0,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,    0,    0,    0,    0,   20,   21,    0,    0,
    0,    0,    0,    0,   23,
};
short yycheck[] = {                                      86,
    0,   24,   63,   60,   40,   28,   42,   40,   40,   42,
   40,   41,   42,   40,   38,   40,  152,   41,   32,  139,
   44,   46,  123,   59,   44,   58,   61,   25,   58,   29,
   30,   31,  123,   56,   58,   59,   44,  159,   38,   63,
  231,  123,   44,  291,   79,   61,  133,   44,   46,   37,
   38,   44,   40,   76,   42,   43,   44,   45,   46,   47,
   60,   91,  182,   44,   91,   41,   91,   40,   44,   93,
   94,   59,   60,   61,   62,   63,  267,   41,   59,   41,
   44,  123,   58,   59,  171,   93,   40,   63,   37,   38,
   61,  178,   41,   42,   43,   44,   45,   60,   47,   62,
  124,  125,   59,   91,  240,  125,   94,   40,   80,   58,
   59,   60,   61,   62,   63,   40,  139,   93,   91,   59,
   40,  156,   42,  125,   40,   44,   42,   99,  125,   40,
   41,  154,  125,   44,   99,   41,  124,   91,   44,  226,
   59,  139,  121,   40,   93,   94,   40,   41,   42,  125,
   44,   40,   41,   42,  305,  306,   37,   38,   91,   58,
   41,   42,   43,   44,   45,   59,   47,   38,  255,   58,
   41,   91,   43,   44,   45,  124,  125,   58,   59,   60,
   91,   62,   63,    0,  182,  150,  151,   58,   59,   60,
  291,   62,   63,  165,  316,  230,  291,   91,  170,   44,
  291,  173,   91,   44,  176,  177,  229,  179,  173,   40,
  245,   42,   93,   94,   59,   58,  188,  231,   59,   44,
   44,   38,   93,   94,  203,  204,  205,  301,  302,  229,
  317,  229,   48,   58,   72,   59,  236,  324,  325,   55,
  193,  194,   59,  124,  125,  307,   41,  308,  305,   44,
   44,  223,   33,  124,  125,  291,  343,   74,  291,  291,
   91,  291,  199,  200,  291,   59,  266,   48,  266,  356,
  357,  306,  359,  298,  299,  300,  363,  312,   59,  366,
   40,  368,  369,  307,  308,  257,  201,  202,  375,   44,
  269,  314,  327,   74,  310,  311,  312,  313,  314,  315,
  316,  317,  318,  319,   59,  305,   43,   40,   45,  126,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  159,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,  308,   37,  195,  196,  197,  198,   42,   41,
  303,  304,   44,   47,  124,   44,   94,  319,  186,  321,
   42,  323,  301,  302,  303,  304,  305,  306,  307,  308,
   59,  310,  311,  312,  313,  314,  315,  316,  317,  318,
  319,  291,   44,  345,  346,  291,   38,   40,   41,  217,
  291,   44,   61,   41,  222,   38,   44,   59,   41,  361,
   43,   44,   45,   38,   41,   44,   41,  291,   43,   44,
   45,   41,  291,   93,   44,   58,   59,   60,   41,   62,
   63,   44,   58,   58,   59,   60,   41,   62,   63,   44,
  301,  302,  303,  304,  305,  306,  307,  308,   91,   59,
  301,  302,  303,  304,  305,  306,  307,  308,  288,   38,
   93,   94,   41,   41,   41,   44,   44,   44,   93,   94,
   40,   41,   42,   41,   44,   41,   44,   41,   44,   58,
   59,   60,   38,   62,   63,   41,   58,   41,   44,   59,
   44,  124,  125,   41,   41,   41,   44,   44,  316,  124,
  125,  291,   58,   59,   60,   38,   62,   63,   41,  291,
  328,   44,  291,   40,   93,   94,   40,   41,   42,   41,
   44,   91,   41,   41,   93,   58,   59,   60,   38,   62,
   63,   41,   93,  262,   44,   59,   41,   93,   94,    0,
   41,   41,   41,  158,   44,  124,  125,   76,   58,   59,
   60,   38,   62,   63,   41,  149,   65,   44,   58,   59,
   93,   94,  314,   63,  173,  236,   25,   91,  124,  125,
  187,   58,   59,   60,   38,   62,   63,   41,  189,  191,
   44,   38,  190,   93,   94,  192,  126,   46,   -1,   -1,
   -1,  124,  125,   93,   58,   59,   60,   -1,   62,   63,
   -1,  273,   38,   -1,   63,   41,   93,   94,   44,   -1,
   -1,   -1,  284,   -1,  124,  125,   -1,  289,  290,   -1,
   -1,   -1,   58,   59,   60,  125,   62,   63,   -1,   93,
   94,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   99,   -1,   33,   -1,   -1,   -1,   -1,   38,  291,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   93,   94,   -1,
  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,  124,  125,
  149,  150,  151,  152,   -1,   -1,   33,   -1,   -1,   -1,
   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,
   -1,   79,   -1,   -1,  173,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  301,  302,  303,  304,  305,  306,  307,  308,
   -1,   -1,  123,   -1,  125,  126,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,  301,  302,  303,  304,  305,
  306,  307,  308,   -1,   -1,   -1,   58,   59,   60,   38,
   62,   63,   41,   -1,   -1,   44,   -1,  291,  301,  302,
  303,  304,  305,  306,  307,  308,   -1,   -1,   -1,   58,
   59,  240,   41,   -1,   63,   44,  123,   -1,  156,  126,
   -1,   93,   94,  303,  304,  305,  306,  307,  308,   58,
   59,   -1,   -1,   -1,   38,   -1,   -1,   41,  308,   -1,
   44,   -1,   -1,   -1,   93,   94,  303,  304,  305,  306,
  307,  308,  124,  125,   58,   59,   -1,   38,   -1,   63,
   41,   -1,   41,   44,   93,   44,   -1,   -1,   -1,  303,
  304,  305,  306,  307,  308,  124,  125,   58,   59,   58,
   59,   -1,   63,   -1,   63,   38,   -1,   -1,   41,   93,
   94,   44,  230,   -1,   -1,   -1,  125,  303,  304,  305,
  306,  307,  308,   -1,   -1,   58,   59,  245,   -1,   -1,
   63,   -1,   93,   94,   93,   94,   -1,   -1,   -1,   63,
  124,  125,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,   -1,  299,  300,
   93,   94,   -1,  124,  125,  124,  125,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   99,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
   -1,  124,  125,   59,  312,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
   -1,   33,  299,  300,   41,   -1,   38,   44,   40,   -1,
   42,   43,   -1,   45,   -1,  149,  150,  151,  152,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   59,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  173,
   -1,  303,  304,  305,  306,  307,  308,  123,   33,  125,
  126,   -1,   -1,   38,   -1,   40,   93,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,  124,  125,   -1,
   -1,  123,   -1,  125,  126,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   41,   -1,   -1,   44,  240,   -1,   -1,   -1,
   -1,  305,  306,  307,  308,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  305,  306,  307,  308,  307,  308,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  307,  308,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,  125,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,   -1,  299,  300,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  270,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,   -1,  299,  300,   -1,
  307,  308,   -1,  258,  259,  260,   -1,   -1,  263,   -1,
   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,  283,  284,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
  295,  296,  297,   33,  299,  300,   -1,   -1,   38,   -1,
   40,   -1,   42,   43,  283,   45,   41,   -1,   -1,   44,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,   59,
  299,  300,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   41,   -1,   -1,   44,   -1,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   59,   -1,   93,   94,
   58,   59,   -1,   -1,   -1,   63,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,  123,   41,  125,  126,   44,   -1,  124,
  125,   -1,   -1,   59,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   33,   -1,   63,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   33,
  123,   -1,  125,  126,   38,   -1,   40,  125,   42,   43,
   59,   45,   -1,   -1,   -1,   -1,   93,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   -1,   -1,   59,   33,   -1,   -1,  124,  125,   38,
   -1,   40,   41,   42,   43,   -1,   45,   -1,   33,   93,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   33,   -1,  126,   -1,   -1,   38,   -1,   40,   -1,   42,
   43,  261,   45,   -1,  264,  265,   -1,   -1,   -1,   -1,
  126,  271,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
   -1,  281,  282,  283,   -1,  285,  286,   -1,  288,   -1,
   -1,  291,  292,  293,  294,  295,  296,  126,  261,  299,
  300,  264,  265,   -1,   -1,   -1,   -1,   -1,  271,   -1,
   93,  126,  307,  308,  277,  278,   -1,   -1,  281,  282,
  283,   -1,  285,  286,   -1,  288,   -1,   -1,  291,  292,
  293,  294,  295,  296,   -1,  261,  299,  300,  264,  265,
   -1,   -1,   -1,  126,   -1,  271,   -1,   -1,   -1,  307,
  308,  277,  278,   -1,   -1,  281,  282,  283,   -1,  285,
  286,   -1,  288,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,  261,  299,  300,  264,  265,   -1,   -1,   -1,
   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,  278,
  307,  308,  281,  282,  283,   -1,  285,  286,   -1,  288,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,  283,
  299,  300,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
  294,  295,  296,   -1,   -1,  299,  300,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   41,  291,  292,  293,  294,  295,
  296,   33,   -1,  299,  300,   -1,   38,   -1,   40,   -1,
   42,   43,   -1,   45,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  283,   -1,
  299,  300,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   33,   -1,  299,  300,   -1,   38,   -1,   40,
   41,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
  283,   93,   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,   33,   -1,  299,  300,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   -1,   33,   -1,   -1,   -1,
   59,   38,   -1,   40,   41,   42,   43,   -1,   45,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   41,   42,
   43,   -1,   45,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,  126,   45,   -1,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,  126,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,  126,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  291,  126,   -1,   -1,   -1,   -1,
  297,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,  126,   -1,  299,  300,   -1,
   40,   41,   42,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,   -1,  299,  300,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,   -1,
  299,  300,   -1,   -1,   -1,   -1,  283,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
  283,   -1,  299,  300,   -1,   -1,   -1,   -1,  291,  292,
  293,  294,  295,  296,  283,   -1,  299,  300,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,  283,   -1,
  299,  300,   -1,   40,   41,   42,  291,  292,  293,  294,
  295,  296,  283,   -1,  299,  300,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,   -1,  299,  300,
   -1,   -1,  283,   61,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,   -1,  299,  300,
   -1,   79,   -1,   -1,   91,   -1,   -1,   85,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   95,   96,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   40,   41,   42,   -1,   44,   -1,   -1,
   -1,   -1,   -1,  121,   -1,   -1,   -1,  257,  258,  259,
  260,   58,   59,  263,   -1,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,  156,  289,
  290,  291,   -1,   -1,   91,   -1,   -1,  297,   40,   41,
   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  187,
   -1,  189,  190,  191,  192,  193,  194,  195,  196,  197,
  198,  199,  200,  201,  202,  203,  204,  205,   -1,   40,
   -1,   42,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  230,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  245,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,  269,  279,  280,   -1,   -1,   41,  284,   -1,   44,
  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  306,   -1,
   -1,   -1,   -1,   -1,  312,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
  257,  258,  259,  260,   58,   59,  263,   61,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,  123,   41,
  287,   -1,  289,  290,  291,   -1,   -1,   -1,   -1,   -1,
  297,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,  123,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   61,  287,   -1,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,  297,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
  291,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,
   -1,  266,  267,  268,  269,  270,   -1,  272,  273,  274,
  275,  276,  123,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,  287,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,  297,  257,  258,  259,  260,   -1,   -1,  263,
   -1,   -1,  266,  267,  268,  269,  270,  125,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,   -1,   -1,  287,   -1,  289,  290,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,  257,  258,  259,  260,   -1,
  125,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,   -1,
  257,  258,  259,  260,   -1,  297,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,   -1,   -1,  257,  258,  259,  260,
  297,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
  258,  259,  260,   -1,   -1,  263,  297,   -1,  266,   -1,
   -1,  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,
   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,  289,  290,  258,  259,  260,   -1,   -1,  263,  297,
   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,  274,
  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,  289,  290,   -1,  257,  258,  259,
  260,   -1,  297,  263,   -1,   -1,  266,  267,  268,  269,
  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,
  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,
  290,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,
   -1,  257,  258,  259,  260,   -1,   -1,  263,   -1,  309,
  266,  267,  268,  269,  270,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,  287,   -1,  289,  290,  258,  259,  260,   -1,   -1,
  263,  297,   -1,  266,   -1,   -1,  269,   -1,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,
   -1,   -1,   -1,   -1,  297,
};
#define YYFINAL 26
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR",
"IDENTIFIER","STRINGliteral","INTEGERconstant","CHARACTERconstant",
"FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname","ARROW","INC","DEC","LS",
"RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign",
"MODassign","PLUSassign","MINUSassign","LSassign","RSassign","ANDassign",
"XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"function.definition : declarator compound.statement",
"function.definition : declaration.specifiers declarator compound.statement",
"function.definition : declarator declaration.list compound.statement",
"function.definition : declaration.specifiers declarator declaration.list compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"direct.declarator : direct.declarator '(' identifier.list ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"identifier.list : IDENTIFIER",
"identifier.list : identifier.list ',' IDENTIFIER",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"labeled.statement : _CASE constant.expression ':' statement",
"labeled.statement : _DEFAULT ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"compound.statement : '{' declaration.list '}'",
"compound.statement : '{' declaration.list statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' statement",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression assignment.operator assignment.expression",
"assignment.operator : '='",
"assignment.operator : MULTassign",
"assignment.operator : DIVassign",
"assignment.operator : MODassign",
"assignment.operator : PLUSassign",
"assignment.operator : MINUSassign",
"assignment.operator : LSassign",
"assignment.operator : RSassign",
"assignment.operator : ANDassign",
"assignment.operator : XORassign",
"assignment.operator : ORassign",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 565 "C.Y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1170 "C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 153 "C.Y"
{ ; }
break;
case 5:
#line 154 "C.Y"
{ Declaration(yyvsp[0].ptr, TRUE); }
break;
case 10:
#line 165 "C.Y"
{ yyval.ptr = yyvsp[-1].ptr;                      }
break;
case 11:
#line 166 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[-1].ptr,yyvsp[-2].ptr);       }
break;
case 12:
#line 170 "C.Y"
{ /* printf("Local Vars\n"); */ }
break;
case 13:
#line 171 "C.Y"
{ ;                             }
break;
case 14:
#line 175 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 15:
#line 176 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[0].ptr,yyvsp[-1].ptr);   }
break;
case 16:
#line 177 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 17:
#line 178 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[0].ptr,yyvsp[-1].ptr);   }
break;
case 18:
#line 179 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 19:
#line 180 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[0].ptr,yyvsp[-1].ptr);   }
break;
case 20:
#line 184 "C.Y"
{ yyval.ptr = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 185 "C.Y"
{ yyval.ptr = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 186 "C.Y"
{ yyval.ptr = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 187 "C.Y"
{ yyval.ptr = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 188 "C.Y"
{ yyval.ptr = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 192 "C.Y"
{ yyval.ptr = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 193 "C.Y"
{ yyval.ptr = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 194 "C.Y"
{ yyval.ptr = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 195 "C.Y"
{ yyval.ptr = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 196 "C.Y"
{ yyval.ptr = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 197 "C.Y"
{ yyval.ptr = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 198 "C.Y"
{ yyval.ptr = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 199 "C.Y"
{ yyval.ptr = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 200 "C.Y"
{ yyval.ptr = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 201 "C.Y"
{ yyval.ptr = NewSpecType(TypeSTRUCT,  yyvsp[0].ptr);   }
break;
case 35:
#line 202 "C.Y"
{ yyval.ptr = NewSpecType(TypeENUM,    yyvsp[0].ptr);   }
break;
case 36:
#line 203 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                             }
break;
case 37:
#line 207 "C.Y"
{ yyval.ptr = NewSpecQual(QualCONST);         }
break;
case 38:
#line 208 "C.Y"
{ yyval.ptr = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 209 "C.Y"
{ yyval.ptr = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 210 "C.Y"
{ yyval.ptr = NewSpecQual(QualFAR);           }
break;
case 41:
#line 214 "C.Y"
{ yyval.ptr = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].ptr);    }
break;
case 42:
#line 215 "C.Y"
{ yyval.ptr = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].ptr);    }
break;
case 43:
#line 216 "C.Y"
{ yyval.ptr = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 44:
#line 220 "C.Y"
{ yyval.Bool = FALSE;  }
break;
case 45:
#line 221 "C.Y"
{ yyval.Bool = TRUE;   }
break;
case 46:
#line 225 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                  }
break;
case 47:
#line 226 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-1].ptr,yyvsp[0].ptr);  }
break;
case 48:
#line 231 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 49:
#line 232 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 50:
#line 236 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 51:
#line 237 "C.Y"
{ yyval.ptr = AddInitializer(yyvsp[-2].ptr,yyvsp[0].ptr);   }
break;
case 52:
#line 241 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[-1].ptr,yyvsp[-2].ptr);       }
break;
case 53:
#line 245 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 54:
#line 246 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[0].ptr,yyvsp[-1].ptr);   }
break;
case 55:
#line 247 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 56:
#line 248 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[0].ptr,yyvsp[-1].ptr);   }
break;
case 57:
#line 252 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 58:
#line 253 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 59:
#line 257 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 60:
#line 258 "C.Y"
{ ConsolePrintf(CON_CYAN,"StrDec :#2\n");       }
break;
case 61:
#line 259 "C.Y"
{ yyval.ptr = yyvsp[-2].ptr; ConsolePrintf(CON_CYAN,"StrDec:#3\n"); }
break;
case 62:
#line 263 "C.Y"
{ yyval.ptr = EnumSetAdd("",yyvsp[-1].ptr);       }
break;
case 63:
#line 264 "C.Y"
{ yyval.ptr = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].ptr);       }
break;
case 64:
#line 265 "C.Y"
{ yyval.ptr = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 65:
#line 269 "C.Y"
{ yyval.ptr = EnumElementAdd(NULL,yyvsp[0].ptr); }
break;
case 66:
#line 270 "C.Y"
{ yyval.ptr = EnumElementAdd(yyvsp[-2].ptr,yyvsp[0].ptr);   }
break;
case 67:
#line 274 "C.Y"
{ yyval.ptr = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 68:
#line 275 "C.Y"
{ yyval.ptr = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].ptr);  }
break;
case 69:
#line 279 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 70:
#line 280 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[0].ptr,yyvsp[-1].ptr);       }
break;
case 71:
#line 284 "C.Y"
{ yyval.ptr = NewIdentifier(yyvsp[0].Ident);       }
break;
case 72:
#line 285 "C.Y"
{ yyval.ptr = yyvsp[-1].ptr;                      }
break;
case 73:
#line 286 "C.Y"
{ yyval.ptr = NewArray(yyvsp[-2].ptr,NULL);       }
break;
case 74:
#line 287 "C.Y"
{ yyval.ptr = NewArray(yyvsp[-3].ptr,yyvsp[-1].ptr);         }
break;
case 75:
#line 288 "C.Y"
{ yyval.ptr = NewFunc(yyvsp[-3].ptr,yyvsp[-1].ptr,NULL);     }
break;
case 76:
#line 289 "C.Y"
{ yyval.ptr = NewFunc(yyvsp[-2].ptr,NULL,NULL);   }
break;
case 77:
#line 290 "C.Y"
{ yyval.ptr = NewFunc(yyvsp[-3].ptr,NULL,yyvsp[-1].ptr);     }
break;
case 78:
#line 294 "C.Y"
{ yyval.ptr = NewPointer(NULL, NULL);  }
break;
case 79:
#line 295 "C.Y"
{ yyval.ptr = NewPointer(yyvsp[0].ptr, NULL);    }
break;
case 80:
#line 296 "C.Y"
{ yyval.ptr = NewPointer(NULL, yyvsp[0].ptr);    }
break;
case 81:
#line 297 "C.Y"
{ yyval.ptr = NewPointer(yyvsp[-1].ptr, yyvsp[0].ptr);      }
break;
case 82:
#line 301 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 83:
#line 302 "C.Y"
{ yyval.ptr = ConcatDeclSpec(yyvsp[-1].ptr,yyvsp[0].ptr);   }
break;
case 84:
#line 306 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 85:
#line 307 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-2].ptr,NewIdentifier("..."));  }
break;
case 86:
#line 311 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 87:
#line 312 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 88:
#line 316 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[0].ptr,yyvsp[-1].ptr);                              }
break;
case 89:
#line 317 "C.Y"
{ yyval.ptr = AppendDecl(NewIdentifier(""),yyvsp[0].ptr);               }
break;
case 90:
#line 318 "C.Y"
{ yyval.ptr = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].ptr,yyvsp[-1].ptr));}
break;
case 91:
#line 322 "C.Y"
{ yyval.ptr = NewIdentifier(yyvsp[0].Ident);                   }
break;
case 92:
#line 323 "C.Y"
{ yyval.ptr = MakeBrother(yyvsp[-2].ptr,NewIdentifier(yyvsp[0].Ident));   }
break;
case 93:
#line 327 "C.Y"
{ yyval.ptr = MakeInitNode(yyvsp[0].ptr);        }
break;
case 94:
#line 328 "C.Y"
{ yyval.ptr = MakeInitList(yyvsp[-1].ptr);        }
break;
case 95:
#line 329 "C.Y"
{ yyval.ptr = MakeInitList(yyvsp[-2].ptr);        }
break;
case 96:
#line 333 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 97:
#line 334 "C.Y"
{ yyval.ptr = MakeInitConcat(yyvsp[-2].ptr,yyvsp[0].ptr);   }
break;
case 98:
#line 338 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 99:
#line 339 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[0].ptr,yyvsp[-1].ptr);       }
break;
case 100:
#line 343 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 101:
#line 344 "C.Y"
{ yyval.ptr = AppendDecl(yyvsp[0].ptr,yyvsp[-1].ptr);       }
break;
case 102:
#line 345 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                      }
break;
case 103:
#line 349 "C.Y"
{ yyval.ptr = yyvsp[-1].ptr;                      }
break;
case 104:
#line 350 "C.Y"
{ yyval.ptr = NewArray(NULL,NULL);     }
break;
case 105:
#line 351 "C.Y"
{ yyval.ptr = NewArray(yyvsp[-2].ptr,NULL);       }
break;
case 106:
#line 352 "C.Y"
{ yyval.ptr = NewArray(NULL,yyvsp[-1].ptr);       }
break;
case 107:
#line 353 "C.Y"
{ yyval.ptr = NewArray(yyvsp[-3].ptr,yyvsp[-1].ptr);         }
break;
case 108:
#line 354 "C.Y"
{ yyval.ptr = NewFunc(NULL,NULL,NULL); }
break;
case 109:
#line 355 "C.Y"
{ yyval.ptr = NewFunc(yyvsp[-2].ptr,NULL,NULL);   }
break;
case 110:
#line 356 "C.Y"
{ yyval.ptr = NewFunc(NULL,NULL,NULL); }
break;
case 111:
#line 357 "C.Y"
{ yyval.ptr = NewFunc(yyvsp[-3].ptr,NULL,NULL);   }
break;
case 149:
#line 425 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                         }
break;
case 150:
#line 426 "C.Y"
{ yyval.ptr = MakeAssignNode((ExprAssign)yyvsp[-1].Integer, yyvsp[-2].ptr, yyvsp[0].ptr); }
break;
case 151:
#line 430 "C.Y"
{ yyval.Integer = AsNop;   }
break;
case 152:
#line 431 "C.Y"
{ yyval.Integer = AsMul;   }
break;
case 153:
#line 432 "C.Y"
{ yyval.Integer = AsDiv;   }
break;
case 154:
#line 433 "C.Y"
{ yyval.Integer = AsMod;   }
break;
case 155:
#line 434 "C.Y"
{ yyval.Integer = AsAdd;   }
break;
case 156:
#line 435 "C.Y"
{ yyval.Integer = AsSub;   }
break;
case 157:
#line 436 "C.Y"
{ yyval.Integer = AsSL;    }
break;
case 158:
#line 437 "C.Y"
{ yyval.Integer = AsSR;    }
break;
case 159:
#line 438 "C.Y"
{ yyval.Integer = AsBAnd;  }
break;
case 160:
#line 439 "C.Y"
{ yyval.Integer = AsBXor;  }
break;
case 161:
#line 440 "C.Y"
{ yyval.Integer = AsBOr;   }
break;
case 162:
#line 444 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                                      }
break;
case 163:
#line 445 "C.Y"
{ yyval.ptr = MakeTernaryNode(CondExp, yyvsp[-4].ptr, yyvsp[-2].ptr, yyvsp[0].ptr);    }
break;
case 164:
#line 449 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 165:
#line 453 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 166:
#line 454 "C.Y"
{ yyval.ptr = MakeBinaryNode(LOr,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 167:
#line 458 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 168:
#line 459 "C.Y"
{ yyval.ptr = MakeBinaryNode(LAnd,yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 169:
#line 463 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 170:
#line 464 "C.Y"
{ yyval.ptr = MakeBinaryNode(BOr,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 171:
#line 468 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 172:
#line 469 "C.Y"
{ yyval.ptr = MakeBinaryNode(BXor,yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 173:
#line 473 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 174:
#line 474 "C.Y"
{ yyval.ptr = MakeBinaryNode(BAnd,yyvsp[-2].ptr,yyvsp[0].ptr);      }
break;
case 175:
#line 478 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 176:
#line 479 "C.Y"
{ yyval.ptr = MakeBinaryNode(CEQ,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 177:
#line 480 "C.Y"
{ yyval.ptr = MakeBinaryNode(CNE,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 178:
#line 484 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 179:
#line 485 "C.Y"
{ yyval.ptr = MakeBinaryNode(CLT,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 180:
#line 486 "C.Y"
{ yyval.ptr = MakeBinaryNode(CGT,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 181:
#line 487 "C.Y"
{ yyval.ptr = MakeBinaryNode(CLE,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 182:
#line 488 "C.Y"
{ yyval.ptr = MakeBinaryNode(CGE,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 183:
#line 492 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 184:
#line 493 "C.Y"
{ yyval.ptr = MakeBinaryNode(BSL,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 185:
#line 494 "C.Y"
{ yyval.ptr = MakeBinaryNode(BSR,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 186:
#line 498 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 187:
#line 499 "C.Y"
{ yyval.ptr = MakeBinaryNode(Add,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 188:
#line 500 "C.Y"
{ yyval.ptr = MakeBinaryNode(Sub,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 189:
#line 504 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 190:
#line 505 "C.Y"
{ yyval.ptr = MakeBinaryNode(Mul,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 191:
#line 506 "C.Y"
{ yyval.ptr = MakeBinaryNode(Div,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 192:
#line 507 "C.Y"
{ yyval.ptr = MakeBinaryNode(Mod,yyvsp[-2].ptr,yyvsp[0].ptr);       }
break;
case 193:
#line 511 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 194:
#line 512 "C.Y"
{ yyval.ptr = MakeCastNode(yyvsp[-2].ptr,yyvsp[0].ptr);             }
break;
case 195:
#line 516 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 196:
#line 517 "C.Y"
{ yyval.ptr = MakeUnaryNode(PreInc,yyvsp[0].ptr);        }
break;
case 197:
#line 518 "C.Y"
{ yyval.ptr = MakeUnaryNode(PreDec,yyvsp[0].ptr);        }
break;
case 198:
#line 519 "C.Y"
{ yyval.ptr = MakeUnaryNode((ExprUnOp)yyvsp[-1].Integer,yyvsp[0].ptr);  }
break;
case 199:
#line 520 "C.Y"
{ yyval.ptr = MakeUnaryNode(SizeOf,yyvsp[0].ptr);        }
break;
case 200:
#line 521 "C.Y"
{ yyval.ptr = MakeExprConstI(CalcSizeOf(yyvsp[-1].ptr));  }
break;
case 201:
#line 525 "C.Y"
{ yyval.Integer = Addr;    }
break;
case 202:
#line 526 "C.Y"
{ yyval.Integer = Ptr;     }
break;
case 203:
#line 527 "C.Y"
{ yyval.Integer = Plus;    }
break;
case 204:
#line 528 "C.Y"
{ yyval.Integer = Minus;   }
break;
case 205:
#line 529 "C.Y"
{ yyval.Integer = Neg;     }
break;
case 206:
#line 530 "C.Y"
{ yyval.Integer = Not;     }
break;
case 207:
#line 534 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 208:
#line 535 "C.Y"
{ yyval.ptr = MakeArrayNode(yyvsp[-3].ptr,yyvsp[-1].ptr);            }
break;
case 209:
#line 536 "C.Y"
{ yyval.ptr = MakeFuncNode(yyvsp[-2].ptr,NULL);           }
break;
case 210:
#line 537 "C.Y"
{ yyval.ptr = MakeFuncNode(yyvsp[-3].ptr,yyvsp[-1].ptr);             }
break;
case 211:
#line 538 "C.Y"
{ yyval.ptr = MakeDotNode(yyvsp[-2].ptr,yyvsp[0].Ident);              }
break;
case 212:
#line 539 "C.Y"
{ yyval.ptr = MakeArrowNode(yyvsp[-2].ptr,yyvsp[0].Ident);            }
break;
case 213:
#line 540 "C.Y"
{ yyval.ptr = MakeUnaryNode(PostInc,yyvsp[-1].ptr);       }
break;
case 214:
#line 541 "C.Y"
{ yyval.ptr = MakeUnaryNode(PostDec,yyvsp[-1].ptr);       }
break;
case 215:
#line 545 "C.Y"
{ yyval.ptr = MakeExprVar(yyvsp[0].Ident);                 }
break;
case 216:
#line 546 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 217:
#line 547 "C.Y"
{ yyval.ptr = MakeExprConstS(yyvsp[0].Ident);              }
break;
case 218:
#line 548 "C.Y"
{ yyval.ptr = yyvsp[-1].ptr;                              }
break;
case 219:
#line 552 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 220:
#line 553 "C.Y"
{ yyval.ptr = yyvsp[0].ptr;                              }
break;
case 221:
#line 557 "C.Y"
{ yyval.ptr = MakeExprConstI(yyvsp[0].Integer);              }
break;
case 222:
#line 558 "C.Y"
{ yyval.ptr = MakeExprConstC(yyvsp[0].Integer);              }
break;
case 223:
#line 559 "C.Y"
{ yyval.ptr = MakeExprConstF(yyvsp[0].Real);              }
break;
case 224:
#line 560 "C.Y"
{ yyval.ptr = MakeExprConstI(yyvsp[0].Integer);              }
break;
#line 2031 "C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

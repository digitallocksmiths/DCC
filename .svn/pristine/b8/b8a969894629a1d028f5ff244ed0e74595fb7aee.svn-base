// # $URL$
// # $Revision$


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <Windows.h>

#include "lex.h"
#include "typectrl.h"
//#include "expr.h"
#include "Gen.h"
#include "main.h"


#define GEN_PREFIX "L"
static WORD GenCount = 0;

LPSTR GenLabel(LPSTR PreFix) {
	LPSTR Label = New(strlen(GEN_PREFIX)+strlen(PreFix)+6+1);
	sprintf(Label, GEN_PREFIX "%s%06ld", PreFix, GenCount++);
	return Label;
 }


static int Pad(FILE *hOut, int n) {
    int nCount = 0;
    while (n>0) {
        fprintf(hOut, " ");
        n--;
        nCount++;
    }
    return nCount;
}


void GenAsmOut(FILE *hOut, LPSTR pszLabel, LPSTR pszOpcode, LPSTR pszOperand, LPSTR pszComment, BOOL fNL, BOOL fGlobal) {
    int n;

    if (fGlobal && (pszLabel != NULL) && (*pszLabel != '\0')) {
        fprintf(hOut, "\n");
        n = 0;
        n += Pad(hOut, LABEL_WIDTH);
        n += fprintf(hOut, " .global");
        n += Pad(hOut, LABEL_WIDTH + OPCODE_WIDTH - n);
        n += fprintf(hOut, " %s\n", pszLabel);
//      n += Pad(hOut, LABEL_WIDTH + OPCODE_WIDTH + OPERAND_WIDTH - n);
//      n += fprintf(hOut, ";\n");
    }

    n = 0;
    if ((pszLabel != NULL) && (*pszLabel != '\0')) { 
        n += fprintf(hOut, "%s:", pszLabel); 
    }
    n += Pad(hOut, LABEL_WIDTH - n);

    if ((pszOpcode != NULL) && (*pszOpcode != '\0')) { 
        n += fprintf(hOut, " %s", pszOpcode); 
    }
    n += Pad(hOut, LABEL_WIDTH + OPCODE_WIDTH - n);

    if ((pszOperand != NULL) && (*pszOperand != '\0')) { 
        n += fprintf(hOut, " %s", pszOperand); 
    }
    n += Pad(hOut, LABEL_WIDTH + OPCODE_WIDTH + OPERAND_WIDTH - n);

    if (pszComment != NULL) {
        n += fprintf(hOut, "; %s", pszComment);
        if (fNL) {
            fprintf(hOut, "\n");
        }
    }
    else {
        fprintf(hOut, "\n");
    }

}


BOOL GenIsData(WORD nUse) {
    switch (nUse) {
    case DecSpec:
    case DecPtr:
    case DecArray:  return TRUE;
    case DecId:
    case DecFunc:   return FALSE;
    default:
        Error(FATAL, "GenIsData() unknown use");
    }
    return FALSE;
}

BOOL    GenIsFunction(WORD nUse) {
    switch (nUse) {
    case DecSpec:
    case DecPtr:
    case DecArray:
    case DecId:     return FALSE;
    case DecFunc:   return TRUE;
    default:
        Error(FATAL, "GenIsFunction() unknown use");
    }
    return FALSE;
}

/* eof */

#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 6 "Source/C.y"
/* ************************************ */
/* Ansi C Grammar:                      */
/* Sean Kelly:                          */
/* Based on K & R (Ansi C) Ed. 2        */
/* ************************************ */

#include <Windows.h>
#include <stdio.h>
/*#include <ext\types.h>*/

#include "utilities\Console.h"

#include "lex.h"
#include "typectrl.h"
#include "expr.h"
#include "Statements.h"
#include "main.h"

/* Yacc generates two unreferenced labels for 'yynewerror' & 'yyerrlab'*/
#pragma warning(disable : 4102)


void    yyerror(PSTR s);
#line 67 "Source/C.y"
typedef union {
    DWORD   Integer;         /* integral values*/
    DOUBLE  Real;            /* Floating point*/
    BOOL    Bool;            /* Boolean Stuff eg Struct or Union*/
    struct  {
            DOUBLE  pack;
            DWORD   LineNo,LinePos,OldNo,OldPos;
    } LineInfo;

    LPSTR               Ident;              /* labels/strings/identifiers etc.*/
    TPDeclSpec          pDecl;              /* Declarations*/
    TPEnumSet           pEnumSet;           /**/
    TPEnumElement       pEnumElement;       /**/
    TPStructSet         pStructSet;         /**/
/*  TIdExprAssign       nAssign;            // ebum for assignments.*/
    TIdExprUnOp         nUnaryOp;           /* enum for unary operators.*/
    TPStatement         pStatement;         /* program statements.*/
    TPExprNode          pExpr;              /* arirmetic expressions.*/
} YYSTYPE;
#line 56 "Source/C_Yacced.tab.c"
#define _AUTO 257
#define _DOUBLE 258
#define _INT 259
#define _STRUCT 260
#define _BREAK 261
#define _ELSE 262
#define _LONG 263
#define _SWITCH 264
#define _CASE 265
#define _ENUM 266
#define _REGISTER 267
#define _TYPEDEF 268
#define _CHAR 269
#define _EXTERN 270
#define _RETURN 271
#define _UNION 272
#define _CONST 273
#define _FLOAT 274
#define _SHORT 275
#define _UNSIGNED 276
#define _CONTINUE 277
#define _FOR 278
#define _SIGNED 279
#define _VOID 280
#define _DEFAULT 281
#define _GOTO 282
#define _SIZEOF 283
#define _VOLATILE 284
#define _DO 285
#define _IF 286
#define _STATIC 287
#define _WHILE 288
#define _NEAR 289
#define _FAR 290
#define IDENTIFIER 291
#define STRINGliteral 292
#define INTEGERconstant 293
#define CHARACTERconstant 294
#define FLOATINGconstant 295
#define ENUMERATIONconstant 296
#define TYPEDEFname 297
#define ARROW 298
#define INC 299
#define DEC 300
#define LS 301
#define RS 302
#define LE 303
#define GE 304
#define EQ 305
#define NE 306
#define ANDAND 307
#define OROR 308
#define ELLIPSIS 309
#define MULTassign 310
#define DIVassign 311
#define MODassign 312
#define PLUSassign 313
#define MINUSassign 314
#define LSassign 315
#define RSassign 316
#define ANDassign 317
#define XORassign 318
#define ORassign 319
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   64,   64,   65,   65,   66,   16,   67,   16,   17,
   17,   23,   23,    6,    6,    6,    6,    6,    6,    7,
    7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
    8,    8,    8,    8,    8,    8,    9,    9,    9,    9,
    4,    4,    4,    5,    5,   18,   18,   15,   15,   14,
   14,   19,   20,   20,   20,   20,   21,   21,   22,   22,
   22,    3,    3,    3,    1,    1,    2,    2,   12,   12,
   13,   13,   13,   13,   13,   13,   10,   10,   10,   10,
   11,   11,   24,   24,   25,   25,   26,   26,   26,   42,
   42,   42,   43,   43,   27,   27,   28,   28,   28,   29,
   29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
   31,   31,   31,   31,   32,   33,   33,   34,   34,   68,
   34,   69,   34,   30,   30,   38,   38,   39,   39,   40,
   40,   35,   35,   35,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   37,   37,   37,   37,   37,   44,
   44,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   46,   46,   47,   48,   48,   49,   49,
   50,   50,   51,   51,   52,   52,   53,   53,   53,   54,
   54,   54,   54,   54,   55,   55,   55,   56,   56,   56,
   57,   57,   57,   57,   58,   58,   59,   59,   59,   59,
   59,   59,   41,   41,   41,   41,   41,   41,   60,   60,
   60,   60,   60,   60,   60,   60,   61,   61,   61,   61,
   62,   62,   63,   63,   63,   63,
};
short yylen[] = {                                         2,
    1,    1,    2,    1,    1,    0,    3,    0,    4,    2,
    3,    1,    2,    1,    2,    1,    2,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    4,    5,    2,    1,    1,    1,    2,    1,    3,    1,
    3,    3,    1,    2,    1,    2,    1,    3,    1,    2,
    3,    4,    5,    2,    1,    3,    1,    3,    1,    2,
    1,    3,    3,    4,    4,    3,    1,    2,    2,    3,
    1,    2,    1,    3,    1,    3,    2,    1,    2,    1,
    3,    4,    1,    3,    1,    2,    1,    2,    1,    3,
    2,    3,    3,    4,    2,    3,    3,    4,    1,    1,
    1,    1,    1,    1,    3,    1,    2,    2,    3,    0,
    4,    0,    5,    1,    2,    3,    4,    1,    2,    1,
    4,    5,    7,    7,    5,    6,    6,    7,    7,    8,
    7,    8,    8,    9,    3,    2,    2,    2,    3,    1,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    5,    1,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    3,
    1,    3,    3,    3,    1,    4,    1,    2,    2,    2,
    2,    4,    1,    1,    1,    1,    1,    1,    1,    4,
    3,    4,    3,    3,    2,    2,    1,    1,    1,    3,
    1,    3,    1,    1,    1,    1,
};
short yydefred[] = {                                      0,
   20,   31,   28,   44,   29,    0,   21,   24,   26,   23,
   45,   37,   30,   27,   33,   32,   25,   38,   22,   39,
   40,   71,   36,    0,    0,    0,   35,   34,    0,    0,
    0,    0,    0,    0,    6,    0,    4,    5,    0,    2,
    0,    0,    0,   81,   79,    0,    0,    0,   10,    0,
   48,    0,   15,   17,   19,    0,    0,    0,    0,    3,
    0,    0,    0,   65,   72,   82,   80,    0,    0,    0,
    0,   46,    0,    0,    0,   11,    0,    0,    7,   76,
    0,    0,    0,   85,    0,  217,  219,  223,  224,  225,
  226,    0,    0,    0,   73,  204,  203,  205,  206,  207,
  208,    0,  166,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  191,  195,    0,  209,  218,    0,
    0,   62,    0,    0,   54,   56,   41,   47,    0,    0,
    0,   57,    0,   51,   90,  152,    0,    9,    0,   49,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  116,  118,    0,   12,    0,    0,  124,  109,  110,  111,
  112,  113,  114,    0,  150,    0,    0,    0,   87,   89,
    0,   75,    0,    0,  201,    0,  198,  199,    0,    0,
    0,  200,   74,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  215,  216,    0,    0,    0,   63,   68,
   66,   42,   60,    0,   52,    0,   93,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
    0,  148,    0,  146,    0,    0,    0,    0,    0,    0,
   13,    0,    0,  119,  125,  117,    0,  105,    0,    0,
  101,    0,    0,    0,    0,   84,   86,    0,    0,    0,
   96,    0,  220,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  192,
  193,  194,  214,  211,  221,    0,    0,  213,   61,   58,
   91,    0,  154,  155,  156,  157,  158,  159,  160,  161,
  162,  163,  153,    0,  149,    0,    0,  145,    0,    0,
    0,  115,  121,    0,  151,  107,  100,  103,  106,    0,
  102,    0,  202,  196,    0,    0,  212,  210,   92,   94,
    0,    0,    0,    0,    0,    0,    0,  123,  108,  104,
  165,  222,    0,    0,    0,    0,    0,    0,    0,    0,
  135,    0,  128,    0,    0,  137,    0,    0,    0,    0,
    0,    0,  136,    0,    0,    0,  129,  134,  141,  139,
    0,  138,    0,    0,    0,  133,    0,    0,  143,  142,
  140,    0,    0,    0,  144,
};
short yydgoto[] = {                                      26,
   63,   64,   27,   28,   29,   81,   31,   32,   33,   34,
   46,   35,   36,   51,   52,   37,   38,   71,   72,   73,
  131,  132,  155,  249,   83,   84,  180,  250,  171,  156,
  157,  158,  159,  160,  161,  162,  163,  353,  354,  355,
  102,  134,  218,  164,  165,  136,  104,  105,  106,  107,
  108,  109,  110,  111,  112,  113,  114,  115,  137,  117,
  118,  286,  119,   39,   40,   57,   75,  242,  243,
};
short yysindex[] = {                                   1867,
    0,    0,    0,    0,    0, -111,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -38,  226,    0,    0,    0, -101,   43,
 2154, 2154, 2154,  -35,    0,  -30,    0,    0, 1867,    0,
  -75, -241,   39,    0,    0,  226,  -37, 2187,    0,   44,
    0,  191,    0,    0,    0,  -30,  -13, 1902,  680,    0,
 -241,   65,  -14,    0,    0,    0,    0, 2187, 2187, 2187,
 2042,    0,  187,  912,  -13,    0,  -38,  786,    0,    0,
  152,  127,  128,    0, 1584,    0,    0,    0,    0,    0,
    0, 1606, 1606,  839,    0,    0,    0,    0,    0,    0,
    0, 1645,    0,   96,  -60, -109,   90,  124,  184,  -67,
  -15,   48,   49,  414,    0,    0,  142,    0,    0,   -4,
 1645,    0, -241, 2075,    0,    0,    0,    0, 1645,  189,
  198,    0,  912,    0,    0,    0,  619,    0,   44,    0,
  192,  223, 1251,  217,  242,   12, 1203,  286,  304,  262,
    0,    0,   43,    0, 2154,  978,    0,    0,    0,    0,
    0,    0,    0,  278,    0, 1779, 1266,  -16,    0,    0,
  145,    0, 2110,  839,    0, 1645,    0,    0,   82,  355,
    5,    0,    0, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,
 1645, 1645,  125,    0,    0,   36, 1645,  135,    0,    0,
    0,    0,    0, 1645,    0,  187,    0,   -2, 1645, 1645,
 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645, 1645,    0,
 1645,    0,  289,    0, 1290,  348,  147, 1645, 1645, 1203,
    0,  305, 1203,    0,    0,    0, 1645,    0,  396,  407,
    0,  359,  145, 1938, 1320,    0,    0,  419, 1820,  153,
    0, 1645,    0, -109,  137,   90,  124,  184,  -67,  -15,
  -15,   48,   48,   48,   48,   49,   49,  414,  414,    0,
    0,    0,    0,    0,    0,  205,  120,    0,    0,    0,
    0,  -22,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  246,    0, 1305,  318,    0,  433,  335,
  450,    0,    0, 1112,    0,    0,    0,    0,    0,  436,
    0,  409,    0,    0, 1645, 1645,    0,    0,    0,    0,
  380, 1381,  336, 1342, 1645, 1203, 1203,    0,    0,    0,
    0,    0,  252, 1203,  451, 1468, 1482,  340,  477,  245,
    0, 1645,    0, -221,  405,    0, 1203, 1203,  493, 1203,
  501, 1534,    0, 1203,  478,  488,    0,    0,    0,    0,
 1203,    0, 1203, 1203,  517,    0, 1203, 1203,    0,    0,
    0, 1203, 1203, 1203,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -27,    0,    0,    0,    0,    0,
  341,  347,  565,    0,    0, 1169,    0,    0,  548,    0,
 1698,    0,    0,    0,    0,  143, 1744,    0,    0,  193,
    0,    0,    0,    0,    0, 1256,    0,    0,    0,    0,
    0,   21,    0,    0,    0,    0,    0,    0,  -33,   26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  532,    0,  511,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  902,  613,  334,  167, 1128,  670,
  557,  438,  221,  107,    0,    0,   -6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  342,
    0,    0,    0,    0,    0,    0,  116,    0,  385,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,    0,    0,    0, 1156,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  533,    0,    0,
  573,    0,    0,    0,    0,    0,    0,    0,  512,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  693,    0,    0,    0,    0,    0,    0,  513,
    0,    0,    0, 1244,    0,  926,  734, 1655,  724,  585,
  611,  446,  497,  506,  534,  387,  395,  161,  280,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  882,
    0,    0,    0,  442,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -74,    0,    0,    0,
    0,    0,  -53,  454,    0,
};
short yygindex[] = {                                      0,
  519,  479,    0,    0,    0,  835,    0,  592, 1675,  468,
    0,  317,  -19,  526,    0,    0,  -49,  536,  -65,  662,
    0,  392,    0,  -39,    0,  437,  444,   -8, -140, -161,
 1915,    0,    0,   32,    0,    0,    0,  265,    0,    0,
    0, -106,    0,  541, 2017,  -58,  422,    0,  441,  447,
  452,  449,  456,  212,  472,  275,  287,  411,  -59,    0,
    0,    0,    0,    0,  607,    0,    0,    0,    0,
};
#define YYTABLESIZE 2484
short yytable[] = {                                     116,
  103,   24,  185,   25,   24,  128,   53,   53,   53,   58,
  101,   42,   77,   77,   56,   97,   77,   94,   82,   96,
   98,   48,   99,  166,   53,  175,  217,  253,  154,  123,
  197,  197,  177,  178,  197,  197,  197,  197,  197,  123,
  197,  292,  116,  352,  194,  263,  195,   61,  247,   62,
  126,  197,  197,  197,  197,  197,  197,   53,  128,  366,
   59,  116,  103,   77,   67,   55,   55,   55,  101,  116,
  103,  127,  170,   97,  167,   94,  284,   96,   98,   65,
   99,  314,   24,   55,   25,   68,  197,  197,   79,  217,
  217,  198,  217,  199,  217,  217,  217,  217,  217,  217,
  133,   49,  329,  100,   74,  241,  138,  116,  103,   78,
  122,  217,  217,  217,  217,  217,   55,  197,  197,  253,
  209,  259,  291,   25,  116,  121,  116,  116,  116,  116,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
  116,  116,  116,  217,  188,   67,  217,  188,   56,  188,
  188,  188,  195,  195,  116,  103,  195,  195,  195,  195,
  195,  100,  195,  247,  188,  188,  188,  172,  188,  188,
  261,  173,  167,  195,  195,  195,  217,  195,  195,   41,
  247,  206,   78,   78,  254,  330,   78,  208,  183,   47,
  126,  166,  259,   25,  325,  116,  103,  186,  189,  188,
  188,  189,  116,  189,  189,  189,  126,  171,  195,  195,
  171,  127,  328,  187,  320,  383,  384,  188,  189,  189,
  189,  189,  189,  189,  171,  171,   24,  127,   25,  171,
  188,  188,  207,   78,   77,  255,   50,  190,  191,  195,
  195,  216,  167,  167,  129,  327,  214,  184,  326,   76,
  230,   50,   22,  189,  189,   22,  215,   53,  185,  171,
   85,  185,  231,   77,  185,  116,  341,   25,   86,   87,
   88,   89,   90,   91,   22,  234,   92,   93,  185,  185,
  185,  235,  185,  185,  189,  189,  331,  192,  193,  247,
  171,  171,  116,  103,  197,  197,  197,  197,  197,  197,
  197,  197,  236,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  185,  185,    8,   55,  190,   85,  240,
  190,  247,  190,  190,  190,  238,   86,   87,   88,   89,
   90,   91,  247,   22,   92,   93,  246,  190,  190,  190,
   43,  190,  190,  239,  185,  185,   50,  305,  196,  197,
  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  247,  217,  217,  217,  217,  217,  217,  217,  217,
  217,  217,  190,  190,  169,  336,  334,  169,  247,  247,
   14,   14,   14,  247,   14,   59,   16,   16,   16,  130,
   16,  169,  169,  139,  346,  262,  169,  169,  362,   14,
   59,  270,  271,  190,  190,   16,  308,  188,  188,  188,
  188,  188,  188,  188,  188,  283,  195,  195,  195,  195,
  195,  195,  195,  195,  186,  288,  169,  186,   50,  313,
  186,   14,  187,   78,  309,  187,  316,   16,  187,  203,
  204,  205,   22,   50,  186,  186,  186,  317,  186,  186,
  202,  318,  187,  187,  187,  200,  187,  187,  169,  323,
  201,  189,  189,  189,  189,  189,  189,  189,  189,  139,
  276,  277,  335,  171,  171,  180,  339,   22,  180,  186,
  186,  180,   43,  183,  278,  279,  183,  187,  187,  183,
  337,  357,   45,  247,  247,  180,  180,  180,   12,  180,
  180,  340,  343,  183,  183,  183,  364,  183,  183,   18,
  186,  186,  182,   67,   20,   21,  352,  363,  187,  187,
  247,  185,  185,  185,  185,  185,  185,  185,  185,  368,
  180,  180,  130,  371,  184,  377,  247,  184,  183,  183,
  184,  373,  210,  181,  247,  378,  181,    1,  168,  181,
  213,   83,   95,   97,  184,  184,  184,  382,  184,  184,
  247,  180,  180,  181,  181,  181,  130,  181,  181,  183,
  183,  182,   88,   97,  182,   88,   97,  182,  131,  120,
  190,  190,  190,  190,  190,  190,  190,  190,  252,  184,
  184,  182,  182,  182,  177,  182,  182,  177,  181,  181,
  177,  211,  140,  124,   18,   18,   18,  290,   18,  257,
  280,  281,  282,   99,  177,  177,   99,  258,  367,  177,
  184,  184,  178,   18,  264,  178,  182,  182,  178,  181,
  181,   14,  266,  168,  181,  289,  268,   16,  267,   69,
  169,  169,  178,  178,  269,   60,  260,  178,  179,  177,
  177,  179,    0,  167,  179,   18,  167,  182,  182,   69,
   69,   69,   69,  272,  273,  274,  275,    0,  179,  179,
  167,  167,  324,  179,    0,  167,  322,  178,  178,  229,
  177,  177,    0,  233,    0,   69,    0,  186,  186,  186,
  186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
  187,  187,  187,  179,  179,  167,    0,  175,  178,  178,
  175,    0,  101,  175,  181,   69,  181,   97,    0,   94,
    0,   96,   98,    0,   99,  265,  260,  175,  175,    0,
  125,  126,  175,   98,  179,  179,   98,  167,    0,    0,
  180,  180,  180,  180,  180,  180,    0,  287,  183,  183,
  183,  183,  183,  183,    0,  179,    0,    0,    0,    0,
    0,  176,  175,  175,  176,   69,    0,  176,    0,    0,
    0,  304,   95,  365,  172,  307,    0,  172,  310,  311,
    0,  176,  176,    0,    0,    0,  176,    0,    0,    0,
    0,  172,  172,  175,  175,    0,  172,    0,    0,  184,
  184,  184,  184,  184,  184,  100,    0,    0,  181,  181,
  181,  181,  181,  181,    0,    0,  176,  176,  101,    0,
    0,    0,    0,   97,    0,   94,  172,   96,   98,    0,
   99,    0,    0,    0,   30,  179,  182,  182,  182,  182,
  182,  182,    0,    0,  151,    0,  333,  176,  176,    0,
    0,    0,    0,    0,    0,   18,    0,  172,  172,    0,
    0,  177,  177,  177,  177,   53,   54,   55,    0,    0,
    0,  101,  345,   30,  348,  349,   97,    0,   94,    0,
   96,   98,    0,   99,    0,    0,  359,  361,    0,  178,
  178,  178,  178,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  375,    0,    0,    0,    0,    0,   78,    0,
  152,  100,  153,    0,  132,  179,  179,  179,  179,  132,
  167,  132,    0,  132,  132,    0,  132,    0,  219,  220,
  221,  222,  223,  224,  225,  226,  227,  228,    0,    0,
  132,    0,  164,    0,  101,  164,    0,    0,    0,   97,
    0,   94,    0,   96,   98,    0,   99,    0,    0,  164,
  164,    0,   85,    0,  100,    0,  170,    0,    0,  170,
   86,   87,   88,   89,   90,   91,  175,  175,   92,   93,
    0,    0,    0,  170,  170,    0,    0,    0,  170,  153,
    0,    0,    0,    0,  164,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  132,    0,  132,  132,    0,    0,
  101,    0,    0,    0,    0,   97,    0,   94,  170,   96,
   98,    0,   99,    0,    0,    0,  164,    0,    0,    0,
  176,  176,    0,    0,  133,    0,  151,  100,    0,    0,
  172,  172,    1,    2,    3,    4,  141,    0,    5,  142,
  170,    6,    7,    8,    9,   10,  143,   11,   12,   13,
   14,   15,  144,  145,   16,   17,    0,  146,   85,   18,
  147,  148,   19,  149,   20,   21,  150,   87,   88,   89,
   90,   91,   23,    0,   92,   93,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    3,    4,    0,
   78,    5,  244,  100,    6,    0,    0,    9,    0,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,   85,   18,    0,    0,    0,    0,   20,   21,   86,
   87,   88,   89,   90,   91,   23,    0,   92,   93,    0,
    0,    0,  132,    0,  101,  132,  132,    0,    0,   97,
    0,   94,  132,   96,   98,    0,   99,    0,  132,  132,
    0,    0,  132,  132,  132,    0,  132,  132,  173,  132,
  151,  173,  132,  132,  132,  132,  132,  132,    0,    0,
  132,  132,    0,    0,    0,  173,  173,    0,  122,    0,
  173,    0,    0,  122,   85,  122,    0,  122,  122,    0,
  122,    0,   86,   87,   88,   89,   90,   91,    0,   69,
   92,   93,   69,    0,  122,    0,    0,    0,    0,    0,
  173,  173,    0,    0,    0,    0,   69,   69,    0,   69,
    0,    0,  170,  170,   78,  101,  338,  100,  141,    0,
   97,  142,   94,    0,   96,   98,    0,   99,  143,    0,
    0,  173,  173,    0,  144,  145,    0,    0,    0,  146,
   85,  151,  147,  148,    0,  149,    0,    0,  150,   87,
   88,   89,   90,   91,    0,    0,   92,   93,  122,    0,
  120,  122,    0,  101,  168,    0,    0,  168,   97,    0,
   94,   69,   96,   98,    0,   99,   70,    0,  101,   70,
    0,  168,  168,   97,    0,   94,  168,   96,   98,  232,
   99,    0,    0,   70,   70,    0,   70,    0,    0,    0,
    0,    0,  101,    0,    0,   78,    0,   97,  100,   94,
    0,   96,   98,    0,   99,    0,  168,  101,    0,    0,
    0,    0,   97,    0,   94,    0,   96,   98,  306,   99,
    0,    0,  101,    0,    0,    0,    0,   97,  251,   94,
    0,   96,   98,  332,   99,    0,    0,    0,  168,    0,
    0,    0,  141,    0,  101,  142,  100,    0,   70,   97,
    0,   94,  143,   96,   98,    0,   99,    0,  144,  145,
    0,  100,    0,  146,   85,    0,  147,  148,    0,  149,
  347,    0,  150,   87,   88,   89,   90,   91,    0,    0,
   92,   93,  321,  101,    0,  100,  122,    0,   97,  122,
   94,  344,   96,   98,    0,   99,  122,    0,    0,    0,
  100,    0,  122,  122,  173,  173,    0,  122,  122,    0,
  122,  122,    0,  122,    0,  100,  122,  122,  122,  122,
  122,  122,    0,    0,  122,  122,    0,    0,    0,    0,
    0,    0,    0,  141,    0,    0,  142,  100,    0,    0,
    0,    0,    0,  143,    0,    0,    0,    0,    0,  144,
  145,    0,    0,    0,  146,   85,    0,  147,  148,    0,
  149,    0,    0,  150,   87,   88,   89,   90,   91,    0,
  101,   92,   93,    0,    0,   97,  100,   94,  358,   96,
   98,    0,   99,    0,  101,    0,    0,    0,    0,   97,
    0,   94,  360,   96,   98,    0,   99,    0,    0,    0,
    0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
    0,   86,   87,   88,   89,   90,   91,    0,   85,   92,
   93,  168,    0,    0,    0,    0,   86,   87,   88,   89,
   90,   91,    0,    0,   92,   93,  101,    0,    0,    0,
    0,   97,   85,   94,  374,   96,   98,    0,   99,    0,
   86,   87,   88,   89,   90,   91,    0,   85,   92,   93,
    0,    0,    0,  100,    0,   86,   87,   88,   89,   90,
   91,    0,   85,   92,   93,    0,    0,  100,    0,    0,
   86,   87,   88,   89,   90,   91,  101,    0,   92,   93,
    0,   97,    0,  174,   85,   96,   98,    0,   99,    0,
    0,    0,   86,   87,   88,   89,   90,   91,  101,    0,
   92,   93,    0,   97,    0,  176,    0,   96,   98,    0,
   99,    0,    0,    0,    0,    0,    0,    0,    0,  100,
    0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
    0,   86,   87,   88,   89,   90,   91,  101,    0,   92,
   93,    0,   97,    0,   94,    0,   96,   98,    0,   99,
    0,    0,    0,    0,    0,  174,    0,    0,  174,   44,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  100,
    0,    0,  174,  174,    0,    0,    0,  174,    0,    0,
   66,    0,   70,    0,    0,    0,    0,    0,    0,    0,
    0,  100,    0,    0,    0,    0,    0,   64,   64,   64,
    0,   64,   70,   70,   70,   70,    0,  174,  174,    0,
   85,    0,    0,    0,    0,   64,   64,    0,   86,   87,
   88,   89,   90,   91,   85,    0,   92,   93,   70,    0,
  100,    0,   86,   87,   88,   89,   90,   91,  174,  174,
   92,   93,    0,   43,   43,   43,    0,   43,   64,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
    0,   43,   43,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   85,    0,  166,  248,
   25,    0,    0,    0,   86,   87,   88,   89,   90,   91,
    0,    0,   92,   93,   43,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   70,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  259,
  248,   25,    0,    0,    0,    0,   85,    0,    0,  167,
    0,    0,    0,    0,   86,   87,   88,   89,   90,   91,
    0,    0,   92,   93,    0,    0,    0,    0,   85,    0,
    0,    0,    0,    0,    0,    0,   86,   87,   88,   89,
   90,   91,    0,    0,   92,   93,   24,    0,   25,    0,
  167,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
    0,    0,    0,    0,    0,   86,   87,   88,   89,   90,
   91,    0,   80,   92,   93,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   64,   64,   64,   64,    0,    0,
   64,  174,  174,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,   64,    0,    0,   64,   64,  319,    0,
    0,   64,    0,    0,   64,    0,   64,   64,   64,    0,
    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
   43,   43,   43,   43,    0,    0,   43,    0,    0,   43,
   43,   43,   43,   43,    0,   43,   43,   43,   43,   43,
    0,    0,   43,   43,    0,    0,    0,   43,    0,    0,
   43,    0,   43,   43,   43,    1,    2,    3,    4,    0,
   43,    5,    0,    0,    6,    7,    8,    9,   10,    0,
   11,   12,   13,   14,   15,    0,    0,   16,   17,    0,
    0,  237,   18,    0,    0,   19,    0,   20,   21,   22,
  245,    0,    0,    0,    0,   23,    1,    2,    3,    4,
    0,    0,    5,    0,    0,    6,    7,    8,    9,   10,
  135,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
    0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
    0,    0,    0,    1,    2,    3,    4,    0,    0,    5,
    0,    0,    6,    7,    8,    9,   10,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,  135,
   18,    0,    0,   19,  312,   20,   21,   22,    1,    2,
    3,    4,    0,   23,    5,    0,  127,    6,    7,    8,
    9,   10,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,   19,    0,
   20,   21,    0,    0,    1,    2,    3,    4,   23,  212,
    5,    0,    0,    6,    7,    8,    9,   10,    0,   11,
   12,   13,   14,   15,    0,    0,   16,   17,    0,    0,
    0,   18,  285,    0,   19,    0,   20,   21,  245,    0,
    0,    0,    0,    0,   23,  293,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,    0,    0,    0,    0,
  350,  351,    0,    0,    0,    0,    0,    0,  356,    0,
    0,    0,    0,  315,    0,    0,    0,    0,    0,    0,
    0,  369,  370,    0,  372,    0,    0,    0,  376,    0,
    0,    0,    0,    0,    0,  379,    0,  380,  381,    0,
    0,    0,    0,    0,    0,    0,  385,  245,  245,    2,
    3,    4,    0,    0,    5,    0,    0,    6,  135,    0,
    9,    0,    0,   11,   12,   13,   14,   15,    0,    0,
   16,   17,    0,    0,    0,   18,    0,    0,    0,    0,
   20,   21,    2,    3,    4,    0,    0,    5,   23,    0,
    6,    0,  342,    9,    0,    0,   11,   12,   13,   14,
   15,    0,    0,   16,   17,    0,    0,    0,   18,    0,
    0,    0,    0,   20,   21,    0,    1,    2,    3,    4,
    0,   23,    5,    0,    0,    6,    7,    8,    9,   10,
    0,   11,   12,   13,   14,   15,    0,    0,   16,   17,
    0,    0,    0,   18,    0,    0,   19,    0,   20,   21,
    0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
    1,    2,    3,    4,    0,    0,    5,    0,  256,    6,
    7,    8,    9,   10,    0,   11,   12,   13,   14,   15,
    0,    0,   16,   17,    0,    0,    0,   18,    0,    0,
   19,    0,   20,   21,    2,    3,    4,    0,    0,    5,
   23,    0,    6,    0,    0,    9,    0,    0,   11,   12,
   13,   14,   15,    0,    0,   16,   17,    0,    0,    0,
   18,    0,    0,    0,    0,   20,   21,    0,    0,    0,
    0,    0,    0,   23,
};
short yycheck[] = {                                      59,
   59,   40,   63,   42,   40,   71,   40,   41,   42,   40,
   33,  123,   40,   41,   34,   38,   44,   40,   58,   42,
   43,  123,   45,   40,   58,   85,  133,  168,   78,   44,
   37,   38,   92,   93,   41,   42,   43,   44,   45,   44,
   47,   44,  102,  265,   60,   41,   62,  123,   44,  291,
  125,   58,   59,   60,   61,   62,   63,   91,  124,  281,
   91,  121,  121,   91,   44,   40,   41,   42,   33,  129,
  129,  125,   81,   38,   91,   40,   41,   42,   43,   41,
   45,  243,   40,   58,   42,  123,   93,   94,   57,   37,
   38,   43,   40,   45,   42,   43,   44,   45,   46,   47,
  123,   59,  125,  126,   61,  155,   75,  167,  167,  123,
  125,   59,   60,   61,   62,   63,   91,  124,  125,  260,
  125,   40,  125,   42,  184,   61,  186,  187,  188,  189,
  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
  200,  201,  202,   91,   38,  125,   94,   41,  168,   43,
   44,   45,   37,   38,  214,  214,   41,   42,   43,   44,
   45,  126,   47,   44,   58,   59,   60,   41,   62,   63,
  179,   44,   91,   58,   59,   60,  124,   62,   63,  291,
   44,   40,   40,   41,   40,  292,   44,   46,   93,  291,
  265,   40,   40,   42,   58,  255,  255,  307,   38,   93,
   94,   41,  262,   43,   44,   45,  281,   41,   93,   94,
   44,  265,   93,  124,  254,  377,  378,   94,   58,   59,
   60,   38,   62,   63,   58,   59,   40,  281,   42,   63,
  124,  125,   91,   91,   44,   91,   44,  305,  306,  124,
  125,   44,   91,   91,   58,   41,   58,  308,   44,   59,
   59,   59,  291,   93,   94,  291,   59,  291,   38,   93,
  283,   41,   40,  291,   44,  325,  325,   42,  291,  292,
  293,  294,  295,  296,  291,   59,  299,  300,   58,   59,
   60,   40,   62,   63,  124,  125,   41,  303,  304,   44,
  124,  125,  352,  352,  301,  302,  303,  304,  305,  306,
  307,  308,  291,  310,  311,  312,  313,  314,  315,  316,
  317,  318,  319,   93,   94,  123,  291,   38,  283,   58,
   41,   44,   43,   44,   45,   40,  291,  292,  293,  294,
  295,  296,   44,  291,  299,  300,   59,   58,   59,   60,
   24,   62,   63,   40,  124,  125,   30,   59,  301,  302,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,   44,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  319,   93,   94,   41,   41,   59,   44,   44,   44,
   40,   41,   42,   44,   44,   44,   40,   41,   42,   73,
   44,   58,   59,   77,   59,   41,   63,   81,   59,   59,
   59,  190,  191,  124,  125,   59,   59,  301,  302,  303,
  304,  305,  306,  307,  308,  291,  301,  302,  303,  304,
  305,  306,  307,  308,   38,  291,   93,   41,   44,  125,
   44,   91,   38,  291,  288,   41,   41,   91,   44,  298,
  299,  300,  291,   59,   58,   59,   60,   41,   62,   63,
   37,   93,   58,   59,   60,   42,   62,   63,  125,   41,
   47,  301,  302,  303,  304,  305,  306,  307,  308,  153,
  196,  197,   40,  307,  308,   38,   41,  291,   41,   93,
   94,   44,  166,   38,  198,  199,   41,   93,   94,   44,
   41,   41,   25,   44,   44,   58,   59,   60,  273,   62,
   63,   93,  123,   58,   59,   60,  262,   62,   63,  284,
  124,  125,  102,   46,  289,  290,  265,   41,  124,  125,
   44,  301,  302,  303,  304,  305,  306,  307,  308,  125,
   93,   94,  216,   41,   38,   58,   44,   41,   93,   94,
   44,   41,  121,   38,   44,   58,   41,    0,   81,   44,
  129,   41,   41,   41,   58,   59,   60,   41,   62,   63,
   44,  124,  125,   58,   59,   60,  125,   62,   63,  124,
  125,   38,   41,   41,   41,   44,   44,   44,  125,   61,
  301,  302,  303,  304,  305,  306,  307,  308,  167,   93,
   94,   58,   59,   60,   38,   62,   63,   41,   93,   94,
   44,  123,   77,   68,   40,   41,   42,  216,   44,  173,
  200,  201,  202,   41,   58,   59,   44,  174,  354,   63,
  124,  125,   38,   59,  184,   41,   93,   94,   44,  124,
  125,  291,  186,  166,   94,  214,  188,  291,  187,   48,
  307,  308,   58,   59,  189,   39,  179,   63,   38,   93,
   94,   41,   -1,   41,   44,   91,   44,  124,  125,   68,
   69,   70,   71,  192,  193,  194,  195,   -1,   58,   59,
   58,   59,  262,   63,   -1,   63,  255,   93,   94,   61,
  124,  125,   -1,  143,   -1,   94,   -1,  301,  302,  303,
  304,  305,  306,  307,  308,  301,  302,  303,  304,  305,
  306,  307,  308,   93,   94,   93,   -1,   38,  124,  125,
   41,   -1,   33,   44,  174,  124,  176,   38,   -1,   40,
   -1,   42,   43,   -1,   45,  185,  259,   58,   59,   -1,
   69,   70,   63,   41,  124,  125,   44,  125,   -1,   -1,
  303,  304,  305,  306,  307,  308,   -1,  207,  303,  304,
  305,  306,  307,  308,   -1,   94,   -1,   -1,   -1,   -1,
   -1,   38,   93,   94,   41,  174,   -1,   44,   -1,   -1,
   -1,  231,   93,  352,   41,  235,   -1,   44,  238,  239,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   58,   59,  124,  125,   -1,   63,   -1,   -1,  303,
  304,  305,  306,  307,  308,  126,   -1,   -1,  303,  304,
  305,  306,  307,  308,   -1,   -1,   93,   94,   33,   -1,
   -1,   -1,   -1,   38,   -1,   40,   93,   42,   43,   -1,
   45,   -1,   -1,   -1,    0,  174,  303,  304,  305,  306,
  307,  308,   -1,   -1,   59,   -1,  306,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,  291,   -1,  124,  125,   -1,
   -1,  305,  306,  307,  308,   31,   32,   33,   -1,   -1,
   -1,   33,  332,   39,  334,  335,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,  346,  347,   -1,  305,
  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,  126,   78,   -1,   33,  305,  306,  307,  308,   38,
  308,   40,   -1,   42,   43,   -1,   45,   -1,  310,  311,
  312,  313,  314,  315,  316,  317,  318,  319,   -1,   -1,
   59,   -1,   41,   -1,   33,   44,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,   58,
   59,   -1,  283,   -1,  126,   -1,   41,   -1,   -1,   44,
  291,  292,  293,  294,  295,  296,  307,  308,  299,  300,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,  155,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   93,   42,
   43,   -1,   45,   -1,   -1,   -1,  125,   -1,   -1,   -1,
  307,  308,   -1,   -1,  123,   -1,   59,  126,   -1,   -1,
  307,  308,  257,  258,  259,  260,  261,   -1,  263,  264,
  125,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  276,  277,  278,  279,  280,   -1,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,   -1,  299,  300,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  258,  259,  260,   -1,
  123,  263,  125,  126,  266,   -1,   -1,  269,   -1,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,  283,  284,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,  295,  296,  297,   -1,  299,  300,   -1,
   -1,   -1,  261,   -1,   33,  264,  265,   -1,   -1,   38,
   -1,   40,  271,   42,   43,   -1,   45,   -1,  277,  278,
   -1,   -1,  281,  282,  283,   -1,  285,  286,   41,  288,
   59,   44,  291,  292,  293,  294,  295,  296,   -1,   -1,
  299,  300,   -1,   -1,   -1,   58,   59,   -1,   33,   -1,
   63,   -1,   -1,   38,  283,   40,   -1,   42,   43,   -1,
   45,   -1,  291,  292,  293,  294,  295,  296,   -1,   41,
  299,  300,   44,   -1,   59,   -1,   -1,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,
   -1,   -1,  307,  308,  123,   33,  125,  126,  261,   -1,
   38,  264,   40,   -1,   42,   43,   -1,   45,  271,   -1,
   -1,  124,  125,   -1,  277,  278,   -1,   -1,   -1,  282,
  283,   59,  285,  286,   -1,  288,   -1,   -1,  291,  292,
  293,  294,  295,  296,   -1,   -1,  299,  300,  123,   -1,
  125,  126,   -1,   33,   41,   -1,   -1,   44,   38,   -1,
   40,  123,   42,   43,   -1,   45,   41,   -1,   33,   44,
   -1,   58,   59,   38,   -1,   40,   63,   42,   43,   59,
   45,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   -1,   42,   43,   -1,   45,   -1,   93,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   59,   45,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   93,   40,
   -1,   42,   43,   59,   45,   -1,   -1,   -1,  125,   -1,
   -1,   -1,  261,   -1,   33,  264,  126,   -1,  123,   38,
   -1,   40,  271,   42,   43,   -1,   45,   -1,  277,  278,
   -1,  126,   -1,  282,  283,   -1,  285,  286,   -1,  288,
   59,   -1,  291,  292,  293,  294,  295,  296,   -1,   -1,
  299,  300,   93,   33,   -1,  126,  261,   -1,   38,  264,
   40,   41,   42,   43,   -1,   45,  271,   -1,   -1,   -1,
  126,   -1,  277,  278,  307,  308,   -1,  282,  283,   -1,
  285,  286,   -1,  288,   -1,  126,  291,  292,  293,  294,
  295,  296,   -1,   -1,  299,  300,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,   -1,  264,  126,   -1,   -1,
   -1,   -1,   -1,  271,   -1,   -1,   -1,   -1,   -1,  277,
  278,   -1,   -1,   -1,  282,  283,   -1,  285,  286,   -1,
  288,   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,
   33,  299,  300,   -1,   -1,   38,  126,   40,   41,   42,
   43,   -1,   45,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,  283,  299,
  300,  308,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   -1,  299,  300,   33,   -1,   -1,   -1,
   -1,   38,  283,   40,   41,   42,   43,   -1,   45,   -1,
  291,  292,  293,  294,  295,  296,   -1,  283,  299,  300,
   -1,   -1,   -1,  126,   -1,  291,  292,  293,  294,  295,
  296,   -1,  283,  299,  300,   -1,   -1,  126,   -1,   -1,
  291,  292,  293,  294,  295,  296,   33,   -1,  299,  300,
   -1,   38,   -1,   40,  283,   42,   43,   -1,   45,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   33,   -1,
  299,  300,   -1,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   33,   -1,  299,
  300,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   25,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   46,   -1,   48,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   40,   41,   42,
   -1,   44,   68,   69,   70,   71,   -1,   93,   94,   -1,
  283,   -1,   -1,   -1,   -1,   58,   59,   -1,  291,  292,
  293,  294,  295,  296,  283,   -1,  299,  300,   94,   -1,
  126,   -1,  291,  292,  293,  294,  295,  296,  124,  125,
  299,  300,   -1,   40,   41,   42,   -1,   44,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   40,   41,
   42,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
   -1,   -1,  299,  300,   91,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  174,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   41,   42,   -1,   -1,   -1,   -1,  283,   -1,   -1,   91,
   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,  296,
   -1,   -1,  299,  300,   -1,   -1,   -1,   -1,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,   -1,  299,  300,   40,   -1,   42,   -1,
   91,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
  296,   -1,   41,  299,  300,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,
  263,  307,  308,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   41,   -1,
   -1,  284,   -1,   -1,  287,   -1,  289,  290,  291,   -1,
   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,   -1,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  291,  257,  258,  259,  260,   -1,
  297,  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,
  272,  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,
   -1,  147,  284,   -1,   -1,  287,   -1,  289,  290,  291,
  156,   -1,   -1,   -1,   -1,  297,  257,  258,  259,  260,
   -1,   -1,  263,   -1,   -1,  266,  267,  268,  269,  270,
   74,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,   -1,  263,
   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,  133,
  284,   -1,   -1,  287,  240,  289,  290,  291,  257,  258,
  259,  260,   -1,  297,  263,   -1,  125,  266,  267,  268,
  269,  270,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,
  289,  290,   -1,   -1,  257,  258,  259,  260,  297,  125,
  263,   -1,   -1,  266,  267,  268,  269,  270,   -1,  272,
  273,  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,
   -1,  284,  206,   -1,  287,   -1,  289,  290,  314,   -1,
   -1,   -1,   -1,   -1,  297,  219,  220,  221,  222,  223,
  224,  225,  226,  227,  228,  229,   -1,   -1,   -1,   -1,
  336,  337,   -1,   -1,   -1,   -1,   -1,   -1,  344,   -1,
   -1,   -1,   -1,  247,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  357,  358,   -1,  360,   -1,   -1,   -1,  364,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  258,
  259,  260,   -1,   -1,  263,   -1,   -1,  266,  292,   -1,
  269,   -1,   -1,  272,  273,  274,  275,  276,   -1,   -1,
  279,  280,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
  289,  290,  258,  259,  260,   -1,   -1,  263,  297,   -1,
  266,   -1,  326,  269,   -1,   -1,  272,  273,  274,  275,
  276,   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,  289,  290,   -1,  257,  258,  259,  260,
   -1,  297,  263,   -1,   -1,  266,  267,  268,  269,  270,
   -1,  272,  273,  274,  275,  276,   -1,   -1,  279,  280,
   -1,   -1,   -1,  284,   -1,   -1,  287,   -1,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,   -1,   -1,
  257,  258,  259,  260,   -1,   -1,  263,   -1,  309,  266,
  267,  268,  269,  270,   -1,  272,  273,  274,  275,  276,
   -1,   -1,  279,  280,   -1,   -1,   -1,  284,   -1,   -1,
  287,   -1,  289,  290,  258,  259,  260,   -1,   -1,  263,
  297,   -1,  266,   -1,   -1,  269,   -1,   -1,  272,  273,
  274,  275,  276,   -1,   -1,  279,  280,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,  289,  290,   -1,   -1,   -1,
   -1,   -1,   -1,  297,
};
#define YYFINAL 26
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,0,0,
0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"_AUTO",
"_DOUBLE","_INT","_STRUCT","_BREAK","_ELSE","_LONG","_SWITCH","_CASE","_ENUM",
"_REGISTER","_TYPEDEF","_CHAR","_EXTERN","_RETURN","_UNION","_CONST","_FLOAT",
"_SHORT","_UNSIGNED","_CONTINUE","_FOR","_SIGNED","_VOID","_DEFAULT","_GOTO",
"_SIZEOF","_VOLATILE","_DO","_IF","_STATIC","_WHILE","_NEAR","_FAR",
"IDENTIFIER","STRINGliteral","INTEGERconstant","CHARACTERconstant",
"FLOATINGconstant","ENUMERATIONconstant","TYPEDEFname","ARROW","INC","DEC","LS",
"RS","LE","GE","EQ","NE","ANDAND","OROR","ELLIPSIS","MULTassign","DIVassign",
"MODassign","PLUSassign","MINUSassign","LSassign","RSassign","ANDassign",
"XORassign","ORassign",
};
char *yyrule[] = {
"$accept : prog.start",
"prog.start : translation.unit",
"translation.unit : external.declaration",
"translation.unit : translation.unit external.declaration",
"external.declaration : function.definition",
"external.declaration : declaration",
"$$1 :",
"function.definition : declarator $$1 compound.statement",
"$$2 :",
"function.definition : declaration.specifiers declarator $$2 compound.statement",
"declaration : declaration.specifiers ';'",
"declaration : declaration.specifiers init.declarator.list ';'",
"declaration.list : declaration",
"declaration.list : declaration.list declaration",
"declaration.specifiers : storage.class.specifier",
"declaration.specifiers : storage.class.specifier declaration.specifiers",
"declaration.specifiers : type.specifier",
"declaration.specifiers : type.specifier declaration.specifiers",
"declaration.specifiers : type.qualifier",
"declaration.specifiers : type.qualifier declaration.specifiers",
"storage.class.specifier : _AUTO",
"storage.class.specifier : _REGISTER",
"storage.class.specifier : _STATIC",
"storage.class.specifier : _EXTERN",
"storage.class.specifier : _TYPEDEF",
"type.specifier : _VOID",
"type.specifier : _CHAR",
"type.specifier : _SHORT",
"type.specifier : _INT",
"type.specifier : _LONG",
"type.specifier : _FLOAT",
"type.specifier : _DOUBLE",
"type.specifier : _SIGNED",
"type.specifier : _UNSIGNED",
"type.specifier : struct.or.union.specifier",
"type.specifier : enum.specifier",
"type.specifier : TYPEDEFname",
"type.qualifier : _CONST",
"type.qualifier : _VOLATILE",
"type.qualifier : _NEAR",
"type.qualifier : _FAR",
"struct.or.union.specifier : struct.or.union '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER '{' struct.declaration.list '}'",
"struct.or.union.specifier : struct.or.union IDENTIFIER",
"struct.or.union : _STRUCT",
"struct.or.union : _UNION",
"struct.declaration.list : struct.declaration",
"struct.declaration.list : struct.declaration.list struct.declaration",
"init.declarator.list : init.declarator",
"init.declarator.list : init.declarator.list ',' init.declarator",
"init.declarator : declarator",
"init.declarator : declarator '=' initializer",
"struct.declaration : specifier.qualifier.list struct.declarator.list ';'",
"specifier.qualifier.list : type.specifier",
"specifier.qualifier.list : type.specifier specifier.qualifier.list",
"specifier.qualifier.list : type.qualifier",
"specifier.qualifier.list : type.qualifier specifier.qualifier.list",
"struct.declarator.list : struct.declarator",
"struct.declarator.list : struct.declarator.list ',' struct.declarator",
"struct.declarator : declarator",
"struct.declarator : ':' constant.expression",
"struct.declarator : declarator ':' constant.expression",
"enum.specifier : _ENUM '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER '{' enumerator.list '}'",
"enum.specifier : _ENUM IDENTIFIER",
"enumerator.list : enumerator",
"enumerator.list : enumerator.list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant.expression",
"declarator : direct.declarator",
"declarator : pointer direct.declarator",
"direct.declarator : IDENTIFIER",
"direct.declarator : '(' declarator ')'",
"direct.declarator : direct.declarator '[' ']'",
"direct.declarator : direct.declarator '[' constant.expression ']'",
"direct.declarator : direct.declarator '(' parameter.type.list ')'",
"direct.declarator : direct.declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type.qualifier.list",
"pointer : '*' pointer",
"pointer : '*' type.qualifier.list pointer",
"type.qualifier.list : type.qualifier",
"type.qualifier.list : type.qualifier.list type.qualifier",
"parameter.type.list : parameter.list",
"parameter.type.list : parameter.list ',' ELLIPSIS",
"parameter.list : parameter.declaration",
"parameter.list : parameter.list ',' parameter.declaration",
"parameter.declaration : declaration.specifiers declarator",
"parameter.declaration : declaration.specifiers",
"parameter.declaration : declaration.specifiers abstract.declarator",
"initializer : assignment.expression",
"initializer : '{' initializer.list '}'",
"initializer : '{' initializer.list ',' '}'",
"initializer.list : initializer",
"initializer.list : initializer.list ',' initializer",
"type.name : specifier.qualifier.list",
"type.name : specifier.qualifier.list abstract.declarator",
"abstract.declarator : pointer",
"abstract.declarator : pointer direct.abstract.declarator",
"abstract.declarator : direct.abstract.declarator",
"direct.abstract.declarator : '(' abstract.declarator ')'",
"direct.abstract.declarator : '[' ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' ']'",
"direct.abstract.declarator : '[' constant.expression ']'",
"direct.abstract.declarator : direct.abstract.declarator '[' constant.expression ']'",
"direct.abstract.declarator : '(' ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' ')'",
"direct.abstract.declarator : '(' parameter.type.list ')'",
"direct.abstract.declarator : direct.abstract.declarator '(' parameter.type.list ')'",
"statement : labeled.statement",
"statement : expression.statement",
"statement : compound.statement",
"statement : selection.statement",
"statement : iteration.statement",
"statement : jump.statement",
"labeled.statement : IDENTIFIER ':' statement",
"expression.statement : ';'",
"expression.statement : expression ';'",
"compound.statement : '{' '}'",
"compound.statement : '{' statement.list '}'",
"$$3 :",
"compound.statement : '{' declaration.list $$3 '}'",
"$$4 :",
"compound.statement : '{' declaration.list $$4 statement.list '}'",
"statement.list : statement",
"statement.list : statement.list statement",
"case : _CASE constant.expression ':'",
"case : _CASE constant.expression ':' statement.list",
"case.list : case",
"case.list : case.list case",
"switch.list : case.list",
"switch.list : case.list _DEFAULT ':' statement.list",
"selection.statement : _IF '(' expression ')' statement",
"selection.statement : _IF '(' expression ')' statement _ELSE statement",
"selection.statement : _SWITCH '(' expression ')' '{' switch.list '}'",
"iteration.statement : _WHILE '(' expression ')' statement",
"iteration.statement : _DO statement _WHILE '(' expression ')'",
"iteration.statement : _FOR '(' ';' ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' ')' statement",
"iteration.statement : _FOR '(' ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' ';' expression ')' statement",
"iteration.statement : _FOR '(' ';' expression ';' expression ')' statement",
"iteration.statement : _FOR '(' expression ';' expression ';' expression ')' statement",
"jump.statement : _GOTO IDENTIFIER ';'",
"jump.statement : _CONTINUE ';'",
"jump.statement : _BREAK ';'",
"jump.statement : _RETURN ';'",
"jump.statement : _RETURN expression ';'",
"expression : assignment.expression",
"expression : expression ',' assignment.expression",
"assignment.expression : conditional.expression",
"assignment.expression : unary.expression '=' assignment.expression",
"assignment.expression : unary.expression MULTassign assignment.expression",
"assignment.expression : unary.expression DIVassign assignment.expression",
"assignment.expression : unary.expression MODassign assignment.expression",
"assignment.expression : unary.expression PLUSassign assignment.expression",
"assignment.expression : unary.expression MINUSassign assignment.expression",
"assignment.expression : unary.expression LSassign assignment.expression",
"assignment.expression : unary.expression RSassign assignment.expression",
"assignment.expression : unary.expression ANDassign assignment.expression",
"assignment.expression : unary.expression XORassign assignment.expression",
"assignment.expression : unary.expression ORassign assignment.expression",
"conditional.expression : logical.OR.expression",
"conditional.expression : logical.OR.expression '?' expression ':' conditional.expression",
"constant.expression : conditional.expression",
"logical.OR.expression : logical.AND.expression",
"logical.OR.expression : logical.OR.expression OROR logical.AND.expression",
"logical.AND.expression : inclusive.OR.expression",
"logical.AND.expression : logical.AND.expression ANDAND inclusive.OR.expression",
"inclusive.OR.expression : exclusive.OR.expression",
"inclusive.OR.expression : inclusive.OR.expression '|' exclusive.OR.expression",
"exclusive.OR.expression : AND.expression",
"exclusive.OR.expression : exclusive.OR.expression '^' AND.expression",
"AND.expression : equality.expression",
"AND.expression : AND.expression '&' equality.expression",
"equality.expression : relational.expression",
"equality.expression : equality.expression EQ relational.expression",
"equality.expression : equality.expression NE relational.expression",
"relational.expression : shift.expression",
"relational.expression : relational.expression '<' shift.expression",
"relational.expression : relational.expression '>' shift.expression",
"relational.expression : relational.expression LE shift.expression",
"relational.expression : relational.expression GE shift.expression",
"shift.expression : additive.expression",
"shift.expression : shift.expression LS additive.expression",
"shift.expression : shift.expression RS additive.expression",
"additive.expression : multiplicative.expression",
"additive.expression : additive.expression '+' multiplicative.expression",
"additive.expression : additive.expression '-' multiplicative.expression",
"multiplicative.expression : cast.expression",
"multiplicative.expression : multiplicative.expression '*' cast.expression",
"multiplicative.expression : multiplicative.expression '/' cast.expression",
"multiplicative.expression : multiplicative.expression '%' cast.expression",
"cast.expression : unary.expression",
"cast.expression : '(' type.name ')' cast.expression",
"unary.expression : postfix.expression",
"unary.expression : INC unary.expression",
"unary.expression : DEC unary.expression",
"unary.expression : unary.operator cast.expression",
"unary.expression : _SIZEOF unary.expression",
"unary.expression : _SIZEOF '(' type.name ')'",
"unary.operator : '&'",
"unary.operator : '*'",
"unary.operator : '+'",
"unary.operator : '-'",
"unary.operator : '~'",
"unary.operator : '!'",
"postfix.expression : primary.expression",
"postfix.expression : postfix.expression '[' expression ']'",
"postfix.expression : postfix.expression '(' ')'",
"postfix.expression : postfix.expression '(' argument.expression.list ')'",
"postfix.expression : postfix.expression '.' IDENTIFIER",
"postfix.expression : postfix.expression ARROW IDENTIFIER",
"postfix.expression : postfix.expression INC",
"postfix.expression : postfix.expression DEC",
"primary.expression : IDENTIFIER",
"primary.expression : constant",
"primary.expression : STRINGliteral",
"primary.expression : '(' expression ')'",
"argument.expression.list : assignment.expression",
"argument.expression.list : argument.expression.list ',' assignment.expression",
"constant : INTEGERconstant",
"constant : CHARACTERconstant",
"constant : FLOATINGconstant",
"constant : ENUMERATIONconstant",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 623 "Source/C.y"

/* ----end of grammar----*/


void
yyerror(PSTR s) {
    Error(ERROR0, s,0L);
}


/* eof */
#line 1104 "Source/C_Yacced.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 4:
#line 181 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 5:
#line 182 "Source/C.y"
{ Declaration(yyvsp[0].pDecl);  }
break;
case 6:
#line 186 "Source/C.y"
{ FuncParams(NewSpecType(TypeINT, NULL), yyvsp[0].pDecl); }
break;
case 7:
#line 186 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement ); }
break;
case 8:
#line 187 "Source/C.y"
{ FuncParams(yyvsp[-1].pDecl, yyvsp[0].pDecl); }
break;
case 9:
#line 187 "Source/C.y"
{ yyval.pDecl = FunctionBody(yyvsp[-2].pDecl, NULL, yyvsp[0].pStatement );                         }
break;
case 10:
#line 193 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 11:
#line 194 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);   }
break;
case 12:
#line 198 "Source/C.y"
{  yyval.pDecl = yyvsp[0].pDecl;                 }
break;
case 13:
#line 199 "Source/C.y"
{  yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl); }
break;
case 14:
#line 203 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 15:
#line 204 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 16:
#line 205 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 17:
#line 206 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 18:
#line 207 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 19:
#line 208 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 20:
#line 212 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassAUTO);         }
break;
case 21:
#line 213 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassREGISTER);     }
break;
case 22:
#line 214 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassSTATIC);       }
break;
case 23:
#line 215 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassEXTERN);       }
break;
case 24:
#line 216 "Source/C.y"
{ yyval.pDecl = NewSpecClass(ClassTYPEDEF);      }
break;
case 25:
#line 220 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeVOID,    NULL); }
break;
case 26:
#line 221 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeCHAR,    NULL); }
break;
case 27:
#line 222 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSHORT,   NULL); }
break;
case 28:
#line 223 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeINT,     NULL); }
break;
case 29:
#line 224 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeLONG,    NULL); }
break;
case 30:
#line 225 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeFLOAT,   NULL); }
break;
case 31:
#line 226 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeDOUBLE,  NULL); }
break;
case 32:
#line 227 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSIGNED,  NULL); }
break;
case 33:
#line 228 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeUNSIGNED,NULL); }
break;
case 34:
#line 229 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeSTRUCT,  yyvsp[0].pStructSet);   }
break;
case 35:
#line 230 "Source/C.y"
{ yyval.pDecl = NewSpecType(TypeENUM,    yyvsp[0].pEnumSet);   }
break;
case 36:
#line 231 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                             }
break;
case 37:
#line 235 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualCONST);         }
break;
case 38:
#line 236 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualVOLATILE);      }
break;
case 39:
#line 237 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualNEAR);          }
break;
case 40:
#line 238 "Source/C.y"
{ yyval.pDecl = NewSpecQual(QualFAR);           }
break;
case 41:
#line 242 "Source/C.y"
{ yyval.pStructSet = AddStructSet("", yyvsp[-3].Bool, yyvsp[-1].pDecl);    }
break;
case 42:
#line 243 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[-3].Ident, yyvsp[-4].Bool, yyvsp[-1].pDecl);    }
break;
case 43:
#line 244 "Source/C.y"
{ yyval.pStructSet = AddStructSet(yyvsp[0].Ident, yyvsp[-1].Bool, NULL);  }
break;
case 44:
#line 248 "Source/C.y"
{ yyval.Bool = FALSE;  }
break;
case 45:
#line 249 "Source/C.y"
{ yyval.Bool = TRUE;   }
break;
case 46:
#line 253 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 47:
#line 254 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-1].pDecl,yyvsp[0].pDecl);  }
break;
case 48:
#line 259 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                       }
break;
case 49:
#line 260 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl); }
break;
case 50:
#line 264 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 51:
#line 265 "Source/C.y"
{ yyval.pDecl = AddInitializer(yyvsp[-2].pDecl,yyvsp[0].pExpr);   }
break;
case 52:
#line 269 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[-1].pDecl,yyvsp[-2].pDecl);       }
break;
case 53:
#line 273 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 54:
#line 274 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 55:
#line 275 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 56:
#line 276 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 57:
#line 280 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 58:
#line 281 "Source/C.y"
{ yyval.pDecl = DeclVarAddBrother(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 59:
#line 285 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 60:
#line 286 "Source/C.y"
{ yyval.pDecl = NULL;                    ConsolePrintf(CON_CYAN,"struct.declarator 2\n"); }
break;
case 61:
#line 287 "Source/C.y"
{ yyval.pDecl = yyvsp[-2].pDecl;                      ConsolePrintf(CON_CYAN,"struct.declarator 3\n");  }
break;
case 62:
#line 291 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd("",yyvsp[-1].pEnumElement);       }
break;
case 63:
#line 292 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[-3].Ident,yyvsp[-1].pEnumElement);       }
break;
case 64:
#line 293 "Source/C.y"
{ yyval.pEnumSet = EnumSetAdd(yyvsp[0].Ident,NULL);     }
break;
case 65:
#line 297 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(NULL,yyvsp[0].pEnumElement); }
break;
case 66:
#line 298 "Source/C.y"
{ yyval.pEnumElement = EnumElementAdd(yyvsp[-2].pEnumElement,yyvsp[0].pEnumElement);   }
break;
case 67:
#line 302 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[0].Ident,NULL);}
break;
case 68:
#line 303 "Source/C.y"
{ yyval.pEnumElement = EnumElementMake(yyvsp[-2].Ident,yyvsp[0].pExpr);  }
break;
case 69:
#line 307 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 70:
#line 308 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);       }
break;
case 71:
#line 312 "Source/C.y"
{ yyval.pDecl = NewIdentifier(yyvsp[0].Ident);       }
break;
case 72:
#line 313 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 73:
#line 314 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 74:
#line 315 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 75:
#line 316 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,yyvsp[-1].pDecl,NULL);     }
break;
case 76:
#line 317 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 77:
#line 322 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, NULL);  }
break;
case 78:
#line 323 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[0].pDecl, NULL);    }
break;
case 79:
#line 324 "Source/C.y"
{ yyval.pDecl = NewPointer(NULL, yyvsp[0].pDecl);    }
break;
case 80:
#line 325 "Source/C.y"
{ yyval.pDecl = NewPointer(yyvsp[-1].pDecl, yyvsp[0].pDecl);      }
break;
case 81:
#line 329 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 82:
#line 330 "Source/C.y"
{ yyval.pDecl = ConcatDeclSpec(yyvsp[-1].pDecl,yyvsp[0].pDecl);   }
break;
case 83:
#line 334 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 84:
#line 335 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,NewIdentifier("..."));  }
break;
case 85:
#line 339 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                      }
break;
case 86:
#line 340 "Source/C.y"
{ yyval.pDecl = DeclAddVarToParameterList(yyvsp[-2].pDecl,yyvsp[0].pDecl);      }
break;
case 87:
#line 344 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);                              }
break;
case 88:
#line 345 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),yyvsp[0].pDecl);               }
break;
case 89:
#line 346 "Source/C.y"
{ yyval.pDecl = AppendDecl(NewIdentifier(""),AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl));}
break;
case 90:
#line 355 "Source/C.y"
{ yyval.pExpr = ExprMakeInitNode(yyvsp[0].pExpr);        }
break;
case 91:
#line 356 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-1].pExpr);        }
break;
case 92:
#line 357 "Source/C.y"
{ yyval.pExpr = ExprMakeInitList(yyvsp[-2].pExpr);        }
break;
case 93:
#line 361 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 94:
#line 362 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 95:
#line 366 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 96:
#line 367 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 97:
#line 371 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 98:
#line 372 "Source/C.y"
{ yyval.pDecl = AppendDecl(yyvsp[0].pDecl,yyvsp[-1].pDecl);   }
break;
case 99:
#line 373 "Source/C.y"
{ yyval.pDecl = yyvsp[0].pDecl;                  }
break;
case 100:
#line 377 "Source/C.y"
{ yyval.pDecl = yyvsp[-1].pDecl;                      }
break;
case 101:
#line 378 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,NULL);     }
break;
case 102:
#line 379 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-2].pDecl,NULL);       }
break;
case 103:
#line 380 "Source/C.y"
{ yyval.pDecl = NewArray(NULL,yyvsp[-1].pExpr);       }
break;
case 104:
#line 381 "Source/C.y"
{ yyval.pDecl = NewArray(yyvsp[-3].pDecl,yyvsp[-1].pExpr);         }
break;
case 105:
#line 382 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); }
break;
case 106:
#line 383 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-2].pDecl,NULL,NULL);   }
break;
case 107:
#line 384 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(NULL,NULL,NULL); ConsolePrintf(CON_CYAN, "direct.abstract.declarator 8\n"); }
break;
case 108:
#line 385 "Source/C.y"
{ yyval.pDecl = DeclNewFunc(yyvsp[-3].pDecl,NULL,NULL);   ConsolePrintf(CON_CYAN, "direct.abstract.declarator 9\n"); }
break;
case 109:
#line 389 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 110:
#line 390 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 111:
#line 391 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 112:
#line 392 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 113:
#line 393 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 114:
#line 394 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 115:
#line 398 "Source/C.y"
{ yyval.pStatement = StatementAddLabel(yyvsp[-2].Ident, yyvsp[0].pStatement);   }
break;
case 116:
#line 404 "Source/C.y"
{ yyval.pStatement = NULL; }
break;
case 117:
#line 405 "Source/C.y"
{ yyval.pStatement = StatementMakeExpression(yyvsp[-1].pExpr); }
break;
case 118:
#line 409 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, NULL ); }
break;
case 119:
#line 410 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( NULL, yyvsp[-1].pStatement   ); }
break;
case 120:
#line 411 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 121:
#line 411 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-2].pDecl,   NULL );   UndeclareLocal(yyvsp[-2].pDecl); }
break;
case 122:
#line 412 "Source/C.y"
{ DeclareLocal(yyvsp[0].pDecl); }
break;
case 123:
#line 412 "Source/C.y"
{ yyval.pStatement = StatementMakeCompound( yyvsp[-3].pDecl,   yyvsp[-1].pStatement   );   UndeclareLocal(yyvsp[-3].pDecl); }
break;
case 124:
#line 416 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 125:
#line 417 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement); }
break;
case 126:
#line 421 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-1].pExpr, NULL); }
break;
case 127:
#line 422 "Source/C.y"
{ yyval.pStatement = StatementMakeCase(yyvsp[-2].pExpr, yyvsp[0].pStatement);   }
break;
case 128:
#line 426 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement;                          }
break;
case 129:
#line 427 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-1].pStatement,yyvsp[0].pStatement);      }
break;
case 130:
#line 431 "Source/C.y"
{ yyval.pStatement = yyvsp[0].pStatement; }
break;
case 131:
#line 432 "Source/C.y"
{ yyval.pStatement = StatementAppend(yyvsp[-3].pStatement,StatementMakeCase(NULL, yyvsp[0].pStatement)); }
break;
case 132:
#line 436 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-2].pExpr, yyvsp[0].pStatement, NULL); }
break;
case 133:
#line 437 "Source/C.y"
{ yyval.pStatement = StatementMakeIf(yyvsp[-4].pExpr, yyvsp[-2].pStatement, yyvsp[0].pStatement);   }
break;
case 134:
#line 438 "Source/C.y"
{ yyval.pStatement = StatementMakeSwitch(yyvsp[-4].pExpr, yyvsp[-1].pStatement);   }
break;
case 135:
#line 442 "Source/C.y"
{ yyval.pStatement = StatementMakeWhile(yyvsp[-2].pExpr, yyvsp[0].pStatement);             }
break;
case 136:
#line 443 "Source/C.y"
{ yyval.pStatement = StatementMakeDo(yyvsp[-4].pStatement, yyvsp[-1].pExpr);                }
break;
case 137:
#line 444 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, NULL, yyvsp[0].pStatement); }
break;
case 138:
#line 445 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-4].pExpr,   NULL, NULL, yyvsp[0].pStatement); }
break;
case 139:
#line 446 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 140:
#line 447 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   yyvsp[-3].pExpr,   NULL, yyvsp[0].pStatement); }
break;
case 141:
#line 448 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 142:
#line 449 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-5].pExpr,   NULL, yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 143:
#line 450 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(NULL, yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 144:
#line 451 "Source/C.y"
{ yyval.pStatement = StatementMakeFor(yyvsp[-6].pExpr,   yyvsp[-4].pExpr,   yyvsp[-2].pExpr,   yyvsp[0].pStatement); }
break;
case 145:
#line 455 "Source/C.y"
{ yyval.pStatement = StatementMakeGoto(yyvsp[-1].Ident);     }
break;
case 146:
#line 456 "Source/C.y"
{ yyval.pStatement = StatementMakeContinue();   }
break;
case 147:
#line 457 "Source/C.y"
{ yyval.pStatement = StatementMakeBreak();      }
break;
case 148:
#line 458 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(NULL); }
break;
case 149:
#line 459 "Source/C.y"
{ yyval.pStatement = StatementMakeReturn(yyvsp[-1].pExpr);   }
break;
case 150:
#line 463 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                  }
break;
case 151:
#line 464 "Source/C.y"
{ yyval.pExpr = ExprConcat(yyvsp[-2].pExpr, yyvsp[0].pExpr);  }
break;
case 152:
#line 487 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                 }
break;
case 153:
#line 488 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, yyvsp[0].pExpr); }
break;
case 154:
#line 489 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binMul, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 155:
#line 490 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binDiv, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 156:
#line 491 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binMod, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 157:
#line 492 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binAdd, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 158:
#line 493 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binSub, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 159:
#line 494 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binShl, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 160:
#line 495 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binShr, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 161:
#line 496 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binAnd, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 162:
#line 497 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binXor, yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 163:
#line 498 "Source/C.y"
{ yyval.pExpr = ExprMakeAssignNode(yyvsp[-2].pExpr, ExprMakeBinaryNode(binOr,  yyvsp[-2].pExpr, yyvsp[0].pExpr)); }
break;
case 164:
#line 502 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                                          }
break;
case 165:
#line 503 "Source/C.y"
{ yyval.pExpr = ExprMakeTernaryNode(CondExp, yyvsp[-4].pExpr, yyvsp[-2].pExpr, yyvsp[0].pExpr);    }
break;
case 166:
#line 507 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 167:
#line 511 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 168:
#line 512 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 169:
#line 516 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 170:
#line 517 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binLAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 171:
#line 521 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 172:
#line 522 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binOr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 173:
#line 526 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 174:
#line 527 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binXor,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 175:
#line 531 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 176:
#line 532 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAnd,yyvsp[-2].pExpr,yyvsp[0].pExpr);  }
break;
case 177:
#line 536 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 178:
#line 537 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCEQ,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 179:
#line 538 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCNE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 180:
#line 542 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 181:
#line 543 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 182:
#line 544 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGT,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 183:
#line 545 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCLE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 184:
#line 546 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binCGE,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 185:
#line 550 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 186:
#line 551 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShl,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 187:
#line 552 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binShr,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 188:
#line 556 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 189:
#line 557 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binAdd,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 190:
#line 558 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binSub,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 191:
#line 562 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 192:
#line 563 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMul,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 193:
#line 564 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binDiv,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 194:
#line 565 "Source/C.y"
{ yyval.pExpr = ExprMakeBinaryNode(binMod,yyvsp[-2].pExpr,yyvsp[0].pExpr);   }
break;
case 195:
#line 569 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 196:
#line 570 "Source/C.y"
{ yyval.pExpr = ExprMakeCastNode(yyvsp[-2].pDecl,yyvsp[0].pExpr);         }
break;
case 197:
#line 574 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 198:
#line 575 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreInc,yyvsp[0].pExpr);    }
break;
case 199:
#line 576 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPreDec,yyvsp[0].pExpr);    }
break;
case 200:
#line 577 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(yyvsp[-1].nUnaryOp,yyvsp[0].pExpr);        }
break;
case 201:
#line 578 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unSizeOf,yyvsp[0].pExpr);    }
break;
case 202:
#line 579 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(CalcSizeOf(yyvsp[-1].pDecl));  }
break;
case 203:
#line 583 "Source/C.y"
{ yyval.nUnaryOp = unAddr;    }
break;
case 204:
#line 584 "Source/C.y"
{ yyval.nUnaryOp = unPtr;     }
break;
case 205:
#line 585 "Source/C.y"
{ yyval.nUnaryOp = unPlus;    }
break;
case 206:
#line 586 "Source/C.y"
{ yyval.nUnaryOp = unMinus;   }
break;
case 207:
#line 587 "Source/C.y"
{ yyval.nUnaryOp = unNeg;     }
break;
case 208:
#line 588 "Source/C.y"
{ yyval.nUnaryOp = unNot;     }
break;
case 209:
#line 592 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 210:
#line 593 "Source/C.y"
{ yyval.pExpr = ExprMakeArrayNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);        }
break;
case 211:
#line 594 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-2].pExpr,NULL);       }
break;
case 212:
#line 595 "Source/C.y"
{ yyval.pExpr = ExprMakeFuncNode(yyvsp[-3].pExpr,yyvsp[-1].pExpr);         }
break;
case 213:
#line 596 "Source/C.y"
{ yyval.pExpr = ExprMakeDotNode(yyvsp[-2].pExpr,yyvsp[0].Ident);          }
break;
case 214:
#line 597 "Source/C.y"
{ yyval.pExpr = ExprMakeArrowNode(yyvsp[-2].pExpr,yyvsp[0].Ident);        }
break;
case 215:
#line 598 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostInc,yyvsp[-1].pExpr); }
break;
case 216:
#line 599 "Source/C.y"
{ yyval.pExpr = ExprMakeUnaryNode(unPostDec,yyvsp[-1].pExpr); }
break;
case 217:
#line 603 "Source/C.y"
{ yyval.pExpr = ExprMakeVar(yyvsp[0].Ident);                 }
break;
case 218:
#line 604 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 219:
#line 605 "Source/C.y"
{ yyval.pExpr = ExprMakeConstS(yyvsp[0].Ident);              }
break;
case 220:
#line 606 "Source/C.y"
{ yyval.pExpr = yyvsp[-1].pExpr;                              }
break;
case 221:
#line 610 "Source/C.y"
{ yyval.pExpr = yyvsp[0].pExpr;                              }
break;
case 222:
#line 611 "Source/C.y"
{ yyval.pExpr = ExprConcatArgs(yyvsp[-2].pExpr, yyvsp[0].pExpr);          }
break;
case 223:
#line 615 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
case 224:
#line 616 "Source/C.y"
{ yyval.pExpr = ExprMakeConstC(yyvsp[0].Integer);              }
break;
case 225:
#line 617 "Source/C.y"
{ yyval.pExpr = ExprMakeConstF(yyvsp[0].Real);              }
break;
case 226:
#line 618 "Source/C.y"
{ yyval.pExpr = ExprMakeConstI(yyvsp[0].Integer);              }
break;
#line 2137 "Source/C_Yacced.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

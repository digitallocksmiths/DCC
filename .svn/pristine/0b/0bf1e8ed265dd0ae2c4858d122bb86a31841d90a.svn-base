; SKC AVR Output - V1(Jan  3 2020)

#define		_IO_SPL	0x3D
#define		_IO_SPH	0x3E

                                                            ; ##########################
                                                            ; # Start of CONST segment #
                     .section    CONST, "a"                 ; ##########################

                     .global   baRom
baRom:                                                      ; Array[5] of char
                     .byte     0                            ;           0x00 -> baRom[0]
                     .byte     0                            ;           0x00 -> -----[1]
                     .byte     0                            ;           0x00 -> -----[2]
                     .byte     0                            ;           0x00 -> -----[3]
                     .byte     0                            ;           0x00 -> -----[4]

                     .global   saRom
saRom:                                                      ; Array[5] of short 
                     .word     0                            ;         0x0000 -> saRom[0]
                     .word     0                            ;         0x0000 -> -----[1]
                     .word     0                            ;         0x0000 -> -----[2]
                     .word     0                            ;         0x0000 -> -----[3]
                     .word     0                            ;         0x0000 -> -----[4]

                     .global   laRom
laRom:                                                      ; Array[5] of long
                     .long     0                            ;     0x00000000 -> laRom[0]
                     .long     0                            ;     0x00000000 -> -----[1]
                     .long     0                            ;     0x00000000 -> -----[2]
                     .long     0                            ;     0x00000000 -> -----[3]
                     .long     0                            ;     0x00000000 -> -----[4]
                     ;.endseg                               ; === End of CONST segment ===


                                                            ; #########################
                                                            ; # Start of INIT segment #
                     .section    INIT,  "a"                 ; #########################
                                                            ; This is the source of the initialization data
                                                            ; #########################
                     .section    .data                      ; # Start of DATA segment #
                                                            ; #########################
                                                            ; This is where the initialization data will be copied to
                     ;.endseg                               ; === End of DATA segment ===


                                                            ; ########################
                     .section    .bss                       ; # Start of BSS segment #
                                                            ; ########################
                                                            ; Here starts the uninitialized data

                     .global   baRam
baRam:               .space       5                         ; Array[5] of char

                     .global   saRam
saRam:               .space      10                         ; Array[5] of short 

                     .global   laRam
laRam:               .space      20                         ; Array[5] of long
                     ;.endseg                               ; === End of BSS segment ===


                                                            ; #########################
                     .section    .text                      ; # Start of TEXT segment #
                                                            ; #########################
                                                            ; Here starts the executable code

                     .global   main
main:                ; ###########################################
                     ; # Function: main                     
                     ; #   Return: unsigned int  (r4,r5)    
                     ; #   Params: @Y+41 , laParam  size=2  Pointer to long , Class[_____]
                     ; #         : @Y+39 , saParam  size=2  Pointer to short , Class[_____]
                     ; #         : @Y+37 , baParam  size=2  Pointer to char , Class[_____]
                     ; #   CPU   : @Y+35, Return Address    
                     ; #         : @Y+33, Preserved Frame Pointer
                     ; #   Locals: @Y+31 , baLocal  size=2  Pointer to char , Class[_____]
                     ; #         : @Y+21 , saLocal  size=10 Array[5] of short , Class[_____]
                     ; #         : @Y+1  , laLocal  size=20 Array[5] of long , Class[_____]
                     ; #         : sizeof(locals) = 32      
                     ; ###########################################
                     ; #### frame setup #########           ; 
                     push      r29                          ;   2: (YH) preserve Frame
                     push      r28                          ;   2: (YL)
                     in        r29, _IO_SPH                 ;   1: FP <- SP
                     in        r28, _IO_SPL                 ;   1:
                     ; #### alloc locals ########           ; 
                     sbiw      r28, 32                      ;   2: FP -= sizeof(locals))
                     out       _IO_SPH, r29                 ;   1: SP <- FP
                     out       _IO_SPL, r28                 ;   1:
                     ; #### body text ###########           ; 
                     ; ==== Compound Statement ============ ; L_compound_Id_000001
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(baRom)              ;   1: Z = &baRom
                     ldi       r31, hi8(baRom)              ;   1:
                     movw      r4, r30                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(baRom)              ;   1: Z = baRom
                     ldi       r31, hi8(baRom)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x01                    ;   1: const 1
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     lpm       r4, Z                        ;   3: data is in ROM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(saRom)              ;   1: Z = saRom
                     ldi       r31, hi8(saRom)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x02                    ;   1: const 2
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     lpm       r4, Z+                       ;   3: data is in ROM
                     lpm       r5, Z+                       ;   3:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(laRom)              ;   1: Z = laRom
                     ldi       r31, hi8(laRom)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x04                    ;   1: const 4
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     lpm       r4, Z+                       ;   3: data is in ROM
                     lpm       r5, Z+                       ;   3:
                     lpm       r6, Z+                       ;   3:
                     lpm       r7, Z+                       ;   3:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(laRom)              ;   1: Z = laRom
                     ldi       r31, hi8(laRom)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x08                    ;   1: const 8
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     lpm       r4, Z+                       ;   3: data is in ROM
                     lpm       r5, Z+                       ;   3:
                     lpm       r6, Z+                       ;   3:
                     lpm       r7, Z+                       ;   3:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(baRam)              ;   1: Z = &baRam
                     ldi       r31, hi8(baRam)              ;   1:
                     movw      r4, r30                      ;   1:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(baRam)              ;   1: Z = baRam
                     ldi       r31, hi8(baRam)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x01                    ;   1: const 1
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(saRam)              ;   1: Z = saRam
                     ldi       r31, hi8(saRam)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x02                    ;   1: const 2
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(laRam)              ;   1: Z = laRam
                     ldi       r31, hi8(laRam)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x04                    ;   1: const 4
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldi       r30, lo8(laRam)              ;   1: Z = laRam
                     ldi       r31, hi8(laRam)              ;   1:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x08                    ;   1: const 8
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+37                     ;   2: baParam
                     ldd       r5, Y+38                     ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+37                     ;   2: baParam
                     ldd       r5, Y+38                     ;   2:
                     ldi       r26, 0x01                    ;   1: const 1
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+39                     ;   2: saParam
                     ldd       r5, Y+40                     ;   2:
                     ldi       r26, 0x02                    ;   1: const 2
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+41                     ;   2: laParam
                     ldd       r5, Y+42                     ;   2:
                     ldi       r26, 0x04                    ;   1: const 4
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+41                     ;   2: laParam
                     ldd       r5, Y+42                     ;   2:
                     ldi       r26, 0x08                    ;   1: const 8
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+31                     ;   2: baLocal
                     ldd       r5, Y+32                     ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     ldd       r4, Y+31                     ;   2: baLocal
                     ldd       r5, Y+32                     ;   2:
                     ldi       r26, 0x01                    ;   1: const 1
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = saLocal
                     adiw      r30, 0x15                    ;   2:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x02                    ;   1: const 2
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = laLocal
                     adiw      r30, 0x01                    ;   2:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x04                    ;   1: const 4
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ; ==== Expr Statement ================ ; 
                     movw      r30, r28                     ;   1: Z = laLocal
                     adiw      r30, 0x01                    ;   2:
                     movw      r4, r30                      ;   1:
                     ldi       r26, 0x08                    ;   1: const 8
                     ldi       r27, 0x00                    ;   1:
                     movw      r6, r26                      ;   1:
                     add       r4, r6                       ;   1: Add16
                     adc       r5, r7                       ;   1:
                     movw      r30, r4                      ;   1: de-ref pointer
                     ld        r4, Z                        ;   1: data is in RAM
                     ldd       r5, Z+1                      ;   2:
                     ldd       r6, Z+2                      ;   2:
                     ldd       r7, Z+3                      ;   2:
                     ;      Expr end ------------           
                     ;      Compound End --------           ; L_compound_Id_000001
                     ; #### exit ################           ; 
L_Exit_000000:       adiw      r28, 32                      ;   2: Y += sizeof(locals)
                     out       _IO_SPH, r29                 ;   1: SP <- Y
                     out       _IO_SPL, r28                 ;   1:
                     pop       r28                          ;   2: FP <- preserved Frame
                     pop       r29                          ;   2: 
                     ret                                    ;   4: 
                     
         
                            
                     ;.endseg                               ; === End of TEXT segment ===



                     .end                                   ; End of generated code.

; eof

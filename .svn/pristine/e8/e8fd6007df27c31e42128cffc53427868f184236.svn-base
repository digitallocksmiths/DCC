// # $URL: https://eboracum-vss.digitallocksmiths.local/svn/Dls/Sean/RoyalHolloway/CC_Avr/Source/Gen.c $
// # $Revision: 397 $


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <Windows.h>

#include "..\lex.h"
#include "..\typectrl.h"
//#include "expr.h"
#include "GenAsm.h"
#include "Gen.h"
#include "..\main.h"


#define GEN_PREFIX "L"
static WORD GenCount = 0;

LPSTR GenLabel(LPSTR PreFix) {
	LPSTR Label = New(strlen(GEN_PREFIX)+strlen(PreFix)+6+1);
	sprintf(Label, GEN_PREFIX "%s%06ld", PreFix, GenCount++);
	return Label;
 }


static int Pad(FILE *hOut, int n) {
    int nCount = 0;
    while (n>0) {
        fprintf(hOut, " ");
        n--;
        nCount++;
    }
    return nCount;
}


void GenAsmOut(LPSTR pszLabel, LPSTR pszOpcode, LPSTR pszOperand, LPSTR pszComment, BOOL fNL, BOOL fGlobal) {
    int n;

    if (fGlobal && (pszLabel != NULL) && (*pszLabel != '\0')) {
        n = 0;
        n += Pad(hGlbOut, LABEL_WIDTH);
        n += fprintf(hGlbOut, " .global");
        n += Pad(hGlbOut, LABEL_WIDTH + OPCODE_WIDTH - n);
        n += fprintf(hGlbOut, " %s\n", pszLabel);
//      n += Pad(hOut, LABEL_WIDTH + OPCODE_WIDTH + OPERAND_WIDTH - n);
//      n += fprintf(hOut, ";\n");
    }

    n = 0;
    if ((pszLabel != NULL) && (*pszLabel != '\0')) { 
        n += fprintf(hGlbOut, "%s:", pszLabel);
    }
    n += Pad(hGlbOut, LABEL_WIDTH - n);

    if ((pszOpcode != NULL) && (*pszOpcode != '\0')) { 
        n += fprintf(hGlbOut, " %s", pszOpcode);
    }
    n += Pad(hGlbOut, LABEL_WIDTH + OPCODE_WIDTH - n);

    if ((pszOperand != NULL) && (*pszOperand != '\0')) { 
        n += fprintf(hGlbOut, " %s", pszOperand);
    }
    n += Pad(hGlbOut, LABEL_WIDTH + OPCODE_WIDTH + OPERAND_WIDTH - n);

    if (pszComment != NULL) {
        n += fprintf(hGlbOut, "; %s", pszComment);
        if (fNL) {
            fprintf(hGlbOut, "\n");
        }
    }
    else {
        fprintf(hGlbOut, "\n");
    }
}


BOOL GenIsData(WORD nUse) {
    switch (nUse) {
    case DecSpec:
    case DecPtr:
    case DecArray:  return TRUE;
    case DecId:
    case DecFunc:   return FALSE;
    default:
        Error(FATAL, "GenIsData() unknown use");
    }
    return FALSE;
}

BOOL    GenIsFunction(WORD nUse) {
    switch (nUse) {
    case DecSpec:
    case DecPtr:
    case DecArray:
    case DecId:     return FALSE;
    case DecFunc:   return TRUE;
    default:
        Error(FATAL, "GenIsFunction() unknown use");
    }
    return FALSE;
}



void    GenIntro(void) {
    GenAsm("", "",        "",                  "SKC AVR Output");
    GenAsm("", ".extern", "SysTrap",           "\n");

    fprintf(hGlbOut, "#define   _IO_SPL   0x3D\n");
    fprintf(hGlbOut, "#define   _IO_SPH   0x3E\n");
}

void    GenTail(void) {
    fprintf(hGlbOut, "\n");
    GenAsm("",       ".end", "", "End of generated code.");
    fprintf(hGlbOut, "\n");
    fprintf(hGlbOut, "; eof\n");
}

/* eof */

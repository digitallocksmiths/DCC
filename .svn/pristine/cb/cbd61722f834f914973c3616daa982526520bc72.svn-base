
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <process.h>
#include <Windows.h>

//#include <ext\types.h>

#include "C_Yacced.tab.h"
#include "lex.h"
#include "typectrl.h"
#include "Gen.h"

/* ******************************************* */

/* ******************************************* */

YYSTYPE     yylval;
void        yyparse(void);

DWORD ErrorCount   = 0;
DWORD WarningCount = 0;
    
void ErrorLocator0(void) {
    WORD i;
    fprintf(stderr, "%6ld: %s\n",yylval.LineInfo.LineNo, CurrentLine);
    for (i=0; i<yylval.LineInfo.LinePos+7; i++) fprintf(stderr, " ");
    fprintf(stderr, "^\n");
    
}

void ErrorLocator1(void) {
    WORD i;
    fprintf(stderr, "%6ld: %s\n",yylval.LineInfo.OldNo, PreviousLine);
    for (i=0; i<yylval.LineInfo.OldPos+7; i++) fprintf(stderr, " ");
    fprintf(stderr, "^\n");
    
}

void Error0(LPSTR s1, LPSTR s2) {
    ErrorLocator0();
    if (s2 && *s2)  fprintf(stderr, "Error:\t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Error:\t%s\n",s1);
    ErrorCount++;
}

void Error1(LPSTR s1, LPSTR s2) {
    ErrorLocator1();
    if (s2 && *s2)  fprintf(stderr, "Error:\t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Error:\t%s\n", s1);
    ErrorCount++;
}

void ErrorGen(LPSTR s1, LPSTR s2) {
    if (s2 && *s2)  fprintf(stderr, "Error: Gen:\t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Error: Gen: \t%s\n", s1);
    ErrorCount++;
}

void Warning0(LPSTR s1, LPSTR s2) {
    ErrorLocator0();
    if (s2 && *s2)  fprintf(stderr, "Warning:\t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Warning:\t%s\n",s1);
    WarningCount++;
}

void Warning1(LPSTR s1, LPSTR s2) {
    ErrorLocator1();
    if (s2 && *s2)  fprintf(stderr, "Warning:\t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Warning:\t%s\n", s1);
    WarningCount++;
}

void WarningGen(LPSTR s1, LPSTR s2) {
    if (s2 && *s2)  fprintf(stderr, "Warning: Gen: \t%s '%s'\n", s1, s2);
    else            fprintf(stderr, "Warning: Gen: :\t%s\n", s1);
    WarningCount++;
}

/* **************************************************************** */

char Source[_MAX_PATH];
char Dest[_MAX_PATH];
char Drive[_MAX_DRIVE];
char Dir[_MAX_DIR];
char Ext[_MAX_EXT];
char File[_MAX_FNAME];

void
SortOutFileNames(PSTR Name) {
	_splitpath( Name,   Drive, Dir, File, Ext);
	_makepath(  Source, Drive, Dir, File, ((*Ext == '.') && Ext[1]) ? Ext : ".c" );
	_makepath(  Dest,   Drive, Dir, File, ".asm" );
}


void
main(int Argc, char *Argv[]) {
    // testing();
    // exit(0);

    if (Argc > 1) SortOutFileNames(Argv[1]);
    else          SortOutFileNames("code");
    
    if (!StartInput(Source)) {
            fprintf(stderr, "Failed opening source file '%s'\n", Source);
            exit(-1);
    }

    yyparse();
    EndInput();
        
    printf("%ld Errors, %ld Warnings.\n", ErrorCount, WarningCount);
#ifdef _DEBUG
    EnumSetPrintList();
    PrintStructSets();
    ListGlobalTypes();
    ListLocalTypes();
    ListGlobalObjects();
    ListLocalObjects();
    //_getch();

    GenBss(GlobalObjects);
    GenData(GlobalObjects);

    _getch();

#endif // _DEBUG
    if (ErrorCount)   exit(-1);
    if (WarningCount) exit(1);

    exit(0);
 }

/* eof */


// # $URL: https://eboracum-vss.digitallocksmiths.local/svn/Dls/Sean/RoyalHolloway/CC_Avr/Source/GenExpression.c $
// # $Revision: 391 $



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <signal.h>
#include <setjmp.h>
#include <stdlib.h>
#include <memory.h>
#include <string.h>
#include <limits.h>
#include <float.h>
#include <Windows.h>

//#include <ext\types.h>
#include "Utilities\Console.h"

//#include "lex.h"
#include "typectrl.h"
#include "expr.h"
//#include "ExprOptimize.h"
#include "gen.h"
#include "main.h"
//#include "C_Yacced.tab.h"
#include "GenAsm.h"
//#include "GenStatements.h"
#include "GenMemAccess.h"



// ##########################################################################
// #  Function: FetchOptions
// #        Fetch what's at the pointer experession
// #
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void       FetchOptions(int iReg, TPExprNode pExpr, TPMemAccess pZ) {

    pZ->bVarSize = (UCHAR)CalcSizeOf(pExpr->pType);                                                         // Size of this variable
    ASSERT(pZ->bVarSize <= 4)

    if (pExpr->Usage == uConst) {                                                                           // **** Constant indicated.
        pZ->lN = pExpr->Use.Const.lInteger;                                                                 //
        pZ->Method = ACCESS_CONST;                                                                          //
        return;                                                                                             //
    }                                                                                                       //

    if (pExpr->Usage == uVar) {                                                                             // **** Variable
        if (pExpr->Use.Var.pDecId == NULL) {                                                                // Z := &Var (global)
            pZ->pszS = pExpr->Use.Var.pszIdentifier;                                                        //
            pZ->lN   = 0;                                                                                   //
#pragma message("    **** FetchOptions(); what about ACCESS_GLOBAL_ROM?")                                   //
            pZ->Method = ACCESS_GLOBAL;                                                                     //
            return;                                                                                         //
        }                                                                                                   //
        else {                                                                                              // Y + disp = Frame var
            pZ->pszS = pExpr->Use.Var.pszIdentifier;                                                        //
            pZ->lN   = pExpr->Use.Var.pDecId->Use.DecId.iOffset;                                            //
            pZ->Method = ACCESS_FRAME;                                                                      //
            return;                                                                                         //
        }                                                                                                   //
    }

    if ((pExpr->Usage == uUnary) && (pExpr->Use.Unary.Op == unPtr)) {                                       // *** Pointer (*, Arrays, dots & arrows)
        TPExprNode pN = pExpr->Use.Unary.pOperand;                                                          //

        ASSERT(pN->pType->Usage == DecPtr);
        TPDeclSpec pTarget = pN->pType->Use.DecPtr.pTarget;                                                 // type of target.

        if ((pN->Usage == uBinary) && (pN->Use.Binary.Op == binAdd)) {                                      // very common structure for array lookup is Add(addr,offset)
            TPExprNode pAddLeft = pN->Use.Binary.pLeft;                                                     //
            TPExprNode pAddRight = pN->Use.Binary.pRight;                                                   //

            if (pAddRight->Usage == uConst) {                                                               // if the right is constant we can use displaced index 
                int iOff = (int)pAddRight->Use.Const.lInteger;                                              //
                if ((pAddLeft->Usage == uUnary) &&                                                          // if Left is the address of a global variable
                    (pAddLeft->Use.Unary.Op == unAddr) &&                                                   //
                    (pAddLeft->Use.Unary.pOperand->Usage == uVar)) {                                        // 
                    pZ->pszS = pAddLeft->Use.Unary.pOperand->Use.Var.pszIdentifier;                         //      use its name with the povided offset.
                    if (pAddLeft->Use.Unary.pOperand->Use.Var.pDecId == NULL) {                             //
                        pZ->lN = iOff;                                                                      //
#pragma message("    **** FetchOptions(); what about ACCESS_GLOBAL_ROM?")                                   //
                        pZ->Method = ACCESS_GLOBAL;                                                         //
                        return;                                                                             //
                    }                                                                                       //
                    else {                                                                                  //
                        pZ->lN = pAddLeft->Use.Unary.pOperand->Use.Var.pDecId->Use.DecId.iOffset + iOff;    //
                        pZ->Method = ACCESS_FRAME;                                                          //
                        return;                                                                             //
                    }                                                                                       //
                }

                if (_GenCostOfCalculation(pAddLeft) < 2) {                                                  // Calc the address.
                    _GenExpr(30, pAddLeft);                                                                 //      if it's simple we load directly to Z
                }                                                                                           //
                else {                                                                                      // 
                    _GenExpr(iReg, pAddLeft);                                                               //      requires arithmetic so do it  
                    GenAsm("", "movw", OperandRegReg(30, REG_ACC0), "  1: pointer base");                   //       and move it to Z
                }                                                                                           //

                if ((iOff < 0) || ((64 - pZ->bVarSize) < iOff) || IsTypeQualifierConst(pTarget)) {          // if the displacement will be illegal 
                    GenAsm("", "adiw", OperandRegImmediate(30, iOff), "  2: displaced");                    //      add it to Z and 
                    iOff = 0;                                                                               //      make it zero.
                }

                pZ->lN = iOff;                                                                              // Tell the caller what the displacement is
#pragma message("    **** FetchOptions(); what about ACCESS_POINTER_ROM?")                                  //
                pZ->Method = ACCESS_POINTER;                                                                // Also that it's a Z indexed access.
                return;
            }
        }

        // un-optimized general case
        _GenExpr(iReg, pExpr);                                                                              // Calc descendant. gives address in ACC
        GenAsm("", "movw", OperandRegReg(30, REG_ACC0),          "  1: de-ref pointer");                    //
        pZ->lN = 0;                                                                                         // Tell the caller what the displacement is
#pragma message("    **** FetchOptions(); what about ACCESS_POINTER_ROM?")                                  //
        pZ->Method = ACCESS_POINTER;                                                                        // Also that it's a Z indexed access.
        return;
    }

    ASSERT(0);
                                                                                                            // un-optimized general case
    _GenExpr(iReg, pExpr);                                                                                  // Calc descendant. gives address in ACC
    GenAsm("", "movw", OperandRegReg(30, REG_ACC0), "  1: de-ref pointer");                                 //
    pZ->lN = 0;                                                                                             // Tell the caller what the displacement is
    pZ->Method = ACCESS_POINTER;                                                                            // Also that it's a Z indexed access.
    return;
        
}


// ##########################################################################
// #  Function: FetchLoad
// #        Fetch according to the recipie from <FetchOptions>()
// #
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void       FetchLoad(TPMemAccess pZ, int iReg) {

    int iVarSize = (int)pZ->bVarSize;
    ASSERT(iVarSize <= 4)

    switch (pZ->Method) {
    long l;
    unsigned char b;
    case ACCESS_CONST:                                                                                                          // Constant value
        if (pZ->lN == 0) {                                                                                                      //     #0 common special case   
            GenAsm("", "clr",  OperandReg(iReg + REG_ORDER0),                       CommentNumber(1, "reg <== #", pZ->lN));     //
            if (iVarSize < 2)  return;                                                                                          //
            GenAsm("", "mov",  OperandRegReg(iReg + REG_ORDER1, iReg + REG_ORDER0), "  1:");                                    //
            if (iVarSize < 4)  return;                                                                                          //
            GenAsm("", "movw", OperandRegReg(iReg + REG_ORDER2, iReg + REG_ORDER0), "  1:");                                    //
            return;                                                                                                             //
        }                                                                                                                       //
        if (pZ->lN == -1) {                                                                                                     //     #-1 common special case   
            GenAsm("", "ser",  OperandReg(iReg + REG_ORDER0),                       CommentNumber(1, "reg <== #", pZ->lN));     //
            if (iVarSize < 2)  return;                                                                                          //
            GenAsm("", "mov", OperandRegReg(iReg + REG_ORDER1, iReg + REG_ORDER0), "  1:");                                     //
            if (iVarSize < 4)  return;                                                                                          //
            GenAsm("", "movw", OperandRegReg(iReg + REG_ORDER2, iReg + REG_ORDER0), "  1:");                                    //
            return;                                                                                                             //
        }                                                                                                                       //
                                                                                                                                //
        l = pZ->lN;                                                                                                             //      # funny number
        b = (l & 0xFF);                                                                                                         //
        if (b == 0)        GenAsm("", "clr", OperandReg(iReg + REG_ORDER0),             CommentNumber(1, "reg <== #", pZ->lN)); //
        else if (b = 0xFF) GenAsm("", "ser", OperandReg(iReg + REG_ORDER0),             CommentNumber(1, "reg <== #", pZ->lN)); //
        else               GenAsm("", "ldi", OperandRegImmediate(iReg + REG_ORDER0, b), CommentNumber(1, "reg <== #", pZ->lN)); //
        if (iVarSize < 2)  return;                                                                                              //
                                                                                                                                //
        l >>= 8;                                                                                                                //
        b = (l & 0xFF);                                                                                                         //
        if (b == 0)        GenAsm("", "clr", OperandReg(iReg + REG_ORDER1),             "  1:");                                //
        else if (b = 0xFF) GenAsm("", "ser", OperandReg(iReg + REG_ORDER1),             "  1:");                                //
        else               GenAsm("", "ldi", OperandRegImmediate(iReg + REG_ORDER1, b), "  1:");                                //
        if (iVarSize < 4)  return;                                                                                              //
                                                                                                                                //
        l >>= 8;                                                                                                                //
        b = (l & 0xFF);                                                                                                         //
        if (b == 0)        GenAsm("", "clr", OperandReg(iReg + REG_ORDER2),             "  1:");                                //
        else if (b = 0xFF) GenAsm("", "ser", OperandReg(iReg + REG_ORDER2),             "  1:");                                //
        else               GenAsm("", "ldi", OperandRegImmediate(iReg + REG_ORDER2, b), "  1:");                                //
                                                                                                                                //
        l >>= 8;                                                                                                                //
        b = (l & 0xFF);                                                                                                         //
        if (b == 0)        GenAsm("", "clr", OperandReg(iReg + REG_ORDER3),             "  1:");                                //
        else if (b = 0xFF) GenAsm("", "ser", OperandReg(iReg + REG_ORDER3),             "  1:");                                //
        else               GenAsm("", "ldi", OperandRegImmediate(iReg + REG_ORDER3, b), "  1:");                                //
        return;                                                                                                                 //

    case ACCESS_GLOBAL:                                                                                                         // Global symbol normal (RAM/Data access)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "lds", OperandRegStr(iReg + REG_ORDER0, pZ->pszS), CommentString(1, " reg <== ", pZ->pszS));             //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "lds", OperandRegStrDisp(iReg + REG_ORDER0, pZ->pszS, pZ->lN), CommentString(1, "reg <== ", pZ->pszS));  //
        }                                                                                                                       //
        if (iVarSize < 2) return;                                                                                               //
        GenAsm("", "lds", OperandRegStrDisp(iReg + REG_ORDER1, pZ->pszS, pZ->lN + 1), "  1:");                                  //
        if (iVarSize < 4) return;                                                                                               //
        GenAsm("", "lds", OperandRegStrDisp(iReg + REG_ORDER2, pZ->pszS, pZ->lN + 2), "  1:");                                  //
        GenAsm("", "lds", OperandRegStrDisp(iReg + REG_ORDER3, pZ->pszS, pZ->lN + 3), "  1:");                                  //
        return;

    case ACCESS_FRAME:                                                                                                          // local or parameter variable. (offset y)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "ld", OperandRegStr(iReg + REG_ORDER0, "Y"), CommentString(1, "reg <= local ", pZ->pszS));               //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER0, "Y", pZ->lN), CommentString(2, "reg <= local ", pZ->pszS));     //
        }                                                                                                                       //
        if (iVarSize < 2) return;                                                                                               //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER1, "Y", pZ->lN + 1), "  2:");                                          //
        if (iVarSize < 4) return;                                                                                               //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER2, "Y", pZ->lN + 2), "  2:");                                          //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER3, "Y", pZ->lN + 3), "  2:");                                          //
        return;
                                                                                                                                
    case ACCESS_POINTER:                                                                                                        // A pointer has been collected into Z ready to be de-referenced. (offset Z)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "ldd", OperandRegStr(iReg + REG_ORDER0, "Z"), "  1: reg <== @Z");                                        //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER0, "Z", pZ->lN), "  2: reg <== @Z");                               //
        }                                                                                                                       //
        if (iVarSize < 2) return;                                                                                               //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER1, "Z", pZ->lN + 1), "  2:");                                          //
        if (iVarSize < 4) return;                                                                                               //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER2, "Z", pZ->lN + 2), "  2:");                                          //
        GenAsm("", "ldd", OperandRegDisp(iReg + REG_ORDER3, "Z", pZ->lN + 3), "  2:");                                          //
        return;
    
    case ACCESS_REG:                     //  [NS]  Register          
    case ACCESS_IO:                      //  [ S]  Special Function register
    case ACCESS_GLOBAL_ROM:              //  [NS]  global symbol but in ROM memory
    case ACCESS_POINTER_ROM:             //  [NS]  A pointer has been collected into Z ready to be de-referenced but it's in ROM memory.

    default:
        ASSERT(0);
    }
}

// ##########################################################################
// #  Function: FetchStore
// #        Fetch according to the recipie from <FetchOptions>()
// #
// #
// #  Parameters:
// #        <todo: params >
// #
// #  Returns:
// #        <todo: return Value>
// #
// #  See Also:
// #
// ##########################################################################
void       FetchStore(TPMemAccess pZ, int iReg) {

    int iVarSize = (int)pZ->bVarSize;
    ASSERT(iVarSize <= 4)

    switch (pZ->Method) {                                                                                                       // Write back

    case ACCESS_GLOBAL:                                                                                                         // Global symbol normal (RAM/Data access)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "sts", OperandStrReg(pZ->pszS, iReg + REG_ORDER0), CommentString(1, pZ->pszS, " <== reg "));             //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "sts", OperandStrDispReg(pZ->pszS, pZ->lN, iReg + REG_ORDER0), CommentString(1, pZ->pszS, " <== reg ")); //
        }                                                                                                                       //
        if (iVarSize < 2) break;                                                                                                //
        GenAsm("", "sts", OperandStrDispReg(pZ->pszS, pZ->lN + 1, iReg + REG_ORDER1), "  1:");                                  //
        if (iVarSize < 4) break;                                                                                                //
        GenAsm("", "sts", OperandStrDispReg(pZ->pszS, pZ->lN + 2, iReg + REG_ORDER2), "  1:");                                  //
        GenAsm("", "sts", OperandStrDispReg(pZ->pszS, pZ->lN + 3, iReg + REG_ORDER3), "  1:");                                  //
        break;

    case ACCESS_FRAME:                                                                                                          // local or parameter variable. (offset y)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "st", OperandStrReg("Y", iReg + REG_ORDER0), CommentString(1, " local <== reg ", pZ->pszS));             //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "std", OperandDispReg("Y", pZ->lN, iReg + REG_ORDER0), CommentString(2, " local <== reg ", pZ->pszS));   //
        }                                                                                                                       //
        if (iVarSize < 2) break;                                                                                                //
        GenAsm("", "std", OperandDispReg("Y", pZ->lN + 1, iReg + REG_ORDER1), "  2:");                                          //
        if (iVarSize < 4) break;                                                                                                //
        GenAsm("", "std", OperandDispReg("Y", pZ->lN + 2, iReg + REG_ORDER2), "  2:");                                          //
        GenAsm("", "std", OperandDispReg("Y", pZ->lN + 3, iReg + REG_ORDER3), "  2:");                                          //
        break;

    case ACCESS_POINTER:                                                                                                        // A pointer has been collected into Z ready to be de-referenced. (offset Z)
        if (pZ->lN == 0) {                                                                                                      //
            GenAsm("", "st", OperandStrReg("Z", iReg + REG_ORDER0), "  1: @Z <== reg");                                         //
        }                                                                                                                       //
        else {                                                                                                                  //
            GenAsm("", "std", OperandDispReg("Z", pZ->lN, iReg + REG_ORDER0), "  2: @Z <== reg");                               //
        }                                                                                                                       //
        if (iVarSize < 2) break;                                                                                                //
        GenAsm("", "std", OperandDispReg("Z", pZ->lN + 1, iReg + REG_ORDER1), "  2:");                                          //
        if (iVarSize < 4) break;                                                                                                //
        GenAsm("", "std", OperandDispReg("Z", pZ->lN + 2, iReg + REG_ORDER2), "  2:");                                          //
        GenAsm("", "std", OperandDispReg("Z", pZ->lN + 3, iReg + REG_ORDER3), "  2:");                                          //
        break;

    case ACCESS_CONST:                                                                                                          // Constant value
    case ACCESS_REG:                     //  [NS]  Register          
    case ACCESS_IO:                      //  [ S]  Special Function register
    case ACCESS_GLOBAL_ROM:              //  [NS]  global symbol but in ROM memory
    case ACCESS_POINTER_ROM:             //  [NS]  A pointer has been collected into Z ready to be de-referenced but it's in ROM memory.

    default:
        ASSERT(0);
    }
}


/* eof */

